{
  "swagger": "2.0",
  "info": {
    "title": "frontend/v1alpha1/metrics_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "MetricsService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1alpha1/metrics/service/{serviceName}/connections": {
      "get": {
        "summary": "GetServiceConnections returns inbound and outbound connections for a specific service.",
        "operationId": "MetricsService_GetServiceConnections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetServiceConnectionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceName",
            "description": "service_name is the name of the service to get connections for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "namespace is the Kubernetes namespace of the service.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "start_time specifies the start time for the metrics query (required).\nMust be in the past (before current time).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "end_time specifies the end time for the metrics query (required).\nMust be in the past (before current time) and after start_time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "MetricsService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alpha1GetServiceConnectionsResponse": {
      "type": "object",
      "properties": {
        "inbound": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1ServicePairMetrics"
          },
          "description": "inbound contains services that call this service."
        },
        "outbound": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1ServicePairMetrics"
          },
          "description": "outbound contains services that this service calls."
        },
        "timestamp": {
          "type": "string",
          "description": "timestamp is when these metrics were collected (RFC3339 format)."
        },
        "clustersQueried": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "clusters_queried lists the clusters that were queried for these metrics."
        }
      },
      "description": "GetServiceConnectionsResponse contains inbound and outbound service connections."
    },
    "v1alpha1HistogramBucket": {
      "type": "object",
      "properties": {
        "le": {
          "type": "number",
          "format": "double",
          "description": "le is the upper bound of the bucket (less-than-or-equal-to)."
        },
        "count": {
          "type": "number",
          "format": "double",
          "description": "count is the cumulative count of observations in this bucket."
        }
      },
      "description": "HistogramBucket represents a single bucket in a histogram distribution."
    },
    "v1alpha1LatencyDistribution": {
      "type": "object",
      "properties": {
        "buckets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1HistogramBucket"
          },
          "description": "buckets contains the histogram buckets sorted by upper bound."
        },
        "totalCount": {
          "type": "number",
          "format": "double",
          "description": "total_count is the total number of observations across all buckets."
        },
        "sum": {
          "type": "number",
          "format": "double",
          "description": "sum is the sum of all observed values."
        }
      },
      "description": "LatencyDistribution represents a histogram distribution of latency measurements."
    },
    "v1alpha1ServicePairMetrics": {
      "type": "object",
      "properties": {
        "sourceCluster": {
          "type": "string",
          "description": "source_cluster is the cluster name of the source service."
        },
        "sourceNamespace": {
          "type": "string",
          "description": "source_namespace is the namespace of the source service."
        },
        "sourceService": {
          "type": "string",
          "description": "source_service is the service name of the source service."
        },
        "destinationCluster": {
          "type": "string",
          "description": "destination_cluster is the cluster name of the destination service."
        },
        "destinationNamespace": {
          "type": "string",
          "description": "destination_namespace is the namespace of the destination service."
        },
        "destinationService": {
          "type": "string",
          "description": "destination_service is the service name of the destination service."
        },
        "errorRate": {
          "type": "number",
          "format": "double",
          "description": "error_rate is the error rate in requests per second."
        },
        "requestRate": {
          "type": "number",
          "format": "double",
          "description": "request_rate is the request rate in requests per second."
        },
        "latencyP99": {
          "type": "string",
          "description": "latency_p99 is the 99th percentile latency."
        },
        "latencyDistribution": {
          "$ref": "#/definitions/v1alpha1LatencyDistribution",
          "description": "latency_distribution contains the raw histogram distribution for latency.\nThis enables aggregation and percentile calculation at different levels."
        }
      },
      "description": "ServicePairMetrics represents metrics between a source and destination service."
    }
  }
}

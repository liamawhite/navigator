// Copyright 2025 Navigator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: types/v1alpha1/metrics_types.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HistogramBucket represents a single bucket in a histogram distribution.
type HistogramBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// le is the upper bound of the bucket (less-than-or-equal-to).
	Le float64 `protobuf:"fixed64,1,opt,name=le,proto3" json:"le,omitempty"`
	// count is the cumulative count of observations in this bucket.
	Count float64 `protobuf:"fixed64,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *HistogramBucket) Reset() {
	*x = HistogramBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramBucket) ProtoMessage() {}

func (x *HistogramBucket) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramBucket.ProtoReflect.Descriptor instead.
func (*HistogramBucket) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_metrics_types_proto_rawDescGZIP(), []int{0}
}

func (x *HistogramBucket) GetLe() float64 {
	if x != nil {
		return x.Le
	}
	return 0
}

func (x *HistogramBucket) GetCount() float64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// LatencyDistribution represents a histogram distribution of latency measurements.
type LatencyDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// buckets contains the histogram buckets sorted by upper bound.
	Buckets []*HistogramBucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
	// total_count is the total number of observations across all buckets.
	TotalCount float64 `protobuf:"fixed64,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// sum is the sum of all observed values.
	Sum float64 `protobuf:"fixed64,3,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *LatencyDistribution) Reset() {
	*x = LatencyDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyDistribution) ProtoMessage() {}

func (x *LatencyDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyDistribution.ProtoReflect.Descriptor instead.
func (*LatencyDistribution) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_metrics_types_proto_rawDescGZIP(), []int{1}
}

func (x *LatencyDistribution) GetBuckets() []*HistogramBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *LatencyDistribution) GetTotalCount() float64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *LatencyDistribution) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

// ServicePairMetrics represents metrics between a source and destination service.
type ServicePairMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_cluster is the cluster name of the source service.
	SourceCluster string `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// source_namespace is the namespace of the source service.
	SourceNamespace string `protobuf:"bytes,2,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	// source_service is the service name of the source service.
	SourceService string `protobuf:"bytes,3,opt,name=source_service,json=sourceService,proto3" json:"source_service,omitempty"`
	// destination_cluster is the cluster name of the destination service.
	DestinationCluster string `protobuf:"bytes,4,opt,name=destination_cluster,json=destinationCluster,proto3" json:"destination_cluster,omitempty"`
	// destination_namespace is the namespace of the destination service.
	DestinationNamespace string `protobuf:"bytes,5,opt,name=destination_namespace,json=destinationNamespace,proto3" json:"destination_namespace,omitempty"`
	// destination_service is the service name of the destination service.
	DestinationService string `protobuf:"bytes,6,opt,name=destination_service,json=destinationService,proto3" json:"destination_service,omitempty"`
	// error_rate is the error rate in requests per second.
	ErrorRate float64 `protobuf:"fixed64,7,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	// request_rate is the request rate in requests per second.
	RequestRate float64 `protobuf:"fixed64,8,opt,name=request_rate,json=requestRate,proto3" json:"request_rate,omitempty"`
	// latency_p99 is the 99th percentile latency.
	LatencyP99 *durationpb.Duration `protobuf:"bytes,9,opt,name=latency_p99,json=latencyP99,proto3" json:"latency_p99,omitempty"`
	// latency_distribution contains the raw histogram distribution for latency.
	// This enables aggregation and percentile calculation at different levels.
	LatencyDistribution *LatencyDistribution `protobuf:"bytes,10,opt,name=latency_distribution,json=latencyDistribution,proto3" json:"latency_distribution,omitempty"`
}

func (x *ServicePairMetrics) Reset() {
	*x = ServicePairMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePairMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePairMetrics) ProtoMessage() {}

func (x *ServicePairMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePairMetrics.ProtoReflect.Descriptor instead.
func (*ServicePairMetrics) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_metrics_types_proto_rawDescGZIP(), []int{2}
}

func (x *ServicePairMetrics) GetSourceCluster() string {
	if x != nil {
		return x.SourceCluster
	}
	return ""
}

func (x *ServicePairMetrics) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *ServicePairMetrics) GetSourceService() string {
	if x != nil {
		return x.SourceService
	}
	return ""
}

func (x *ServicePairMetrics) GetDestinationCluster() string {
	if x != nil {
		return x.DestinationCluster
	}
	return ""
}

func (x *ServicePairMetrics) GetDestinationNamespace() string {
	if x != nil {
		return x.DestinationNamespace
	}
	return ""
}

func (x *ServicePairMetrics) GetDestinationService() string {
	if x != nil {
		return x.DestinationService
	}
	return ""
}

func (x *ServicePairMetrics) GetErrorRate() float64 {
	if x != nil {
		return x.ErrorRate
	}
	return 0
}

func (x *ServicePairMetrics) GetRequestRate() float64 {
	if x != nil {
		return x.RequestRate
	}
	return 0
}

func (x *ServicePairMetrics) GetLatencyP99() *durationpb.Duration {
	if x != nil {
		return x.LatencyP99
	}
	return nil
}

func (x *ServicePairMetrics) GetLatencyDistribution() *LatencyDistribution {
	if x != nil {
		return x.LatencyDistribution
	}
	return nil
}

// GraphMetricsFilters specify filters for service graph metrics queries.
type GraphMetricsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// namespaces filters metrics to only include these namespaces.
	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// clusters filters metrics to only include these clusters.
	Clusters []string `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *GraphMetricsFilters) Reset() {
	*x = GraphMetricsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphMetricsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphMetricsFilters) ProtoMessage() {}

func (x *GraphMetricsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphMetricsFilters.ProtoReflect.Descriptor instead.
func (*GraphMetricsFilters) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_metrics_types_proto_rawDescGZIP(), []int{3}
}

func (x *GraphMetricsFilters) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *GraphMetricsFilters) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// ClusterPairInfo describes a cluster-to-cluster relationship for a service pair.
type ClusterPairInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_cluster is the cluster name of the source service.
	SourceCluster string `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// destination_cluster is the cluster name of the destination service.
	DestinationCluster string `protobuf:"bytes,2,opt,name=destination_cluster,json=destinationCluster,proto3" json:"destination_cluster,omitempty"`
	// request_rate is the request rate for this specific cluster pair.
	RequestRate float64 `protobuf:"fixed64,3,opt,name=request_rate,json=requestRate,proto3" json:"request_rate,omitempty"`
}

func (x *ClusterPairInfo) Reset() {
	*x = ClusterPairInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairInfo) ProtoMessage() {}

func (x *ClusterPairInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairInfo.ProtoReflect.Descriptor instead.
func (*ClusterPairInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_metrics_types_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterPairInfo) GetSourceCluster() string {
	if x != nil {
		return x.SourceCluster
	}
	return ""
}

func (x *ClusterPairInfo) GetDestinationCluster() string {
	if x != nil {
		return x.DestinationCluster
	}
	return ""
}

func (x *ClusterPairInfo) GetRequestRate() float64 {
	if x != nil {
		return x.RequestRate
	}
	return 0
}

// AggregatedServicePairMetrics represents properly aggregated metrics across clusters.
type AggregatedServicePairMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_namespace is the namespace of the source service.
	SourceNamespace string `protobuf:"bytes,1,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	// source_service is the service name of the source service.
	SourceService string `protobuf:"bytes,2,opt,name=source_service,json=sourceService,proto3" json:"source_service,omitempty"`
	// destination_namespace is the namespace of the destination service.
	DestinationNamespace string `protobuf:"bytes,3,opt,name=destination_namespace,json=destinationNamespace,proto3" json:"destination_namespace,omitempty"`
	// destination_service is the service name of the destination service.
	DestinationService string `protobuf:"bytes,4,opt,name=destination_service,json=destinationService,proto3" json:"destination_service,omitempty"`
	// error_rate is the aggregated error rate across all clusters.
	ErrorRate float64 `protobuf:"fixed64,5,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	// request_rate is the aggregated request rate across all clusters.
	RequestRate float64 `protobuf:"fixed64,6,opt,name=request_rate,json=requestRate,proto3" json:"request_rate,omitempty"`
	// latency_p99 is the properly calculated P99 from aggregated histogram.
	LatencyP99 *durationpb.Duration `protobuf:"bytes,7,opt,name=latency_p99,json=latencyP99,proto3" json:"latency_p99,omitempty"`
	// cluster_pairs contains cluster relationship information.
	ClusterPairs []*ClusterPairInfo `protobuf:"bytes,8,rep,name=cluster_pairs,json=clusterPairs,proto3" json:"cluster_pairs,omitempty"`
}

func (x *AggregatedServicePairMetrics) Reset() {
	*x = AggregatedServicePairMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedServicePairMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedServicePairMetrics) ProtoMessage() {}

func (x *AggregatedServicePairMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedServicePairMetrics.ProtoReflect.Descriptor instead.
func (*AggregatedServicePairMetrics) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_metrics_types_proto_rawDescGZIP(), []int{5}
}

func (x *AggregatedServicePairMetrics) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *AggregatedServicePairMetrics) GetSourceService() string {
	if x != nil {
		return x.SourceService
	}
	return ""
}

func (x *AggregatedServicePairMetrics) GetDestinationNamespace() string {
	if x != nil {
		return x.DestinationNamespace
	}
	return ""
}

func (x *AggregatedServicePairMetrics) GetDestinationService() string {
	if x != nil {
		return x.DestinationService
	}
	return ""
}

func (x *AggregatedServicePairMetrics) GetErrorRate() float64 {
	if x != nil {
		return x.ErrorRate
	}
	return 0
}

func (x *AggregatedServicePairMetrics) GetRequestRate() float64 {
	if x != nil {
		return x.RequestRate
	}
	return 0
}

func (x *AggregatedServicePairMetrics) GetLatencyP99() *durationpb.Duration {
	if x != nil {
		return x.LatencyP99
	}
	return nil
}

func (x *AggregatedServicePairMetrics) GetClusterPairs() []*ClusterPairInfo {
	if x != nil {
		return x.ClusterPairs
	}
	return nil
}

// ServiceGraphMetrics contains service-to-service metrics for a cluster.
type ServiceGraphMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pairs contains the service-to-service metrics.
	Pairs []*ServicePairMetrics `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	// cluster_id is the ID of the cluster these metrics came from.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// timestamp is when these metrics were collected (RFC3339 format).
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ServiceGraphMetrics) Reset() {
	*x = ServiceGraphMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGraphMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGraphMetrics) ProtoMessage() {}

func (x *ServiceGraphMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_metrics_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGraphMetrics.ProtoReflect.Descriptor instead.
func (*ServiceGraphMetrics) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_metrics_types_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceGraphMetrics) GetPairs() []*ServicePairMetrics {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *ServiceGraphMetrics) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ServiceGraphMetrics) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

var File_types_v1alpha1_metrics_types_proto protoreflect.FileDescriptor

var file_types_v1alpha1_metrics_types_proto_rawDesc = []byte{
	0x0a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37,
	0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x84, 0x04, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x39, 0x39, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x39, 0x39, 0x12, 0x60, 0x0a, 0x14,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51,
	0x0a, 0x13, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x22, 0xa4, 0x03, 0x0a, 0x1c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x39, 0x39, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x42, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x69, 0x61, 0x6d, 0x61, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_types_v1alpha1_metrics_types_proto_rawDescOnce sync.Once
	file_types_v1alpha1_metrics_types_proto_rawDescData = file_types_v1alpha1_metrics_types_proto_rawDesc
)

func file_types_v1alpha1_metrics_types_proto_rawDescGZIP() []byte {
	file_types_v1alpha1_metrics_types_proto_rawDescOnce.Do(func() {
		file_types_v1alpha1_metrics_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_v1alpha1_metrics_types_proto_rawDescData)
	})
	return file_types_v1alpha1_metrics_types_proto_rawDescData
}

var file_types_v1alpha1_metrics_types_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_types_v1alpha1_metrics_types_proto_goTypes = []any{
	(*HistogramBucket)(nil),              // 0: navigator.types.v1alpha1.HistogramBucket
	(*LatencyDistribution)(nil),          // 1: navigator.types.v1alpha1.LatencyDistribution
	(*ServicePairMetrics)(nil),           // 2: navigator.types.v1alpha1.ServicePairMetrics
	(*GraphMetricsFilters)(nil),          // 3: navigator.types.v1alpha1.GraphMetricsFilters
	(*ClusterPairInfo)(nil),              // 4: navigator.types.v1alpha1.ClusterPairInfo
	(*AggregatedServicePairMetrics)(nil), // 5: navigator.types.v1alpha1.AggregatedServicePairMetrics
	(*ServiceGraphMetrics)(nil),          // 6: navigator.types.v1alpha1.ServiceGraphMetrics
	(*durationpb.Duration)(nil),          // 7: google.protobuf.Duration
}
var file_types_v1alpha1_metrics_types_proto_depIdxs = []int32{
	0, // 0: navigator.types.v1alpha1.LatencyDistribution.buckets:type_name -> navigator.types.v1alpha1.HistogramBucket
	7, // 1: navigator.types.v1alpha1.ServicePairMetrics.latency_p99:type_name -> google.protobuf.Duration
	1, // 2: navigator.types.v1alpha1.ServicePairMetrics.latency_distribution:type_name -> navigator.types.v1alpha1.LatencyDistribution
	7, // 3: navigator.types.v1alpha1.AggregatedServicePairMetrics.latency_p99:type_name -> google.protobuf.Duration
	4, // 4: navigator.types.v1alpha1.AggregatedServicePairMetrics.cluster_pairs:type_name -> navigator.types.v1alpha1.ClusterPairInfo
	2, // 5: navigator.types.v1alpha1.ServiceGraphMetrics.pairs:type_name -> navigator.types.v1alpha1.ServicePairMetrics
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_types_v1alpha1_metrics_types_proto_init() }
func file_types_v1alpha1_metrics_types_proto_init() {
	if File_types_v1alpha1_metrics_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_v1alpha1_metrics_types_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HistogramBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_metrics_types_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*LatencyDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_metrics_types_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ServicePairMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_metrics_types_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GraphMetricsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_metrics_types_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterPairInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_metrics_types_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AggregatedServicePairMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_metrics_types_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ServiceGraphMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_v1alpha1_metrics_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_v1alpha1_metrics_types_proto_goTypes,
		DependencyIndexes: file_types_v1alpha1_metrics_types_proto_depIdxs,
		MessageInfos:      file_types_v1alpha1_metrics_types_proto_msgTypes,
	}.Build()
	File_types_v1alpha1_metrics_types_proto = out.File
	file_types_v1alpha1_metrics_types_proto_rawDesc = nil
	file_types_v1alpha1_metrics_types_proto_goTypes = nil
	file_types_v1alpha1_metrics_types_proto_depIdxs = nil
}

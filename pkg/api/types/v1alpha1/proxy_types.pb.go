// Copyright 2025 Navigator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: types/v1alpha1/proxy_types.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProxyMode indicates the type of proxy (extracted from node ID)
type ProxyMode int32

const (
	// UNKNOWN_PROXY_MODE indicates an unknown or unspecified proxy mode
	ProxyMode_UNKNOWN_PROXY_MODE ProxyMode = 0
	// SIDECAR indicates a sidecar proxy (most common in Istio)
	ProxyMode_SIDECAR ProxyMode = 1
	// GATEWAY indicates a gateway proxy (ingress/egress gateways)
	ProxyMode_GATEWAY ProxyMode = 2
	// ROUTER indicates a router proxy
	ProxyMode_ROUTER ProxyMode = 3
)

// Enum value maps for ProxyMode.
var (
	ProxyMode_name = map[int32]string{
		0: "UNKNOWN_PROXY_MODE",
		1: "SIDECAR",
		2: "GATEWAY",
		3: "ROUTER",
	}
	ProxyMode_value = map[string]int32{
		"UNKNOWN_PROXY_MODE": 0,
		"SIDECAR":            1,
		"GATEWAY":            2,
		"ROUTER":             3,
	}
)

func (x ProxyMode) Enum() *ProxyMode {
	p := new(ProxyMode)
	*p = x
	return p
}

func (x ProxyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1alpha1_proxy_types_proto_enumTypes[0].Descriptor()
}

func (ProxyMode) Type() protoreflect.EnumType {
	return &file_types_v1alpha1_proxy_types_proto_enumTypes[0]
}

func (x ProxyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProxyMode.Descriptor instead.
func (ProxyMode) EnumDescriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{0}
}

// ListenerType indicates the type/direction of a listener
type ListenerType int32

const (
	// VIRTUAL_INBOUND listeners are virtual inbound listeners (typically 0.0.0.0 without use_original_dst)
	ListenerType_VIRTUAL_INBOUND ListenerType = 0
	// VIRTUAL_OUTBOUND listeners are virtual outbound listeners (typically 0.0.0.0 with use_original_dst)
	ListenerType_VIRTUAL_OUTBOUND ListenerType = 1
	// SERVICE_OUTBOUND listeners for specific upstream services (service.namespace.svc.cluster.local:port)
	ListenerType_SERVICE_OUTBOUND ListenerType = 2
	// PORT_OUTBOUND listeners for generic port traffic outbound (e.g., "80", "443")
	ListenerType_PORT_OUTBOUND ListenerType = 3
	// PROXY_METRICS listeners serve Prometheus metrics (typically on port 15090)
	ListenerType_PROXY_METRICS ListenerType = 4
	// PROXY_HEALTHCHECK listeners serve health check endpoints (typically on port 15021)
	ListenerType_PROXY_HEALTHCHECK ListenerType = 5
	// ADMIN_XDS listeners serve Envoy xDS configuration (typically on port 15010)
	ListenerType_ADMIN_XDS ListenerType = 6
	// ADMIN_WEBHOOK listeners serve Istio webhook endpoints (typically on port 15012)
	ListenerType_ADMIN_WEBHOOK ListenerType = 7
	// ADMIN_DEBUG listeners serve Envoy debug/admin interface (typically on port 15014)
	ListenerType_ADMIN_DEBUG ListenerType = 8
)

// Enum value maps for ListenerType.
var (
	ListenerType_name = map[int32]string{
		0: "VIRTUAL_INBOUND",
		1: "VIRTUAL_OUTBOUND",
		2: "SERVICE_OUTBOUND",
		3: "PORT_OUTBOUND",
		4: "PROXY_METRICS",
		5: "PROXY_HEALTHCHECK",
		6: "ADMIN_XDS",
		7: "ADMIN_WEBHOOK",
		8: "ADMIN_DEBUG",
	}
	ListenerType_value = map[string]int32{
		"VIRTUAL_INBOUND":   0,
		"VIRTUAL_OUTBOUND":  1,
		"SERVICE_OUTBOUND":  2,
		"PORT_OUTBOUND":     3,
		"PROXY_METRICS":     4,
		"PROXY_HEALTHCHECK": 5,
		"ADMIN_XDS":         6,
		"ADMIN_WEBHOOK":     7,
		"ADMIN_DEBUG":       8,
	}
)

func (x ListenerType) Enum() *ListenerType {
	p := new(ListenerType)
	*p = x
	return p
}

func (x ListenerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListenerType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1alpha1_proxy_types_proto_enumTypes[1].Descriptor()
}

func (ListenerType) Type() protoreflect.EnumType {
	return &file_types_v1alpha1_proxy_types_proto_enumTypes[1]
}

func (x ListenerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListenerType.Descriptor instead.
func (ListenerType) EnumDescriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{1}
}

// RouteType indicates the type/category of a route configuration
type RouteType int32

const (
	// PORT_BASED routes are routes with just port numbers (e.g., "80", "443", "15010")
	RouteType_PORT_BASED RouteType = 0
	// SERVICE_SPECIFIC routes are routes with service hostnames and ports (e.g., "backend.demo.svc.cluster.local:8080", external domains from ServiceEntries)
	RouteType_SERVICE_SPECIFIC RouteType = 1
	// STATIC routes are Istio/Envoy internal routing patterns (e.g., "InboundPassthroughCluster", "inbound|8080||")
	RouteType_STATIC RouteType = 2
)

// Enum value maps for RouteType.
var (
	RouteType_name = map[int32]string{
		0: "PORT_BASED",
		1: "SERVICE_SPECIFIC",
		2: "STATIC",
	}
	RouteType_value = map[string]int32{
		"PORT_BASED":       0,
		"SERVICE_SPECIFIC": 1,
		"STATIC":           2,
	}
)

func (x RouteType) Enum() *RouteType {
	p := new(RouteType)
	*p = x
	return p
}

func (x RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1alpha1_proxy_types_proto_enumTypes[2].Descriptor()
}

func (RouteType) Type() protoreflect.EnumType {
	return &file_types_v1alpha1_proxy_types_proto_enumTypes[2]
}

func (x RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteType.Descriptor instead.
func (RouteType) EnumDescriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{2}
}

// ClusterType represents the discovery type of a cluster
type ClusterType int32

const (
	// UNKNOWN_CLUSTER_TYPE indicates an unknown or unspecified cluster type
	ClusterType_UNKNOWN_CLUSTER_TYPE ClusterType = 0
	// CLUSTER_EDS indicates Endpoint Discovery Service clusters (dynamic service discovery)
	ClusterType_CLUSTER_EDS ClusterType = 1
	// CLUSTER_STATIC indicates static clusters with predefined endpoints
	ClusterType_CLUSTER_STATIC ClusterType = 2
	// CLUSTER_STRICT_DNS indicates clusters using strict DNS resolution
	ClusterType_CLUSTER_STRICT_DNS ClusterType = 3
	// CLUSTER_LOGICAL_DNS indicates clusters using logical DNS resolution
	ClusterType_CLUSTER_LOGICAL_DNS ClusterType = 4
	// CLUSTER_ORIGINAL_DST indicates clusters using original destination routing
	ClusterType_CLUSTER_ORIGINAL_DST ClusterType = 5
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "UNKNOWN_CLUSTER_TYPE",
		1: "CLUSTER_EDS",
		2: "CLUSTER_STATIC",
		3: "CLUSTER_STRICT_DNS",
		4: "CLUSTER_LOGICAL_DNS",
		5: "CLUSTER_ORIGINAL_DST",
	}
	ClusterType_value = map[string]int32{
		"UNKNOWN_CLUSTER_TYPE": 0,
		"CLUSTER_EDS":          1,
		"CLUSTER_STATIC":       2,
		"CLUSTER_STRICT_DNS":   3,
		"CLUSTER_LOGICAL_DNS":  4,
		"CLUSTER_ORIGINAL_DST": 5,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1alpha1_proxy_types_proto_enumTypes[3].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_types_v1alpha1_proxy_types_proto_enumTypes[3]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{3}
}

// ClusterDirection represents the traffic direction for a cluster
type ClusterDirection int32

const (
	// UNSPECIFIED indicates the direction is not specified or unknown
	ClusterDirection_UNSPECIFIED ClusterDirection = 0
	// INBOUND indicates traffic flowing into the service
	ClusterDirection_INBOUND ClusterDirection = 1
	// OUTBOUND indicates traffic flowing out of the service
	ClusterDirection_OUTBOUND ClusterDirection = 2
)

// Enum value maps for ClusterDirection.
var (
	ClusterDirection_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INBOUND",
		2: "OUTBOUND",
	}
	ClusterDirection_value = map[string]int32{
		"UNSPECIFIED": 0,
		"INBOUND":     1,
		"OUTBOUND":    2,
	}
)

func (x ClusterDirection) Enum() *ClusterDirection {
	p := new(ClusterDirection)
	*p = x
	return p
}

func (x ClusterDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1alpha1_proxy_types_proto_enumTypes[4].Descriptor()
}

func (ClusterDirection) Type() protoreflect.EnumType {
	return &file_types_v1alpha1_proxy_types_proto_enumTypes[4]
}

func (x ClusterDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterDirection.Descriptor instead.
func (ClusterDirection) EnumDescriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{4}
}

// ProxyConfig represents the configuration of a proxy sidecar (e.g., Envoy).
type ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version is the version of the proxy software.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// raw_config_dump is the original raw configuration dump for debugging.
	RawConfigDump string `protobuf:"bytes,2,opt,name=raw_config_dump,json=rawConfigDump,proto3" json:"raw_config_dump,omitempty"`
	// bootstrap contains the bootstrap configuration summary.
	Bootstrap *BootstrapSummary `protobuf:"bytes,3,opt,name=bootstrap,proto3" json:"bootstrap,omitempty"`
	// listeners contains the listener configuration summaries.
	Listeners []*ListenerSummary `protobuf:"bytes,4,rep,name=listeners,proto3" json:"listeners,omitempty"`
	// clusters contains the cluster configuration summaries.
	Clusters []*ClusterSummary `protobuf:"bytes,5,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// endpoints contains the endpoint configuration summaries.
	Endpoints []*EndpointSummary `protobuf:"bytes,6,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// routes contains the route configuration summaries.
	Routes []*RouteConfigSummary `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *ProxyConfig) Reset() {
	*x = ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyConfig) ProtoMessage() {}

func (x *ProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyConfig.ProtoReflect.Descriptor instead.
func (*ProxyConfig) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{0}
}

func (x *ProxyConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProxyConfig) GetRawConfigDump() string {
	if x != nil {
		return x.RawConfigDump
	}
	return ""
}

func (x *ProxyConfig) GetBootstrap() *BootstrapSummary {
	if x != nil {
		return x.Bootstrap
	}
	return nil
}

func (x *ProxyConfig) GetListeners() []*ListenerSummary {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *ProxyConfig) GetClusters() []*ClusterSummary {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ProxyConfig) GetEndpoints() []*EndpointSummary {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *ProxyConfig) GetRoutes() []*RouteConfigSummary {
	if x != nil {
		return x.Routes
	}
	return nil
}

// BootstrapSummary contains essential bootstrap configuration information
type BootstrapSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                   *NodeSummary        `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	StaticResourcesVersion string              `protobuf:"bytes,2,opt,name=static_resources_version,json=staticResourcesVersion,proto3" json:"static_resources_version,omitempty"`
	DynamicResourcesConfig *DynamicConfigInfo  `protobuf:"bytes,3,opt,name=dynamic_resources_config,json=dynamicResourcesConfig,proto3" json:"dynamic_resources_config,omitempty"`
	AdminPort              uint32              `protobuf:"varint,4,opt,name=admin_port,json=adminPort,proto3" json:"admin_port,omitempty"`
	AdminAddress           string              `protobuf:"bytes,5,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	ClusterManager         *ClusterManagerInfo `protobuf:"bytes,6,opt,name=cluster_manager,json=clusterManager,proto3" json:"cluster_manager,omitempty"`
}

func (x *BootstrapSummary) Reset() {
	*x = BootstrapSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapSummary) ProtoMessage() {}

func (x *BootstrapSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapSummary.ProtoReflect.Descriptor instead.
func (*BootstrapSummary) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{1}
}

func (x *BootstrapSummary) GetNode() *NodeSummary {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *BootstrapSummary) GetStaticResourcesVersion() string {
	if x != nil {
		return x.StaticResourcesVersion
	}
	return ""
}

func (x *BootstrapSummary) GetDynamicResourcesConfig() *DynamicConfigInfo {
	if x != nil {
		return x.DynamicResourcesConfig
	}
	return nil
}

func (x *BootstrapSummary) GetAdminPort() uint32 {
	if x != nil {
		return x.AdminPort
	}
	return 0
}

func (x *BootstrapSummary) GetAdminAddress() string {
	if x != nil {
		return x.AdminAddress
	}
	return ""
}

func (x *BootstrapSummary) GetClusterManager() *ClusterManagerInfo {
	if x != nil {
		return x.ClusterManager
	}
	return nil
}

// NodeSummary contains information about the Envoy node
type NodeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cluster   string            `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Locality  *LocalityInfo     `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	ProxyMode ProxyMode         `protobuf:"varint,5,opt,name=proxy_mode,json=proxyMode,proto3,enum=navigator.types.v1alpha1.ProxyMode" json:"proxy_mode,omitempty"`
}

func (x *NodeSummary) Reset() {
	*x = NodeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSummary) ProtoMessage() {}

func (x *NodeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSummary.ProtoReflect.Descriptor instead.
func (*NodeSummary) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{2}
}

func (x *NodeSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeSummary) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *NodeSummary) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NodeSummary) GetLocality() *LocalityInfo {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *NodeSummary) GetProxyMode() ProxyMode {
	if x != nil {
		return x.ProxyMode
	}
	return ProxyMode_UNKNOWN_PROXY_MODE
}

// LocalityInfo contains locality information
type LocalityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Zone   string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *LocalityInfo) Reset() {
	*x = LocalityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalityInfo) ProtoMessage() {}

func (x *LocalityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalityInfo.ProtoReflect.Descriptor instead.
func (*LocalityInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{3}
}

func (x *LocalityInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *LocalityInfo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

// DynamicConfigInfo contains information about dynamic resource configuration
type DynamicConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsConfig           *ConfigSourceInfo `protobuf:"bytes,1,opt,name=ads_config,json=adsConfig,proto3" json:"ads_config,omitempty"`
	LdsConfig           *ConfigSourceInfo `protobuf:"bytes,2,opt,name=lds_config,json=ldsConfig,proto3" json:"lds_config,omitempty"`
	CdsConfig           *ConfigSourceInfo `protobuf:"bytes,3,opt,name=cds_config,json=cdsConfig,proto3" json:"cds_config,omitempty"`
	EdsConfig           *ConfigSourceInfo `protobuf:"bytes,4,opt,name=eds_config,json=edsConfig,proto3" json:"eds_config,omitempty"`
	RdsConfig           *ConfigSourceInfo `protobuf:"bytes,5,opt,name=rds_config,json=rdsConfig,proto3" json:"rds_config,omitempty"`
	SdsConfig           *ConfigSourceInfo `protobuf:"bytes,6,opt,name=sds_config,json=sdsConfig,proto3" json:"sds_config,omitempty"`
	InitialFetchTimeout string            `protobuf:"bytes,7,opt,name=initial_fetch_timeout,json=initialFetchTimeout,proto3" json:"initial_fetch_timeout,omitempty"`
}

func (x *DynamicConfigInfo) Reset() {
	*x = DynamicConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicConfigInfo) ProtoMessage() {}

func (x *DynamicConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicConfigInfo.ProtoReflect.Descriptor instead.
func (*DynamicConfigInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{4}
}

func (x *DynamicConfigInfo) GetAdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.AdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetLdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.LdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetCdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.CdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetEdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.EdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetRdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.RdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetSdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.SdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetInitialFetchTimeout() string {
	if x != nil {
		return x.InitialFetchTimeout
	}
	return ""
}

// ConfigSourceInfo contains information about a configuration source
type ConfigSourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigSourceSpecifier string `protobuf:"bytes,1,opt,name=config_source_specifier,json=configSourceSpecifier,proto3" json:"config_source_specifier,omitempty"`
	TransportApiVersion   string `protobuf:"bytes,2,opt,name=transport_api_version,json=transportApiVersion,proto3" json:"transport_api_version,omitempty"`
	ApiType               string `protobuf:"bytes,3,opt,name=api_type,json=apiType,proto3" json:"api_type,omitempty"`
}

func (x *ConfigSourceInfo) Reset() {
	*x = ConfigSourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSourceInfo) ProtoMessage() {}

func (x *ConfigSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSourceInfo.ProtoReflect.Descriptor instead.
func (*ConfigSourceInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigSourceInfo) GetConfigSourceSpecifier() string {
	if x != nil {
		return x.ConfigSourceSpecifier
	}
	return ""
}

func (x *ConfigSourceInfo) GetTransportApiVersion() string {
	if x != nil {
		return x.TransportApiVersion
	}
	return ""
}

func (x *ConfigSourceInfo) GetApiType() string {
	if x != nil {
		return x.ApiType
	}
	return ""
}

// ClusterManagerInfo contains cluster manager configuration
type ClusterManagerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalClusterName              string `protobuf:"bytes,1,opt,name=local_cluster_name,json=localClusterName,proto3" json:"local_cluster_name,omitempty"`
	OutlierDetection              bool   `protobuf:"varint,2,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	UpstreamBindConfig            bool   `protobuf:"varint,3,opt,name=upstream_bind_config,json=upstreamBindConfig,proto3" json:"upstream_bind_config,omitempty"`
	LoadStatsConfig               bool   `protobuf:"varint,4,opt,name=load_stats_config,json=loadStatsConfig,proto3" json:"load_stats_config,omitempty"`
	ConnectTimeout                string `protobuf:"bytes,5,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	PerConnectionBufferLimitBytes uint32 `protobuf:"varint,6,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
}

func (x *ClusterManagerInfo) Reset() {
	*x = ClusterManagerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterManagerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterManagerInfo) ProtoMessage() {}

func (x *ClusterManagerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterManagerInfo.ProtoReflect.Descriptor instead.
func (*ClusterManagerInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterManagerInfo) GetLocalClusterName() string {
	if x != nil {
		return x.LocalClusterName
	}
	return ""
}

func (x *ClusterManagerInfo) GetOutlierDetection() bool {
	if x != nil {
		return x.OutlierDetection
	}
	return false
}

func (x *ClusterManagerInfo) GetUpstreamBindConfig() bool {
	if x != nil {
		return x.UpstreamBindConfig
	}
	return false
}

func (x *ClusterManagerInfo) GetLoadStatsConfig() bool {
	if x != nil {
		return x.LoadStatsConfig
	}
	return false
}

func (x *ClusterManagerInfo) GetConnectTimeout() string {
	if x != nil {
		return x.ConnectTimeout
	}
	return ""
}

func (x *ClusterManagerInfo) GetPerConnectionBufferLimitBytes() uint32 {
	if x != nil {
		return x.PerConnectionBufferLimitBytes
	}
	return 0
}

// ListenerSummary contains essential listener configuration information
type ListenerSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address        string       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port           uint32       `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Type           ListenerType `protobuf:"varint,4,opt,name=type,proto3,enum=navigator.types.v1alpha1.ListenerType" json:"type,omitempty"`
	UseOriginalDst bool         `protobuf:"varint,5,opt,name=use_original_dst,json=useOriginalDst,proto3" json:"use_original_dst,omitempty"`
	RawConfig      string       `protobuf:"bytes,6,opt,name=raw_config,json=rawConfig,proto3" json:"raw_config,omitempty"`
}

func (x *ListenerSummary) Reset() {
	*x = ListenerSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerSummary) ProtoMessage() {}

func (x *ListenerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerSummary.ProtoReflect.Descriptor instead.
func (*ListenerSummary) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{7}
}

func (x *ListenerSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListenerSummary) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListenerSummary) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ListenerSummary) GetType() ListenerType {
	if x != nil {
		return x.Type
	}
	return ListenerType_VIRTUAL_INBOUND
}

func (x *ListenerSummary) GetUseOriginalDst() bool {
	if x != nil {
		return x.UseOriginalDst
	}
	return false
}

func (x *ListenerSummary) GetRawConfig() string {
	if x != nil {
		return x.RawConfig
	}
	return ""
}

// ClusterSummary contains essential cluster configuration information
type ClusterSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ConnectTimeout      string           `protobuf:"bytes,3,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	LoadBalancingPolicy string           `protobuf:"bytes,4,opt,name=load_balancing_policy,json=loadBalancingPolicy,proto3" json:"load_balancing_policy,omitempty"`
	AltStatName         string           `protobuf:"bytes,5,opt,name=alt_stat_name,json=altStatName,proto3" json:"alt_stat_name,omitempty"`
	Direction           ClusterDirection `protobuf:"varint,6,opt,name=direction,proto3,enum=navigator.types.v1alpha1.ClusterDirection" json:"direction,omitempty"`
	Port                uint32           `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	Subset              string           `protobuf:"bytes,8,opt,name=subset,proto3" json:"subset,omitempty"`
	ServiceFqdn         string           `protobuf:"bytes,9,opt,name=service_fqdn,json=serviceFqdn,proto3" json:"service_fqdn,omitempty"`
	RawConfig           string           `protobuf:"bytes,10,opt,name=raw_config,json=rawConfig,proto3" json:"raw_config,omitempty"`
}

func (x *ClusterSummary) Reset() {
	*x = ClusterSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSummary) ProtoMessage() {}

func (x *ClusterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSummary.ProtoReflect.Descriptor instead.
func (*ClusterSummary) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterSummary) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterSummary) GetConnectTimeout() string {
	if x != nil {
		return x.ConnectTimeout
	}
	return ""
}

func (x *ClusterSummary) GetLoadBalancingPolicy() string {
	if x != nil {
		return x.LoadBalancingPolicy
	}
	return ""
}

func (x *ClusterSummary) GetAltStatName() string {
	if x != nil {
		return x.AltStatName
	}
	return ""
}

func (x *ClusterSummary) GetDirection() ClusterDirection {
	if x != nil {
		return x.Direction
	}
	return ClusterDirection_UNSPECIFIED
}

func (x *ClusterSummary) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClusterSummary) GetSubset() string {
	if x != nil {
		return x.Subset
	}
	return ""
}

func (x *ClusterSummary) GetServiceFqdn() string {
	if x != nil {
		return x.ServiceFqdn
	}
	return ""
}

func (x *ClusterSummary) GetRawConfig() string {
	if x != nil {
		return x.RawConfig
	}
	return ""
}

// EndpointSummary contains endpoint configuration information
type EndpointSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string           `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Endpoints   []*EndpointInfo  `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	ClusterType ClusterType      `protobuf:"varint,3,opt,name=cluster_type,json=clusterType,proto3,enum=navigator.types.v1alpha1.ClusterType" json:"cluster_type,omitempty"`
	Direction   ClusterDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=navigator.types.v1alpha1.ClusterDirection" json:"direction,omitempty"`
	Port        uint32           `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Subset      string           `protobuf:"bytes,6,opt,name=subset,proto3" json:"subset,omitempty"`
	ServiceFqdn string           `protobuf:"bytes,7,opt,name=service_fqdn,json=serviceFqdn,proto3" json:"service_fqdn,omitempty"`
}

func (x *EndpointSummary) Reset() {
	*x = EndpointSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointSummary) ProtoMessage() {}

func (x *EndpointSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointSummary.ProtoReflect.Descriptor instead.
func (*EndpointSummary) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{9}
}

func (x *EndpointSummary) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EndpointSummary) GetEndpoints() []*EndpointInfo {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *EndpointSummary) GetClusterType() ClusterType {
	if x != nil {
		return x.ClusterType
	}
	return ClusterType_UNKNOWN_CLUSTER_TYPE
}

func (x *EndpointSummary) GetDirection() ClusterDirection {
	if x != nil {
		return x.Direction
	}
	return ClusterDirection_UNSPECIFIED
}

func (x *EndpointSummary) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EndpointSummary) GetSubset() string {
	if x != nil {
		return x.Subset
	}
	return ""
}

func (x *EndpointSummary) GetServiceFqdn() string {
	if x != nil {
		return x.ServiceFqdn
	}
	return ""
}

// EndpointInfo contains individual endpoint information
type EndpointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address             string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port                uint32            `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Health              string            `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	Weight              uint32            `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Priority            uint32            `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	HostIdentifier      string            `protobuf:"bytes,6,opt,name=host_identifier,json=hostIdentifier,proto3" json:"host_identifier,omitempty"`
	Metadata            map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LoadBalancingWeight uint32            `protobuf:"varint,8,opt,name=load_balancing_weight,json=loadBalancingWeight,proto3" json:"load_balancing_weight,omitempty"`
}

func (x *EndpointInfo) Reset() {
	*x = EndpointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointInfo) ProtoMessage() {}

func (x *EndpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointInfo.ProtoReflect.Descriptor instead.
func (*EndpointInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{10}
}

func (x *EndpointInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EndpointInfo) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EndpointInfo) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *EndpointInfo) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *EndpointInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *EndpointInfo) GetHostIdentifier() string {
	if x != nil {
		return x.HostIdentifier
	}
	return ""
}

func (x *EndpointInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EndpointInfo) GetLoadBalancingWeight() uint32 {
	if x != nil {
		return x.LoadBalancingWeight
	}
	return 0
}

// RouteConfigSummary contains route configuration summary
type RouteConfigSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VirtualHosts        []*VirtualHostInfo `protobuf:"bytes,2,rep,name=virtual_hosts,json=virtualHosts,proto3" json:"virtual_hosts,omitempty"`
	InternalOnlyHeaders []string           `protobuf:"bytes,3,rep,name=internal_only_headers,json=internalOnlyHeaders,proto3" json:"internal_only_headers,omitempty"`
	ValidateClusters    bool               `protobuf:"varint,4,opt,name=validate_clusters,json=validateClusters,proto3" json:"validate_clusters,omitempty"`
	RawConfig           string             `protobuf:"bytes,5,opt,name=raw_config,json=rawConfig,proto3" json:"raw_config,omitempty"`
	Type                RouteType          `protobuf:"varint,6,opt,name=type,proto3,enum=navigator.types.v1alpha1.RouteType" json:"type,omitempty"`
}

func (x *RouteConfigSummary) Reset() {
	*x = RouteConfigSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteConfigSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConfigSummary) ProtoMessage() {}

func (x *RouteConfigSummary) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConfigSummary.ProtoReflect.Descriptor instead.
func (*RouteConfigSummary) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{11}
}

func (x *RouteConfigSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteConfigSummary) GetVirtualHosts() []*VirtualHostInfo {
	if x != nil {
		return x.VirtualHosts
	}
	return nil
}

func (x *RouteConfigSummary) GetInternalOnlyHeaders() []string {
	if x != nil {
		return x.InternalOnlyHeaders
	}
	return nil
}

func (x *RouteConfigSummary) GetValidateClusters() bool {
	if x != nil {
		return x.ValidateClusters
	}
	return false
}

func (x *RouteConfigSummary) GetRawConfig() string {
	if x != nil {
		return x.RawConfig
	}
	return ""
}

func (x *RouteConfigSummary) GetType() RouteType {
	if x != nil {
		return x.Type
	}
	return RouteType_PORT_BASED
}

// VirtualHostInfo contains virtual host information
type VirtualHostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domains []string     `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	Routes  []*RouteInfo `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *VirtualHostInfo) Reset() {
	*x = VirtualHostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualHostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualHostInfo) ProtoMessage() {}

func (x *VirtualHostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualHostInfo.ProtoReflect.Descriptor instead.
func (*VirtualHostInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{12}
}

func (x *VirtualHostInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualHostInfo) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *VirtualHostInfo) GetRoutes() []*RouteInfo {
	if x != nil {
		return x.Routes
	}
	return nil
}

// RouteInfo contains route information
type RouteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Match  *RouteMatchInfo  `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
	Action *RouteActionInfo `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *RouteInfo) Reset() {
	*x = RouteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInfo) ProtoMessage() {}

func (x *RouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInfo.ProtoReflect.Descriptor instead.
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{13}
}

func (x *RouteInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteInfo) GetMatch() *RouteMatchInfo {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *RouteInfo) GetAction() *RouteActionInfo {
	if x != nil {
		return x.Action
	}
	return nil
}

// RouteMatchInfo contains route matching information
type RouteMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathSpecifier string `protobuf:"bytes,1,opt,name=path_specifier,json=pathSpecifier,proto3" json:"path_specifier,omitempty"`
	Path          string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	CaseSensitive bool   `protobuf:"varint,3,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
}

func (x *RouteMatchInfo) Reset() {
	*x = RouteMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatchInfo) ProtoMessage() {}

func (x *RouteMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatchInfo.ProtoReflect.Descriptor instead.
func (*RouteMatchInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{14}
}

func (x *RouteMatchInfo) GetPathSpecifier() string {
	if x != nil {
		return x.PathSpecifier
	}
	return ""
}

func (x *RouteMatchInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RouteMatchInfo) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

// RouteActionInfo contains route action information
type RouteActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType       string                 `protobuf:"bytes,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Cluster          string                 `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	WeightedClusters []*WeightedClusterInfo `protobuf:"bytes,3,rep,name=weighted_clusters,json=weightedClusters,proto3" json:"weighted_clusters,omitempty"`
	Timeout          string                 `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *RouteActionInfo) Reset() {
	*x = RouteActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteActionInfo) ProtoMessage() {}

func (x *RouteActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteActionInfo.ProtoReflect.Descriptor instead.
func (*RouteActionInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{15}
}

func (x *RouteActionInfo) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *RouteActionInfo) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *RouteActionInfo) GetWeightedClusters() []*WeightedClusterInfo {
	if x != nil {
		return x.WeightedClusters
	}
	return nil
}

func (x *RouteActionInfo) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

// WeightedClusterInfo contains weighted cluster information
type WeightedClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Weight        uint32            `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	MetadataMatch map[string]string `protobuf:"bytes,3,rep,name=metadata_match,json=metadataMatch,proto3" json:"metadata_match,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WeightedClusterInfo) Reset() {
	*x = WeightedClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedClusterInfo) ProtoMessage() {}

func (x *WeightedClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_proxy_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedClusterInfo.ProtoReflect.Descriptor instead.
func (*WeightedClusterInfo) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_proxy_types_proto_rawDescGZIP(), []int{16}
}

func (x *WeightedClusterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeightedClusterInfo) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WeightedClusterInfo) GetMetadataMatch() map[string]string {
	if x != nil {
		return x.MetadataMatch
	}
	return nil
}

var File_types_v1alpha1_proxy_types_proto protoreflect.FileDescriptor

var file_types_v1alpha1_proxy_types_proto_rawDesc = []byte{
	0x0a, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0xb7, 0x03, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x48,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x44, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x65, 0x0a, 0x18, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x22, 0xcd, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x89,
	0x04, 0x0a, 0x11, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x49, 0x0a, 0x0a, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x64, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x49, 0x0a, 0x0a, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x73,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x64, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x70, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x69, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x48, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xf1, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xdd, 0x02, 0x0a, 0x0f, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x48, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x71, 0x64, 0x6e, 0x22, 0xf4, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb1, 0x02, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x11, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xec, 0x01, 0x0a, 0x13, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x67, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x40, 0x0a, 0x12,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x49,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xbf, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x58, 0x44, 0x53, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x08, 0x2a, 0x3d, 0x0a, 0x09, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x97, 0x01, 0x0a, 0x0b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x45, 0x44, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x44, 0x4e, 0x53, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x44,
	0x53, 0x54, 0x10, 0x05, 0x2a, 0x3e, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x61, 0x6d, 0x61, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2f, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_v1alpha1_proxy_types_proto_rawDescOnce sync.Once
	file_types_v1alpha1_proxy_types_proto_rawDescData = file_types_v1alpha1_proxy_types_proto_rawDesc
)

func file_types_v1alpha1_proxy_types_proto_rawDescGZIP() []byte {
	file_types_v1alpha1_proxy_types_proto_rawDescOnce.Do(func() {
		file_types_v1alpha1_proxy_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_v1alpha1_proxy_types_proto_rawDescData)
	})
	return file_types_v1alpha1_proxy_types_proto_rawDescData
}

var file_types_v1alpha1_proxy_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_types_v1alpha1_proxy_types_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_types_v1alpha1_proxy_types_proto_goTypes = []any{
	(ProxyMode)(0),              // 0: navigator.types.v1alpha1.ProxyMode
	(ListenerType)(0),           // 1: navigator.types.v1alpha1.ListenerType
	(RouteType)(0),              // 2: navigator.types.v1alpha1.RouteType
	(ClusterType)(0),            // 3: navigator.types.v1alpha1.ClusterType
	(ClusterDirection)(0),       // 4: navigator.types.v1alpha1.ClusterDirection
	(*ProxyConfig)(nil),         // 5: navigator.types.v1alpha1.ProxyConfig
	(*BootstrapSummary)(nil),    // 6: navigator.types.v1alpha1.BootstrapSummary
	(*NodeSummary)(nil),         // 7: navigator.types.v1alpha1.NodeSummary
	(*LocalityInfo)(nil),        // 8: navigator.types.v1alpha1.LocalityInfo
	(*DynamicConfigInfo)(nil),   // 9: navigator.types.v1alpha1.DynamicConfigInfo
	(*ConfigSourceInfo)(nil),    // 10: navigator.types.v1alpha1.ConfigSourceInfo
	(*ClusterManagerInfo)(nil),  // 11: navigator.types.v1alpha1.ClusterManagerInfo
	(*ListenerSummary)(nil),     // 12: navigator.types.v1alpha1.ListenerSummary
	(*ClusterSummary)(nil),      // 13: navigator.types.v1alpha1.ClusterSummary
	(*EndpointSummary)(nil),     // 14: navigator.types.v1alpha1.EndpointSummary
	(*EndpointInfo)(nil),        // 15: navigator.types.v1alpha1.EndpointInfo
	(*RouteConfigSummary)(nil),  // 16: navigator.types.v1alpha1.RouteConfigSummary
	(*VirtualHostInfo)(nil),     // 17: navigator.types.v1alpha1.VirtualHostInfo
	(*RouteInfo)(nil),           // 18: navigator.types.v1alpha1.RouteInfo
	(*RouteMatchInfo)(nil),      // 19: navigator.types.v1alpha1.RouteMatchInfo
	(*RouteActionInfo)(nil),     // 20: navigator.types.v1alpha1.RouteActionInfo
	(*WeightedClusterInfo)(nil), // 21: navigator.types.v1alpha1.WeightedClusterInfo
	nil,                         // 22: navigator.types.v1alpha1.NodeSummary.MetadataEntry
	nil,                         // 23: navigator.types.v1alpha1.EndpointInfo.MetadataEntry
	nil,                         // 24: navigator.types.v1alpha1.WeightedClusterInfo.MetadataMatchEntry
}
var file_types_v1alpha1_proxy_types_proto_depIdxs = []int32{
	6,  // 0: navigator.types.v1alpha1.ProxyConfig.bootstrap:type_name -> navigator.types.v1alpha1.BootstrapSummary
	12, // 1: navigator.types.v1alpha1.ProxyConfig.listeners:type_name -> navigator.types.v1alpha1.ListenerSummary
	13, // 2: navigator.types.v1alpha1.ProxyConfig.clusters:type_name -> navigator.types.v1alpha1.ClusterSummary
	14, // 3: navigator.types.v1alpha1.ProxyConfig.endpoints:type_name -> navigator.types.v1alpha1.EndpointSummary
	16, // 4: navigator.types.v1alpha1.ProxyConfig.routes:type_name -> navigator.types.v1alpha1.RouteConfigSummary
	7,  // 5: navigator.types.v1alpha1.BootstrapSummary.node:type_name -> navigator.types.v1alpha1.NodeSummary
	9,  // 6: navigator.types.v1alpha1.BootstrapSummary.dynamic_resources_config:type_name -> navigator.types.v1alpha1.DynamicConfigInfo
	11, // 7: navigator.types.v1alpha1.BootstrapSummary.cluster_manager:type_name -> navigator.types.v1alpha1.ClusterManagerInfo
	22, // 8: navigator.types.v1alpha1.NodeSummary.metadata:type_name -> navigator.types.v1alpha1.NodeSummary.MetadataEntry
	8,  // 9: navigator.types.v1alpha1.NodeSummary.locality:type_name -> navigator.types.v1alpha1.LocalityInfo
	0,  // 10: navigator.types.v1alpha1.NodeSummary.proxy_mode:type_name -> navigator.types.v1alpha1.ProxyMode
	10, // 11: navigator.types.v1alpha1.DynamicConfigInfo.ads_config:type_name -> navigator.types.v1alpha1.ConfigSourceInfo
	10, // 12: navigator.types.v1alpha1.DynamicConfigInfo.lds_config:type_name -> navigator.types.v1alpha1.ConfigSourceInfo
	10, // 13: navigator.types.v1alpha1.DynamicConfigInfo.cds_config:type_name -> navigator.types.v1alpha1.ConfigSourceInfo
	10, // 14: navigator.types.v1alpha1.DynamicConfigInfo.eds_config:type_name -> navigator.types.v1alpha1.ConfigSourceInfo
	10, // 15: navigator.types.v1alpha1.DynamicConfigInfo.rds_config:type_name -> navigator.types.v1alpha1.ConfigSourceInfo
	10, // 16: navigator.types.v1alpha1.DynamicConfigInfo.sds_config:type_name -> navigator.types.v1alpha1.ConfigSourceInfo
	1,  // 17: navigator.types.v1alpha1.ListenerSummary.type:type_name -> navigator.types.v1alpha1.ListenerType
	4,  // 18: navigator.types.v1alpha1.ClusterSummary.direction:type_name -> navigator.types.v1alpha1.ClusterDirection
	15, // 19: navigator.types.v1alpha1.EndpointSummary.endpoints:type_name -> navigator.types.v1alpha1.EndpointInfo
	3,  // 20: navigator.types.v1alpha1.EndpointSummary.cluster_type:type_name -> navigator.types.v1alpha1.ClusterType
	4,  // 21: navigator.types.v1alpha1.EndpointSummary.direction:type_name -> navigator.types.v1alpha1.ClusterDirection
	23, // 22: navigator.types.v1alpha1.EndpointInfo.metadata:type_name -> navigator.types.v1alpha1.EndpointInfo.MetadataEntry
	17, // 23: navigator.types.v1alpha1.RouteConfigSummary.virtual_hosts:type_name -> navigator.types.v1alpha1.VirtualHostInfo
	2,  // 24: navigator.types.v1alpha1.RouteConfigSummary.type:type_name -> navigator.types.v1alpha1.RouteType
	18, // 25: navigator.types.v1alpha1.VirtualHostInfo.routes:type_name -> navigator.types.v1alpha1.RouteInfo
	19, // 26: navigator.types.v1alpha1.RouteInfo.match:type_name -> navigator.types.v1alpha1.RouteMatchInfo
	20, // 27: navigator.types.v1alpha1.RouteInfo.action:type_name -> navigator.types.v1alpha1.RouteActionInfo
	21, // 28: navigator.types.v1alpha1.RouteActionInfo.weighted_clusters:type_name -> navigator.types.v1alpha1.WeightedClusterInfo
	24, // 29: navigator.types.v1alpha1.WeightedClusterInfo.metadata_match:type_name -> navigator.types.v1alpha1.WeightedClusterInfo.MetadataMatchEntry
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_types_v1alpha1_proxy_types_proto_init() }
func file_types_v1alpha1_proxy_types_proto_init() {
	if File_types_v1alpha1_proxy_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_v1alpha1_proxy_types_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BootstrapSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NodeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LocalityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigSourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterManagerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListenerSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*EndpointSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*EndpointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RouteConfigSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*VirtualHostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RouteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RouteMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RouteActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_proxy_types_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*WeightedClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_v1alpha1_proxy_types_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_v1alpha1_proxy_types_proto_goTypes,
		DependencyIndexes: file_types_v1alpha1_proxy_types_proto_depIdxs,
		EnumInfos:         file_types_v1alpha1_proxy_types_proto_enumTypes,
		MessageInfos:      file_types_v1alpha1_proxy_types_proto_msgTypes,
	}.Build()
	File_types_v1alpha1_proxy_types_proto = out.File
	file_types_v1alpha1_proxy_types_proto_rawDesc = nil
	file_types_v1alpha1_proxy_types_proto_goTypes = nil
	file_types_v1alpha1_proxy_types_proto_depIdxs = nil
}

// Copyright 2025 Navigator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: types/v1alpha1/istio_resources.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DestinationRule represents an Istio DestinationRule resource.
type DestinationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the destination rule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace of the destination rule.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// raw_spec is the destination rule spec as a JSON string.
	RawSpec string `protobuf:"bytes,3,opt,name=raw_spec,json=rawSpec,proto3" json:"raw_spec,omitempty"`
	// host is the name of a service from the service registry.
	Host string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	// subsets is the list of named subsets for traffic routing.
	Subsets []*DestinationRuleSubset `protobuf:"bytes,5,rep,name=subsets,proto3" json:"subsets,omitempty"`
	// export_to controls the visibility of this destination rule to other namespaces.
	ExportTo []string `protobuf:"bytes,6,rep,name=export_to,json=exportTo,proto3" json:"export_to,omitempty"`
	// workload_selector is the criteria used to select the specific set of pods/VMs.
	WorkloadSelector *WorkloadSelector `protobuf:"bytes,7,opt,name=workload_selector,json=workloadSelector,proto3" json:"workload_selector,omitempty"`
}

func (x *DestinationRule) Reset() {
	*x = DestinationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationRule) ProtoMessage() {}

func (x *DestinationRule) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationRule.ProtoReflect.Descriptor instead.
func (*DestinationRule) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{0}
}

func (x *DestinationRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DestinationRule) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DestinationRule) GetRawSpec() string {
	if x != nil {
		return x.RawSpec
	}
	return ""
}

func (x *DestinationRule) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DestinationRule) GetSubsets() []*DestinationRuleSubset {
	if x != nil {
		return x.Subsets
	}
	return nil
}

func (x *DestinationRule) GetExportTo() []string {
	if x != nil {
		return x.ExportTo
	}
	return nil
}

func (x *DestinationRule) GetWorkloadSelector() *WorkloadSelector {
	if x != nil {
		return x.WorkloadSelector
	}
	return nil
}

// DestinationRuleSubset represents a named subset for destination rule traffic routing.
type DestinationRuleSubset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the subset.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// labels are the key-value pairs that define the subset.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DestinationRuleSubset) Reset() {
	*x = DestinationRuleSubset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationRuleSubset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationRuleSubset) ProtoMessage() {}

func (x *DestinationRuleSubset) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationRuleSubset.ProtoReflect.Descriptor instead.
func (*DestinationRuleSubset) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{1}
}

func (x *DestinationRuleSubset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DestinationRuleSubset) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// WorkloadSelector represents the workload selector criteria used across Istio resources.
type WorkloadSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// match_labels are the labels used to select pods/VMs.
	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkloadSelector) Reset() {
	*x = WorkloadSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSelector) ProtoMessage() {}

func (x *WorkloadSelector) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSelector.ProtoReflect.Descriptor instead.
func (*WorkloadSelector) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{2}
}

func (x *WorkloadSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

// PolicyTargetReference represents a reference to a specific resource based on Istio's PolicyTargetReference.
type PolicyTargetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group specifies the group of the target resource.
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// kind indicates the kind of target resource (required).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// name provides the name of the target resource (required).
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// namespace defines the namespace of the referenced resource.
	// When unspecified, the local namespace is inferred.
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *PolicyTargetReference) Reset() {
	*x = PolicyTargetReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyTargetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTargetReference) ProtoMessage() {}

func (x *PolicyTargetReference) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTargetReference.ProtoReflect.Descriptor instead.
func (*PolicyTargetReference) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{3}
}

func (x *PolicyTargetReference) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *PolicyTargetReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PolicyTargetReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyTargetReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// EnvoyFilter represents an Istio EnvoyFilter resource.
type EnvoyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the envoy filter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace of the envoy filter.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// raw_spec is the envoy filter spec as a JSON string.
	RawSpec string `protobuf:"bytes,3,opt,name=raw_spec,json=rawSpec,proto3" json:"raw_spec,omitempty"`
	// workload_selector is the criteria used to select the specific set of pods/VMs.
	WorkloadSelector *WorkloadSelector `protobuf:"bytes,4,opt,name=workload_selector,json=workloadSelector,proto3" json:"workload_selector,omitempty"`
	// target_refs is the list of resources that this envoy filter applies to.
	TargetRefs []*PolicyTargetReference `protobuf:"bytes,5,rep,name=target_refs,json=targetRefs,proto3" json:"target_refs,omitempty"`
}

func (x *EnvoyFilter) Reset() {
	*x = EnvoyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvoyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyFilter) ProtoMessage() {}

func (x *EnvoyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyFilter.ProtoReflect.Descriptor instead.
func (*EnvoyFilter) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{4}
}

func (x *EnvoyFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvoyFilter) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EnvoyFilter) GetRawSpec() string {
	if x != nil {
		return x.RawSpec
	}
	return ""
}

func (x *EnvoyFilter) GetWorkloadSelector() *WorkloadSelector {
	if x != nil {
		return x.WorkloadSelector
	}
	return nil
}

func (x *EnvoyFilter) GetTargetRefs() []*PolicyTargetReference {
	if x != nil {
		return x.TargetRefs
	}
	return nil
}

// Gateway represents an Istio Gateway resource.
type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the gateway.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace of the gateway.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// raw_spec is the gateway spec as a JSON string.
	RawSpec string `protobuf:"bytes,3,opt,name=raw_spec,json=rawSpec,proto3" json:"raw_spec,omitempty"`
	// selector is the workload selector for the gateway.
	Selector map[string]string `protobuf:"bytes,4,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{5}
}

func (x *Gateway) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gateway) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Gateway) GetRawSpec() string {
	if x != nil {
		return x.RawSpec
	}
	return ""
}

func (x *Gateway) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

// Sidecar represents an Istio Sidecar resource.
type Sidecar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the sidecar.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace of the sidecar.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// raw_spec is the sidecar spec as a JSON string.
	RawSpec string `protobuf:"bytes,3,opt,name=raw_spec,json=rawSpec,proto3" json:"raw_spec,omitempty"`
	// workload_selector is the criteria used to select the specific set of pods/VMs.
	WorkloadSelector *WorkloadSelector `protobuf:"bytes,4,opt,name=workload_selector,json=workloadSelector,proto3" json:"workload_selector,omitempty"`
}

func (x *Sidecar) Reset() {
	*x = Sidecar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sidecar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sidecar) ProtoMessage() {}

func (x *Sidecar) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sidecar.ProtoReflect.Descriptor instead.
func (*Sidecar) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{6}
}

func (x *Sidecar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sidecar) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Sidecar) GetRawSpec() string {
	if x != nil {
		return x.RawSpec
	}
	return ""
}

func (x *Sidecar) GetWorkloadSelector() *WorkloadSelector {
	if x != nil {
		return x.WorkloadSelector
	}
	return nil
}

// VirtualService represents an Istio VirtualService resource.
type VirtualService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the virtual service.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace of the virtual service.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// raw_spec is the virtual service spec as a JSON string.
	RawSpec string `protobuf:"bytes,3,opt,name=raw_spec,json=rawSpec,proto3" json:"raw_spec,omitempty"`
	// hosts is the list of destination hosts that these routing rules apply to.
	Hosts []string `protobuf:"bytes,4,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// gateways is the list of gateway names that should apply these routes.
	Gateways []string `protobuf:"bytes,5,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// export_to controls the visibility of this virtual service to other namespaces.
	ExportTo []string `protobuf:"bytes,6,rep,name=export_to,json=exportTo,proto3" json:"export_to,omitempty"`
}

func (x *VirtualService) Reset() {
	*x = VirtualService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualService) ProtoMessage() {}

func (x *VirtualService) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualService.ProtoReflect.Descriptor instead.
func (*VirtualService) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{7}
}

func (x *VirtualService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VirtualService) GetRawSpec() string {
	if x != nil {
		return x.RawSpec
	}
	return ""
}

func (x *VirtualService) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *VirtualService) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *VirtualService) GetExportTo() []string {
	if x != nil {
		return x.ExportTo
	}
	return nil
}

// RequestAuthentication represents an Istio RequestAuthentication resource.
type RequestAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the request authentication.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace of the request authentication.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// raw_spec is the request authentication spec as a JSON string.
	RawSpec string `protobuf:"bytes,3,opt,name=raw_spec,json=rawSpec,proto3" json:"raw_spec,omitempty"`
	// selector is the criteria used to select the specific set of pods/VMs.
	Selector *WorkloadSelector `protobuf:"bytes,4,opt,name=selector,proto3" json:"selector,omitempty"`
	// target_refs is the list of resources that this request authentication applies to.
	TargetRefs []*PolicyTargetReference `protobuf:"bytes,5,rep,name=target_refs,json=targetRefs,proto3" json:"target_refs,omitempty"`
}

func (x *RequestAuthentication) Reset() {
	*x = RequestAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAuthentication) ProtoMessage() {}

func (x *RequestAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAuthentication.ProtoReflect.Descriptor instead.
func (*RequestAuthentication) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{8}
}

func (x *RequestAuthentication) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestAuthentication) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RequestAuthentication) GetRawSpec() string {
	if x != nil {
		return x.RawSpec
	}
	return ""
}

func (x *RequestAuthentication) GetSelector() *WorkloadSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *RequestAuthentication) GetTargetRefs() []*PolicyTargetReference {
	if x != nil {
		return x.TargetRefs
	}
	return nil
}

// IstioControlPlaneConfig represents configuration from the Istio control plane.
type IstioControlPlaneConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pilot_scope_gateway_to_namespace indicates whether gateway selector scope is restricted to namespace.
	// When true, gateway selectors only match workloads in the same namespace as the gateway.
	// When false (default), gateway selectors match workloads across all namespaces.
	PilotScopeGatewayToNamespace bool `protobuf:"varint,1,opt,name=pilot_scope_gateway_to_namespace,json=pilotScopeGatewayToNamespace,proto3" json:"pilot_scope_gateway_to_namespace,omitempty"`
	// root_namespace is the namespace where the Istio control plane is installed.
	// This is typically "istio-system" but can be customized in multi-cluster or external control plane deployments.
	// Resources in the root namespace have special behavior (e.g., EnvoyFilters apply globally).
	RootNamespace string `protobuf:"bytes,2,opt,name=root_namespace,json=rootNamespace,proto3" json:"root_namespace,omitempty"`
}

func (x *IstioControlPlaneConfig) Reset() {
	*x = IstioControlPlaneConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioControlPlaneConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioControlPlaneConfig) ProtoMessage() {}

func (x *IstioControlPlaneConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1alpha1_istio_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioControlPlaneConfig.ProtoReflect.Descriptor instead.
func (*IstioControlPlaneConfig) Descriptor() ([]byte, []int) {
	return file_types_v1alpha1_istio_resources_proto_rawDescGZIP(), []int{9}
}

func (x *IstioControlPlaneConfig) GetPilotScopeGatewayToNamespace() bool {
	if x != nil {
		return x.PilotScopeGatewayToNamespace
	}
	return false
}

func (x *IstioControlPlaneConfig) GetRootNamespace() string {
	if x != nil {
		return x.RootNamespace
	}
	return ""
}

var File_types_v1alpha1_istio_resources_proto protoreflect.FileDescriptor

var file_types_v1alpha1_istio_resources_proto_rawDesc = []byte{
	0x0a, 0x24, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x22, 0xb3, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x12, 0x57, 0x0a,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x15, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x85,
	0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x4b, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x3b, 0x0a, 0x0d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x07, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x57, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x0e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x17,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x74,
	0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x61, 0x6d, 0x61, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2f,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_v1alpha1_istio_resources_proto_rawDescOnce sync.Once
	file_types_v1alpha1_istio_resources_proto_rawDescData = file_types_v1alpha1_istio_resources_proto_rawDesc
)

func file_types_v1alpha1_istio_resources_proto_rawDescGZIP() []byte {
	file_types_v1alpha1_istio_resources_proto_rawDescOnce.Do(func() {
		file_types_v1alpha1_istio_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_v1alpha1_istio_resources_proto_rawDescData)
	})
	return file_types_v1alpha1_istio_resources_proto_rawDescData
}

var file_types_v1alpha1_istio_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_types_v1alpha1_istio_resources_proto_goTypes = []any{
	(*DestinationRule)(nil),         // 0: navigator.types.v1alpha1.DestinationRule
	(*DestinationRuleSubset)(nil),   // 1: navigator.types.v1alpha1.DestinationRuleSubset
	(*WorkloadSelector)(nil),        // 2: navigator.types.v1alpha1.WorkloadSelector
	(*PolicyTargetReference)(nil),   // 3: navigator.types.v1alpha1.PolicyTargetReference
	(*EnvoyFilter)(nil),             // 4: navigator.types.v1alpha1.EnvoyFilter
	(*Gateway)(nil),                 // 5: navigator.types.v1alpha1.Gateway
	(*Sidecar)(nil),                 // 6: navigator.types.v1alpha1.Sidecar
	(*VirtualService)(nil),          // 7: navigator.types.v1alpha1.VirtualService
	(*RequestAuthentication)(nil),   // 8: navigator.types.v1alpha1.RequestAuthentication
	(*IstioControlPlaneConfig)(nil), // 9: navigator.types.v1alpha1.IstioControlPlaneConfig
	nil,                             // 10: navigator.types.v1alpha1.DestinationRuleSubset.LabelsEntry
	nil,                             // 11: navigator.types.v1alpha1.WorkloadSelector.MatchLabelsEntry
	nil,                             // 12: navigator.types.v1alpha1.Gateway.SelectorEntry
}
var file_types_v1alpha1_istio_resources_proto_depIdxs = []int32{
	1,  // 0: navigator.types.v1alpha1.DestinationRule.subsets:type_name -> navigator.types.v1alpha1.DestinationRuleSubset
	2,  // 1: navigator.types.v1alpha1.DestinationRule.workload_selector:type_name -> navigator.types.v1alpha1.WorkloadSelector
	10, // 2: navigator.types.v1alpha1.DestinationRuleSubset.labels:type_name -> navigator.types.v1alpha1.DestinationRuleSubset.LabelsEntry
	11, // 3: navigator.types.v1alpha1.WorkloadSelector.match_labels:type_name -> navigator.types.v1alpha1.WorkloadSelector.MatchLabelsEntry
	2,  // 4: navigator.types.v1alpha1.EnvoyFilter.workload_selector:type_name -> navigator.types.v1alpha1.WorkloadSelector
	3,  // 5: navigator.types.v1alpha1.EnvoyFilter.target_refs:type_name -> navigator.types.v1alpha1.PolicyTargetReference
	12, // 6: navigator.types.v1alpha1.Gateway.selector:type_name -> navigator.types.v1alpha1.Gateway.SelectorEntry
	2,  // 7: navigator.types.v1alpha1.Sidecar.workload_selector:type_name -> navigator.types.v1alpha1.WorkloadSelector
	2,  // 8: navigator.types.v1alpha1.RequestAuthentication.selector:type_name -> navigator.types.v1alpha1.WorkloadSelector
	3,  // 9: navigator.types.v1alpha1.RequestAuthentication.target_refs:type_name -> navigator.types.v1alpha1.PolicyTargetReference
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_types_v1alpha1_istio_resources_proto_init() }
func file_types_v1alpha1_istio_resources_proto_init() {
	if File_types_v1alpha1_istio_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_v1alpha1_istio_resources_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DestinationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DestinationRuleSubset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*WorkloadSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyTargetReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*EnvoyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Sidecar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*VirtualService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RequestAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_v1alpha1_istio_resources_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*IstioControlPlaneConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_v1alpha1_istio_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_v1alpha1_istio_resources_proto_goTypes,
		DependencyIndexes: file_types_v1alpha1_istio_resources_proto_depIdxs,
		MessageInfos:      file_types_v1alpha1_istio_resources_proto_msgTypes,
	}.Build()
	File_types_v1alpha1_istio_resources_proto = out.File
	file_types_v1alpha1_istio_resources_proto_rawDesc = nil
	file_types_v1alpha1_istio_resources_proto_goTypes = nil
	file_types_v1alpha1_istio_resources_proto_depIdxs = nil
}

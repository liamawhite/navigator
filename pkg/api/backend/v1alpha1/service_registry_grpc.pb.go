// Copyright 2025 Navigator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: backend/v1alpha1/service_registry.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceRegistryService_ListServices_FullMethodName       = "/navigator.backend.v1alpha1.ServiceRegistryService/ListServices"
	ServiceRegistryService_GetService_FullMethodName         = "/navigator.backend.v1alpha1.ServiceRegistryService/GetService"
	ServiceRegistryService_GetServiceInstance_FullMethodName = "/navigator.backend.v1alpha1.ServiceRegistryService/GetServiceInstance"
)

// ServiceRegistryServiceClient is the client API for ServiceRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceRegistryServiceClient interface {
	// ListServices returns all services in the specified namespace, or all namespaces if not specified.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// GetService returns detailed information about a specific service.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	// GetServiceInstance returns detailed information about a specific service instance.
	GetServiceInstance(ctx context.Context, in *GetServiceInstanceRequest, opts ...grpc.CallOption) (*GetServiceInstanceResponse, error)
}

type serviceRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRegistryServiceClient(cc grpc.ClientConnInterface) ServiceRegistryServiceClient {
	return &serviceRegistryServiceClient{cc}
}

func (c *serviceRegistryServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, ServiceRegistryService_ListServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryServiceClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, ServiceRegistryService_GetService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryServiceClient) GetServiceInstance(ctx context.Context, in *GetServiceInstanceRequest, opts ...grpc.CallOption) (*GetServiceInstanceResponse, error) {
	out := new(GetServiceInstanceResponse)
	err := c.cc.Invoke(ctx, ServiceRegistryService_GetServiceInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRegistryServiceServer is the server API for ServiceRegistryService service.
// All implementations must embed UnimplementedServiceRegistryServiceServer
// for forward compatibility
type ServiceRegistryServiceServer interface {
	// ListServices returns all services in the specified namespace, or all namespaces if not specified.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// GetService returns detailed information about a specific service.
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	// GetServiceInstance returns detailed information about a specific service instance.
	GetServiceInstance(context.Context, *GetServiceInstanceRequest) (*GetServiceInstanceResponse, error)
	mustEmbedUnimplementedServiceRegistryServiceServer()
}

// UnimplementedServiceRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceRegistryServiceServer struct {
}

func (UnimplementedServiceRegistryServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedServiceRegistryServiceServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedServiceRegistryServiceServer) GetServiceInstance(context.Context, *GetServiceInstanceRequest) (*GetServiceInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInstance not implemented")
}
func (UnimplementedServiceRegistryServiceServer) mustEmbedUnimplementedServiceRegistryServiceServer() {
}

// UnsafeServiceRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRegistryServiceServer will
// result in compilation errors.
type UnsafeServiceRegistryServiceServer interface {
	mustEmbedUnimplementedServiceRegistryServiceServer()
}

func RegisterServiceRegistryServiceServer(s grpc.ServiceRegistrar, srv ServiceRegistryServiceServer) {
	s.RegisterService(&ServiceRegistryService_ServiceDesc, srv)
}

func _ServiceRegistryService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistryService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistryService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistryService_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServiceServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistryService_GetServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServiceServer).GetServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistryService_GetServiceInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServiceServer).GetServiceInstance(ctx, req.(*GetServiceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceRegistryService_ServiceDesc is the grpc.ServiceDesc for ServiceRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "navigator.backend.v1alpha1.ServiceRegistryService",
	HandlerType: (*ServiceRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _ServiceRegistryService_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ServiceRegistryService_GetService_Handler,
		},
		{
			MethodName: "GetServiceInstance",
			Handler:    _ServiceRegistryService_GetServiceInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/v1alpha1/service_registry.proto",
}

// Copyright 2025 Navigator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: backend/v1alpha1/envoy_summary.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProxyMode indicates the type of proxy (extracted from node ID)
type ProxyMode int32

const (
	// UNKNOWN_PROXY_MODE indicates an unknown or unspecified proxy mode
	ProxyMode_UNKNOWN_PROXY_MODE ProxyMode = 0
	// SIDECAR indicates a sidecar proxy (most common in Istio)
	ProxyMode_SIDECAR ProxyMode = 1
	// GATEWAY indicates a gateway proxy (ingress/egress gateways)
	ProxyMode_GATEWAY ProxyMode = 2
	// ROUTER indicates a router proxy
	ProxyMode_ROUTER ProxyMode = 3
)

// Enum value maps for ProxyMode.
var (
	ProxyMode_name = map[int32]string{
		0: "UNKNOWN_PROXY_MODE",
		1: "SIDECAR",
		2: "GATEWAY",
		3: "ROUTER",
	}
	ProxyMode_value = map[string]int32{
		"UNKNOWN_PROXY_MODE": 0,
		"SIDECAR":            1,
		"GATEWAY":            2,
		"ROUTER":             3,
	}
)

func (x ProxyMode) Enum() *ProxyMode {
	p := new(ProxyMode)
	*p = x
	return p
}

func (x ProxyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_v1alpha1_envoy_summary_proto_enumTypes[0].Descriptor()
}

func (ProxyMode) Type() protoreflect.EnumType {
	return &file_backend_v1alpha1_envoy_summary_proto_enumTypes[0]
}

func (x ProxyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProxyMode.Descriptor instead.
func (ProxyMode) EnumDescriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{0}
}

// ListenerType indicates the type/direction of a listener
type ListenerType int32

const (
	// VIRTUAL_INBOUND listeners are virtual inbound listeners (typically 0.0.0.0 without use_original_dst)
	ListenerType_VIRTUAL_INBOUND ListenerType = 0
	// VIRTUAL_OUTBOUND listeners are virtual outbound listeners (typically 0.0.0.0 with use_original_dst)
	ListenerType_VIRTUAL_OUTBOUND ListenerType = 1
	// SERVICE_OUTBOUND listeners for specific upstream services (service.namespace.svc.cluster.local:port)
	ListenerType_SERVICE_OUTBOUND ListenerType = 2
	// PORT_OUTBOUND listeners for generic port traffic outbound (e.g., "80", "443")
	ListenerType_PORT_OUTBOUND ListenerType = 3
	// PROXY_METRICS listeners serve Prometheus metrics (typically on port 15090)
	ListenerType_PROXY_METRICS ListenerType = 4
	// PROXY_HEALTHCHECK listeners serve health check endpoints (typically on port 15021)
	ListenerType_PROXY_HEALTHCHECK ListenerType = 5
	// ADMIN_XDS listeners serve Envoy xDS configuration (typically on port 15010)
	ListenerType_ADMIN_XDS ListenerType = 6
	// ADMIN_WEBHOOK listeners serve Istio webhook endpoints (typically on port 15012)
	ListenerType_ADMIN_WEBHOOK ListenerType = 7
	// ADMIN_DEBUG listeners serve Envoy debug/admin interface (typically on port 15014)
	ListenerType_ADMIN_DEBUG ListenerType = 8
)

// Enum value maps for ListenerType.
var (
	ListenerType_name = map[int32]string{
		0: "VIRTUAL_INBOUND",
		1: "VIRTUAL_OUTBOUND",
		2: "SERVICE_OUTBOUND",
		3: "PORT_OUTBOUND",
		4: "PROXY_METRICS",
		5: "PROXY_HEALTHCHECK",
		6: "ADMIN_XDS",
		7: "ADMIN_WEBHOOK",
		8: "ADMIN_DEBUG",
	}
	ListenerType_value = map[string]int32{
		"VIRTUAL_INBOUND":   0,
		"VIRTUAL_OUTBOUND":  1,
		"SERVICE_OUTBOUND":  2,
		"PORT_OUTBOUND":     3,
		"PROXY_METRICS":     4,
		"PROXY_HEALTHCHECK": 5,
		"ADMIN_XDS":         6,
		"ADMIN_WEBHOOK":     7,
		"ADMIN_DEBUG":       8,
	}
)

func (x ListenerType) Enum() *ListenerType {
	p := new(ListenerType)
	*p = x
	return p
}

func (x ListenerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListenerType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_v1alpha1_envoy_summary_proto_enumTypes[1].Descriptor()
}

func (ListenerType) Type() protoreflect.EnumType {
	return &file_backend_v1alpha1_envoy_summary_proto_enumTypes[1]
}

func (x ListenerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListenerType.Descriptor instead.
func (ListenerType) EnumDescriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{1}
}

// RouteType indicates the type/category of a route configuration
type RouteType int32

const (
	// PORT_BASED routes are routes with just port numbers (e.g., "80", "443", "15010")
	RouteType_PORT_BASED RouteType = 0
	// SERVICE_SPECIFIC routes are routes with service hostnames and ports (e.g., "backend.demo.svc.cluster.local:8080", external domains from ServiceEntries)
	RouteType_SERVICE_SPECIFIC RouteType = 1
	// STATIC routes are Istio/Envoy internal routing patterns (e.g., "InboundPassthroughCluster", "inbound|8080||")
	RouteType_STATIC RouteType = 2
)

// Enum value maps for RouteType.
var (
	RouteType_name = map[int32]string{
		0: "PORT_BASED",
		1: "SERVICE_SPECIFIC",
		2: "STATIC",
	}
	RouteType_value = map[string]int32{
		"PORT_BASED":       0,
		"SERVICE_SPECIFIC": 1,
		"STATIC":           2,
	}
)

func (x RouteType) Enum() *RouteType {
	p := new(RouteType)
	*p = x
	return p
}

func (x RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_v1alpha1_envoy_summary_proto_enumTypes[2].Descriptor()
}

func (RouteType) Type() protoreflect.EnumType {
	return &file_backend_v1alpha1_envoy_summary_proto_enumTypes[2]
}

func (x RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteType.Descriptor instead.
func (RouteType) EnumDescriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{2}
}

// ClusterType represents the discovery type of a cluster
type ClusterType int32

const (
	// UNKNOWN_CLUSTER_TYPE indicates an unknown or unspecified cluster type
	ClusterType_UNKNOWN_CLUSTER_TYPE ClusterType = 0
	// CLUSTER_EDS indicates Endpoint Discovery Service clusters (dynamic service discovery)
	ClusterType_CLUSTER_EDS ClusterType = 1
	// CLUSTER_STATIC indicates static clusters with predefined endpoints
	ClusterType_CLUSTER_STATIC ClusterType = 2
	// CLUSTER_STRICT_DNS indicates clusters using strict DNS resolution
	ClusterType_CLUSTER_STRICT_DNS ClusterType = 3
	// CLUSTER_LOGICAL_DNS indicates clusters using logical DNS resolution
	ClusterType_CLUSTER_LOGICAL_DNS ClusterType = 4
	// CLUSTER_ORIGINAL_DST indicates clusters using original destination routing
	ClusterType_CLUSTER_ORIGINAL_DST ClusterType = 5
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "UNKNOWN_CLUSTER_TYPE",
		1: "CLUSTER_EDS",
		2: "CLUSTER_STATIC",
		3: "CLUSTER_STRICT_DNS",
		4: "CLUSTER_LOGICAL_DNS",
		5: "CLUSTER_ORIGINAL_DST",
	}
	ClusterType_value = map[string]int32{
		"UNKNOWN_CLUSTER_TYPE": 0,
		"CLUSTER_EDS":          1,
		"CLUSTER_STATIC":       2,
		"CLUSTER_STRICT_DNS":   3,
		"CLUSTER_LOGICAL_DNS":  4,
		"CLUSTER_ORIGINAL_DST": 5,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_v1alpha1_envoy_summary_proto_enumTypes[3].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_backend_v1alpha1_envoy_summary_proto_enumTypes[3]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{3}
}

// ClusterDirection represents the traffic direction for a cluster
type ClusterDirection int32

const (
	// UNSPECIFIED indicates the direction is not specified or unknown
	ClusterDirection_UNSPECIFIED ClusterDirection = 0
	// INBOUND indicates traffic flowing into the service
	ClusterDirection_INBOUND ClusterDirection = 1
	// OUTBOUND indicates traffic flowing out of the service
	ClusterDirection_OUTBOUND ClusterDirection = 2
)

// Enum value maps for ClusterDirection.
var (
	ClusterDirection_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INBOUND",
		2: "OUTBOUND",
	}
	ClusterDirection_value = map[string]int32{
		"UNSPECIFIED": 0,
		"INBOUND":     1,
		"OUTBOUND":    2,
	}
)

func (x ClusterDirection) Enum() *ClusterDirection {
	p := new(ClusterDirection)
	*p = x
	return p
}

func (x ClusterDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_v1alpha1_envoy_summary_proto_enumTypes[4].Descriptor()
}

func (ClusterDirection) Type() protoreflect.EnumType {
	return &file_backend_v1alpha1_envoy_summary_proto_enumTypes[4]
}

func (x ClusterDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterDirection.Descriptor instead.
func (ClusterDirection) EnumDescriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{4}
}

// BootstrapSummary contains essential bootstrap configuration information
type BootstrapSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// node contains information about the Envoy node
	Node *NodeSummary `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// static_resources_version indicates the version of static resources
	StaticResourcesVersion string `protobuf:"bytes,2,opt,name=static_resources_version,json=staticResourcesVersion,proto3" json:"static_resources_version,omitempty"`
	// dynamic_resources_config contains configuration for dynamic resources
	DynamicResourcesConfig *DynamicConfigInfo `protobuf:"bytes,3,opt,name=dynamic_resources_config,json=dynamicResourcesConfig,proto3" json:"dynamic_resources_config,omitempty"`
	// admin_port is the port of the Envoy admin interface
	AdminPort uint32 `protobuf:"varint,4,opt,name=admin_port,json=adminPort,proto3" json:"admin_port,omitempty"`
	// admin_address is the address of the Envoy admin interface
	AdminAddress string `protobuf:"bytes,5,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// cluster_manager contains cluster manager configuration
	ClusterManager *ClusterManagerInfo `protobuf:"bytes,6,opt,name=cluster_manager,json=clusterManager,proto3" json:"cluster_manager,omitempty"`
}

func (x *BootstrapSummary) Reset() {
	*x = BootstrapSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapSummary) ProtoMessage() {}

func (x *BootstrapSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapSummary.ProtoReflect.Descriptor instead.
func (*BootstrapSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{0}
}

func (x *BootstrapSummary) GetNode() *NodeSummary {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *BootstrapSummary) GetStaticResourcesVersion() string {
	if x != nil {
		return x.StaticResourcesVersion
	}
	return ""
}

func (x *BootstrapSummary) GetDynamicResourcesConfig() *DynamicConfigInfo {
	if x != nil {
		return x.DynamicResourcesConfig
	}
	return nil
}

func (x *BootstrapSummary) GetAdminPort() uint32 {
	if x != nil {
		return x.AdminPort
	}
	return 0
}

func (x *BootstrapSummary) GetAdminAddress() string {
	if x != nil {
		return x.AdminAddress
	}
	return ""
}

func (x *BootstrapSummary) GetClusterManager() *ClusterManagerInfo {
	if x != nil {
		return x.ClusterManager
	}
	return nil
}

// NodeSummary contains information about the Envoy node
type NodeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the node identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// cluster is the service cluster name
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// metadata contains node metadata as key-value pairs
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// locality contains locality information
	Locality *LocalityInfo `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	// proxy_mode is the proxy mode extracted from node ID
	ProxyMode ProxyMode `protobuf:"varint,5,opt,name=proxy_mode,json=proxyMode,proto3,enum=navigator.backend.v1alpha1.ProxyMode" json:"proxy_mode,omitempty"`
}

func (x *NodeSummary) Reset() {
	*x = NodeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSummary) ProtoMessage() {}

func (x *NodeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSummary.ProtoReflect.Descriptor instead.
func (*NodeSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{1}
}

func (x *NodeSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeSummary) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *NodeSummary) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NodeSummary) GetLocality() *LocalityInfo {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *NodeSummary) GetProxyMode() ProxyMode {
	if x != nil {
		return x.ProxyMode
	}
	return ProxyMode_UNKNOWN_PROXY_MODE
}

// LocalityInfo contains locality information
type LocalityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// region is the region name
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// zone is the zone name
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *LocalityInfo) Reset() {
	*x = LocalityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalityInfo) ProtoMessage() {}

func (x *LocalityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalityInfo.ProtoReflect.Descriptor instead.
func (*LocalityInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{2}
}

func (x *LocalityInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *LocalityInfo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

// DynamicConfigInfo contains information about dynamic resource configuration
type DynamicConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ads_config contains ADS configuration source information
	AdsConfig *ConfigSourceInfo `protobuf:"bytes,1,opt,name=ads_config,json=adsConfig,proto3" json:"ads_config,omitempty"`
	// lds_config contains LDS configuration source information
	LdsConfig *ConfigSourceInfo `protobuf:"bytes,2,opt,name=lds_config,json=ldsConfig,proto3" json:"lds_config,omitempty"`
	// cds_config contains CDS configuration source information
	CdsConfig *ConfigSourceInfo `protobuf:"bytes,3,opt,name=cds_config,json=cdsConfig,proto3" json:"cds_config,omitempty"`
	// eds_config contains EDS configuration source information
	EdsConfig *ConfigSourceInfo `protobuf:"bytes,4,opt,name=eds_config,json=edsConfig,proto3" json:"eds_config,omitempty"`
	// rds_config contains RDS configuration source information
	RdsConfig *ConfigSourceInfo `protobuf:"bytes,5,opt,name=rds_config,json=rdsConfig,proto3" json:"rds_config,omitempty"`
	// sds_config contains SDS configuration source information
	SdsConfig *ConfigSourceInfo `protobuf:"bytes,6,opt,name=sds_config,json=sdsConfig,proto3" json:"sds_config,omitempty"`
	// initial_fetch_timeout is the timeout for initial resource fetch
	InitialFetchTimeout string `protobuf:"bytes,7,opt,name=initial_fetch_timeout,json=initialFetchTimeout,proto3" json:"initial_fetch_timeout,omitempty"`
}

func (x *DynamicConfigInfo) Reset() {
	*x = DynamicConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicConfigInfo) ProtoMessage() {}

func (x *DynamicConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicConfigInfo.ProtoReflect.Descriptor instead.
func (*DynamicConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{3}
}

func (x *DynamicConfigInfo) GetAdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.AdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetLdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.LdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetCdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.CdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetEdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.EdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetRdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.RdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetSdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.SdsConfig
	}
	return nil
}

func (x *DynamicConfigInfo) GetInitialFetchTimeout() string {
	if x != nil {
		return x.InitialFetchTimeout
	}
	return ""
}

// ConfigSourceInfo contains information about a configuration source
type ConfigSourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config_source_specifier indicates the type of config source
	ConfigSourceSpecifier string `protobuf:"bytes,1,opt,name=config_source_specifier,json=configSourceSpecifier,proto3" json:"config_source_specifier,omitempty"`
	// transport_api_version is the transport API version
	TransportApiVersion string `protobuf:"bytes,2,opt,name=transport_api_version,json=transportApiVersion,proto3" json:"transport_api_version,omitempty"`
	// api_type indicates the API type (REST, gRPC, etc.)
	ApiType string `protobuf:"bytes,3,opt,name=api_type,json=apiType,proto3" json:"api_type,omitempty"`
}

func (x *ConfigSourceInfo) Reset() {
	*x = ConfigSourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSourceInfo) ProtoMessage() {}

func (x *ConfigSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSourceInfo.ProtoReflect.Descriptor instead.
func (*ConfigSourceInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigSourceInfo) GetConfigSourceSpecifier() string {
	if x != nil {
		return x.ConfigSourceSpecifier
	}
	return ""
}

func (x *ConfigSourceInfo) GetTransportApiVersion() string {
	if x != nil {
		return x.TransportApiVersion
	}
	return ""
}

func (x *ConfigSourceInfo) GetApiType() string {
	if x != nil {
		return x.ApiType
	}
	return ""
}

// ClusterManagerInfo contains cluster manager configuration
type ClusterManagerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// local_cluster_name is the name of the local cluster
	LocalClusterName string `protobuf:"bytes,1,opt,name=local_cluster_name,json=localClusterName,proto3" json:"local_cluster_name,omitempty"`
	// outlier_detection indicates if outlier detection is enabled
	OutlierDetection bool `protobuf:"varint,2,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	// upstream_bind_config indicates if upstream bind config is present
	UpstreamBindConfig bool `protobuf:"varint,3,opt,name=upstream_bind_config,json=upstreamBindConfig,proto3" json:"upstream_bind_config,omitempty"`
	// load_stats_config indicates if load stats config is present
	LoadStatsConfig bool `protobuf:"varint,4,opt,name=load_stats_config,json=loadStatsConfig,proto3" json:"load_stats_config,omitempty"`
	// connect_timeout is the connection timeout
	ConnectTimeout string `protobuf:"bytes,5,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// per_connection_buffer_limit_bytes is the buffer limit per connection
	PerConnectionBufferLimitBytes uint32 `protobuf:"varint,6,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
}

func (x *ClusterManagerInfo) Reset() {
	*x = ClusterManagerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterManagerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterManagerInfo) ProtoMessage() {}

func (x *ClusterManagerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterManagerInfo.ProtoReflect.Descriptor instead.
func (*ClusterManagerInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterManagerInfo) GetLocalClusterName() string {
	if x != nil {
		return x.LocalClusterName
	}
	return ""
}

func (x *ClusterManagerInfo) GetOutlierDetection() bool {
	if x != nil {
		return x.OutlierDetection
	}
	return false
}

func (x *ClusterManagerInfo) GetUpstreamBindConfig() bool {
	if x != nil {
		return x.UpstreamBindConfig
	}
	return false
}

func (x *ClusterManagerInfo) GetLoadStatsConfig() bool {
	if x != nil {
		return x.LoadStatsConfig
	}
	return false
}

func (x *ClusterManagerInfo) GetConnectTimeout() string {
	if x != nil {
		return x.ConnectTimeout
	}
	return ""
}

func (x *ClusterManagerInfo) GetPerConnectionBufferLimitBytes() uint32 {
	if x != nil {
		return x.PerConnectionBufferLimitBytes
	}
	return 0
}

// ListenerSummary contains essential listener configuration information
type ListenerSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the listener name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// address is the listener address
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// port is the listener port
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// filter_chains contains the filter chains
	FilterChains []*FilterChainSummary `protobuf:"bytes,4,rep,name=filter_chains,json=filterChains,proto3" json:"filter_chains,omitempty"`
	// type indicates the listener type and direction
	Type ListenerType `protobuf:"varint,5,opt,name=type,proto3,enum=navigator.backend.v1alpha1.ListenerType" json:"type,omitempty"`
	// use_original_dst indicates if original destination is used
	UseOriginalDst bool `protobuf:"varint,6,opt,name=use_original_dst,json=useOriginalDst,proto3" json:"use_original_dst,omitempty"`
	// listener_filters contains listener-level filters
	ListenerFilters []*ListenerFilterSummary `protobuf:"bytes,7,rep,name=listener_filters,json=listenerFilters,proto3" json:"listener_filters,omitempty"`
	// raw_config contains the raw listener configuration in JSON format
	RawConfig string `protobuf:"bytes,8,opt,name=raw_config,json=rawConfig,proto3" json:"raw_config,omitempty"`
}

func (x *ListenerSummary) Reset() {
	*x = ListenerSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerSummary) ProtoMessage() {}

func (x *ListenerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerSummary.ProtoReflect.Descriptor instead.
func (*ListenerSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{6}
}

func (x *ListenerSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListenerSummary) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListenerSummary) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ListenerSummary) GetFilterChains() []*FilterChainSummary {
	if x != nil {
		return x.FilterChains
	}
	return nil
}

func (x *ListenerSummary) GetType() ListenerType {
	if x != nil {
		return x.Type
	}
	return ListenerType_VIRTUAL_INBOUND
}

func (x *ListenerSummary) GetUseOriginalDst() bool {
	if x != nil {
		return x.UseOriginalDst
	}
	return false
}

func (x *ListenerSummary) GetListenerFilters() []*ListenerFilterSummary {
	if x != nil {
		return x.ListenerFilters
	}
	return nil
}

func (x *ListenerSummary) GetRawConfig() string {
	if x != nil {
		return x.RawConfig
	}
	return ""
}

// FilterChainSummary contains filter chain information
type FilterChainSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the filter chain name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// filters contains the network filters in this chain
	Filters []*FilterSummary `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// match contains filter chain match criteria
	Match *FilterChainMatchInfo `protobuf:"bytes,3,opt,name=match,proto3" json:"match,omitempty"`
	// tls_context contains TLS context information
	TlsContext *TLSContextInfo `protobuf:"bytes,4,opt,name=tls_context,json=tlsContext,proto3" json:"tls_context,omitempty"`
}

func (x *FilterChainSummary) Reset() {
	*x = FilterChainSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterChainSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterChainSummary) ProtoMessage() {}

func (x *FilterChainSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterChainSummary.ProtoReflect.Descriptor instead.
func (*FilterChainSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{7}
}

func (x *FilterChainSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterChainSummary) GetFilters() []*FilterSummary {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FilterChainSummary) GetMatch() *FilterChainMatchInfo {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *FilterChainSummary) GetTlsContext() *TLSContextInfo {
	if x != nil {
		return x.TlsContext
	}
	return nil
}

// FilterChainMatchInfo contains filter chain matching criteria
type FilterChainMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// server_names contains SNI server names
	ServerNames []string `protobuf:"bytes,1,rep,name=server_names,json=serverNames,proto3" json:"server_names,omitempty"`
	// transport_protocol is the transport protocol
	TransportProtocol string `protobuf:"bytes,2,opt,name=transport_protocol,json=transportProtocol,proto3" json:"transport_protocol,omitempty"`
	// application_protocols contains ALPN protocols
	ApplicationProtocols []string `protobuf:"bytes,3,rep,name=application_protocols,json=applicationProtocols,proto3" json:"application_protocols,omitempty"`
	// direct_source_prefix_ranges contains source IP prefix ranges
	DirectSourcePrefixRanges []string `protobuf:"bytes,4,rep,name=direct_source_prefix_ranges,json=directSourcePrefixRanges,proto3" json:"direct_source_prefix_ranges,omitempty"`
	// destination_port is the destination port
	DestinationPort uint32 `protobuf:"varint,5,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
}

func (x *FilterChainMatchInfo) Reset() {
	*x = FilterChainMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterChainMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterChainMatchInfo) ProtoMessage() {}

func (x *FilterChainMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterChainMatchInfo.ProtoReflect.Descriptor instead.
func (*FilterChainMatchInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{8}
}

func (x *FilterChainMatchInfo) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

func (x *FilterChainMatchInfo) GetTransportProtocol() string {
	if x != nil {
		return x.TransportProtocol
	}
	return ""
}

func (x *FilterChainMatchInfo) GetApplicationProtocols() []string {
	if x != nil {
		return x.ApplicationProtocols
	}
	return nil
}

func (x *FilterChainMatchInfo) GetDirectSourcePrefixRanges() []string {
	if x != nil {
		return x.DirectSourcePrefixRanges
	}
	return nil
}

func (x *FilterChainMatchInfo) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

// TLSContextInfo contains TLS context information
type TLSContextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common_tls_context indicates if common TLS context is present
	CommonTlsContext bool `protobuf:"varint,1,opt,name=common_tls_context,json=commonTlsContext,proto3" json:"common_tls_context,omitempty"`
	// require_client_certificate indicates if client cert is required
	RequireClientCertificate bool `protobuf:"varint,2,opt,name=require_client_certificate,json=requireClientCertificate,proto3" json:"require_client_certificate,omitempty"`
	// session_ticket_keys indicates if session ticket keys are present
	SessionTicketKeys bool `protobuf:"varint,3,opt,name=session_ticket_keys,json=sessionTicketKeys,proto3" json:"session_ticket_keys,omitempty"`
}

func (x *TLSContextInfo) Reset() {
	*x = TLSContextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSContextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSContextInfo) ProtoMessage() {}

func (x *TLSContextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSContextInfo.ProtoReflect.Descriptor instead.
func (*TLSContextInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{9}
}

func (x *TLSContextInfo) GetCommonTlsContext() bool {
	if x != nil {
		return x.CommonTlsContext
	}
	return false
}

func (x *TLSContextInfo) GetRequireClientCertificate() bool {
	if x != nil {
		return x.RequireClientCertificate
	}
	return false
}

func (x *TLSContextInfo) GetSessionTicketKeys() bool {
	if x != nil {
		return x.SessionTicketKeys
	}
	return false
}

// ListenerFilterSummary contains listener filter information
type ListenerFilterSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config_type is the type URL of the typed config
	TypedConfigType string `protobuf:"bytes,2,opt,name=typed_config_type,json=typedConfigType,proto3" json:"typed_config_type,omitempty"`
}

func (x *ListenerFilterSummary) Reset() {
	*x = ListenerFilterSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerFilterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerFilterSummary) ProtoMessage() {}

func (x *ListenerFilterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerFilterSummary.ProtoReflect.Descriptor instead.
func (*ListenerFilterSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{10}
}

func (x *ListenerFilterSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListenerFilterSummary) GetTypedConfigType() string {
	if x != nil {
		return x.TypedConfigType
	}
	return ""
}

// FilterSummary contains network filter information
type FilterSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config contains filter-specific configuration
	//
	// Types that are assignable to TypedConfig:
	//
	//	*FilterSummary_HttpConnectionManager
	//	*FilterSummary_TcpProxy
	TypedConfig isFilterSummary_TypedConfig `protobuf_oneof:"typed_config"`
}

func (x *FilterSummary) Reset() {
	*x = FilterSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSummary) ProtoMessage() {}

func (x *FilterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSummary.ProtoReflect.Descriptor instead.
func (*FilterSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{11}
}

func (x *FilterSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *FilterSummary) GetTypedConfig() isFilterSummary_TypedConfig {
	if m != nil {
		return m.TypedConfig
	}
	return nil
}

func (x *FilterSummary) GetHttpConnectionManager() *HTTPConnectionManagerSummary {
	if x, ok := x.GetTypedConfig().(*FilterSummary_HttpConnectionManager); ok {
		return x.HttpConnectionManager
	}
	return nil
}

func (x *FilterSummary) GetTcpProxy() *TCPProxySummary {
	if x, ok := x.GetTypedConfig().(*FilterSummary_TcpProxy); ok {
		return x.TcpProxy
	}
	return nil
}

type isFilterSummary_TypedConfig interface {
	isFilterSummary_TypedConfig()
}

type FilterSummary_HttpConnectionManager struct {
	HttpConnectionManager *HTTPConnectionManagerSummary `protobuf:"bytes,2,opt,name=http_connection_manager,json=httpConnectionManager,proto3,oneof"`
}

type FilterSummary_TcpProxy struct {
	TcpProxy *TCPProxySummary `protobuf:"bytes,3,opt,name=tcp_proxy,json=tcpProxy,proto3,oneof"`
}

func (*FilterSummary_HttpConnectionManager) isFilterSummary_TypedConfig() {}

func (*FilterSummary_TcpProxy) isFilterSummary_TypedConfig() {}

// HTTPConnectionManagerSummary contains HTTP connection manager configuration
type HTTPConnectionManagerSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// codec_type is the HTTP codec type
	CodecType string `protobuf:"bytes,1,opt,name=codec_type,json=codecType,proto3" json:"codec_type,omitempty"`
	// route_config contains inline route configuration
	RouteConfig *RouteConfigInfo `protobuf:"bytes,2,opt,name=route_config,json=routeConfig,proto3" json:"route_config,omitempty"`
	// rds contains RDS configuration
	Rds *RDSInfo `protobuf:"bytes,3,opt,name=rds,proto3" json:"rds,omitempty"`
	// http_filters contains HTTP filters
	HttpFilters []*HTTPFilterSummary `protobuf:"bytes,4,rep,name=http_filters,json=httpFilters,proto3" json:"http_filters,omitempty"`
	// access_log contains access log configuration
	AccessLog []*AccessLogInfo `protobuf:"bytes,5,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	// use_remote_address indicates if remote address should be used
	UseRemoteAddress bool `protobuf:"varint,6,opt,name=use_remote_address,json=useRemoteAddress,proto3" json:"use_remote_address,omitempty"`
	// xff_num_trusted_hops is the number of trusted XFF hops
	XffNumTrustedHops uint32 `protobuf:"varint,7,opt,name=xff_num_trusted_hops,json=xffNumTrustedHops,proto3" json:"xff_num_trusted_hops,omitempty"`
	// skip_xff_append indicates if XFF append should be skipped
	SkipXffAppend bool `protobuf:"varint,8,opt,name=skip_xff_append,json=skipXffAppend,proto3" json:"skip_xff_append,omitempty"`
	// via is the Via header value
	Via string `protobuf:"bytes,9,opt,name=via,proto3" json:"via,omitempty"`
	// generate_request_id indicates if request ID should be generated
	GenerateRequestId bool `protobuf:"varint,10,opt,name=generate_request_id,json=generateRequestId,proto3" json:"generate_request_id,omitempty"`
	// forward_client_cert_details indicates how client cert details are forwarded
	ForwardClientCertDetails string `protobuf:"bytes,11,opt,name=forward_client_cert_details,json=forwardClientCertDetails,proto3" json:"forward_client_cert_details,omitempty"`
	// set_current_client_cert_details indicates if current client cert details are set
	SetCurrentClientCertDetails bool `protobuf:"varint,12,opt,name=set_current_client_cert_details,json=setCurrentClientCertDetails,proto3" json:"set_current_client_cert_details,omitempty"`
	// proxy_100_continue indicates if 100-continue is proxied
	Proxy_100Continue bool `protobuf:"varint,13,opt,name=proxy_100_continue,json=proxy100Continue,proto3" json:"proxy_100_continue,omitempty"`
	// stream_idle_timeout is the stream idle timeout
	StreamIdleTimeout string `protobuf:"bytes,14,opt,name=stream_idle_timeout,json=streamIdleTimeout,proto3" json:"stream_idle_timeout,omitempty"`
	// request_timeout is the request timeout
	RequestTimeout string `protobuf:"bytes,15,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// drain_timeout is the drain timeout
	DrainTimeout string `protobuf:"bytes,16,opt,name=drain_timeout,json=drainTimeout,proto3" json:"drain_timeout,omitempty"`
	// delayed_close_timeout is the delayed close timeout
	DelayedCloseTimeout string `protobuf:"bytes,17,opt,name=delayed_close_timeout,json=delayedCloseTimeout,proto3" json:"delayed_close_timeout,omitempty"`
	// server_name is the server name
	ServerName string `protobuf:"bytes,18,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
}

func (x *HTTPConnectionManagerSummary) Reset() {
	*x = HTTPConnectionManagerSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConnectionManagerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConnectionManagerSummary) ProtoMessage() {}

func (x *HTTPConnectionManagerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConnectionManagerSummary.ProtoReflect.Descriptor instead.
func (*HTTPConnectionManagerSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{12}
}

func (x *HTTPConnectionManagerSummary) GetCodecType() string {
	if x != nil {
		return x.CodecType
	}
	return ""
}

func (x *HTTPConnectionManagerSummary) GetRouteConfig() *RouteConfigInfo {
	if x != nil {
		return x.RouteConfig
	}
	return nil
}

func (x *HTTPConnectionManagerSummary) GetRds() *RDSInfo {
	if x != nil {
		return x.Rds
	}
	return nil
}

func (x *HTTPConnectionManagerSummary) GetHttpFilters() []*HTTPFilterSummary {
	if x != nil {
		return x.HttpFilters
	}
	return nil
}

func (x *HTTPConnectionManagerSummary) GetAccessLog() []*AccessLogInfo {
	if x != nil {
		return x.AccessLog
	}
	return nil
}

func (x *HTTPConnectionManagerSummary) GetUseRemoteAddress() bool {
	if x != nil {
		return x.UseRemoteAddress
	}
	return false
}

func (x *HTTPConnectionManagerSummary) GetXffNumTrustedHops() uint32 {
	if x != nil {
		return x.XffNumTrustedHops
	}
	return 0
}

func (x *HTTPConnectionManagerSummary) GetSkipXffAppend() bool {
	if x != nil {
		return x.SkipXffAppend
	}
	return false
}

func (x *HTTPConnectionManagerSummary) GetVia() string {
	if x != nil {
		return x.Via
	}
	return ""
}

func (x *HTTPConnectionManagerSummary) GetGenerateRequestId() bool {
	if x != nil {
		return x.GenerateRequestId
	}
	return false
}

func (x *HTTPConnectionManagerSummary) GetForwardClientCertDetails() string {
	if x != nil {
		return x.ForwardClientCertDetails
	}
	return ""
}

func (x *HTTPConnectionManagerSummary) GetSetCurrentClientCertDetails() bool {
	if x != nil {
		return x.SetCurrentClientCertDetails
	}
	return false
}

func (x *HTTPConnectionManagerSummary) GetProxy_100Continue() bool {
	if x != nil {
		return x.Proxy_100Continue
	}
	return false
}

func (x *HTTPConnectionManagerSummary) GetStreamIdleTimeout() string {
	if x != nil {
		return x.StreamIdleTimeout
	}
	return ""
}

func (x *HTTPConnectionManagerSummary) GetRequestTimeout() string {
	if x != nil {
		return x.RequestTimeout
	}
	return ""
}

func (x *HTTPConnectionManagerSummary) GetDrainTimeout() string {
	if x != nil {
		return x.DrainTimeout
	}
	return ""
}

func (x *HTTPConnectionManagerSummary) GetDelayedCloseTimeout() string {
	if x != nil {
		return x.DelayedCloseTimeout
	}
	return ""
}

func (x *HTTPConnectionManagerSummary) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

// RouteConfigInfo contains route configuration information
type RouteConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the route configuration name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// virtual_hosts contains virtual hosts
	VirtualHosts []*VirtualHostInfo `protobuf:"bytes,2,rep,name=virtual_hosts,json=virtualHosts,proto3" json:"virtual_hosts,omitempty"`
	// internal_only_headers contains headers that are internal only
	InternalOnlyHeaders []string `protobuf:"bytes,3,rep,name=internal_only_headers,json=internalOnlyHeaders,proto3" json:"internal_only_headers,omitempty"`
	// response_headers_to_add contains headers to add to responses
	ResponseHeadersToAdd []*HeaderValueOption `protobuf:"bytes,4,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// response_headers_to_remove contains headers to remove from responses
	ResponseHeadersToRemove []string `protobuf:"bytes,5,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// request_headers_to_add contains headers to add to requests
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// request_headers_to_remove contains headers to remove from requests
	RequestHeadersToRemove []string `protobuf:"bytes,7,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// validate_clusters indicates if clusters should be validated
	ValidateClusters bool `protobuf:"varint,8,opt,name=validate_clusters,json=validateClusters,proto3" json:"validate_clusters,omitempty"`
}

func (x *RouteConfigInfo) Reset() {
	*x = RouteConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConfigInfo) ProtoMessage() {}

func (x *RouteConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConfigInfo.ProtoReflect.Descriptor instead.
func (*RouteConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{13}
}

func (x *RouteConfigInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteConfigInfo) GetVirtualHosts() []*VirtualHostInfo {
	if x != nil {
		return x.VirtualHosts
	}
	return nil
}

func (x *RouteConfigInfo) GetInternalOnlyHeaders() []string {
	if x != nil {
		return x.InternalOnlyHeaders
	}
	return nil
}

func (x *RouteConfigInfo) GetResponseHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.ResponseHeadersToAdd
	}
	return nil
}

func (x *RouteConfigInfo) GetResponseHeadersToRemove() []string {
	if x != nil {
		return x.ResponseHeadersToRemove
	}
	return nil
}

func (x *RouteConfigInfo) GetRequestHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *RouteConfigInfo) GetRequestHeadersToRemove() []string {
	if x != nil {
		return x.RequestHeadersToRemove
	}
	return nil
}

func (x *RouteConfigInfo) GetValidateClusters() bool {
	if x != nil {
		return x.ValidateClusters
	}
	return false
}

// RDSInfo contains RDS configuration information
type RDSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config_source contains configuration source information
	ConfigSource *ConfigSourceInfo `protobuf:"bytes,1,opt,name=config_source,json=configSource,proto3" json:"config_source,omitempty"`
	// route_config_name is the name of the route configuration
	RouteConfigName string `protobuf:"bytes,2,opt,name=route_config_name,json=routeConfigName,proto3" json:"route_config_name,omitempty"`
}

func (x *RDSInfo) Reset() {
	*x = RDSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSInfo) ProtoMessage() {}

func (x *RDSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSInfo.ProtoReflect.Descriptor instead.
func (*RDSInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{14}
}

func (x *RDSInfo) GetConfigSource() *ConfigSourceInfo {
	if x != nil {
		return x.ConfigSource
	}
	return nil
}

func (x *RDSInfo) GetRouteConfigName() string {
	if x != nil {
		return x.RouteConfigName
	}
	return ""
}

// HTTPFilterSummary contains HTTP filter information
type HTTPFilterSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config_type is the type URL of the typed config
	TypedConfigType string `protobuf:"bytes,2,opt,name=typed_config_type,json=typedConfigType,proto3" json:"typed_config_type,omitempty"`
	// disabled indicates if the filter is disabled
	Disabled bool `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *HTTPFilterSummary) Reset() {
	*x = HTTPFilterSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFilterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFilterSummary) ProtoMessage() {}

func (x *HTTPFilterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFilterSummary.ProtoReflect.Descriptor instead.
func (*HTTPFilterSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{15}
}

func (x *HTTPFilterSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPFilterSummary) GetTypedConfigType() string {
	if x != nil {
		return x.TypedConfigType
	}
	return ""
}

func (x *HTTPFilterSummary) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// AccessLogInfo contains access log configuration
type AccessLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the access log filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config_type is the type URL of the typed config
	TypedConfigType string `protobuf:"bytes,2,opt,name=typed_config_type,json=typedConfigType,proto3" json:"typed_config_type,omitempty"`
	// filter_type is the type of filter applied
	FilterType string `protobuf:"bytes,3,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`
}

func (x *AccessLogInfo) Reset() {
	*x = AccessLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLogInfo) ProtoMessage() {}

func (x *AccessLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLogInfo.ProtoReflect.Descriptor instead.
func (*AccessLogInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{16}
}

func (x *AccessLogInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessLogInfo) GetTypedConfigType() string {
	if x != nil {
		return x.TypedConfigType
	}
	return ""
}

func (x *AccessLogInfo) GetFilterType() string {
	if x != nil {
		return x.FilterType
	}
	return ""
}

// VirtualHostInfo contains virtual host information
type VirtualHostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the virtual host name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// domains contains the domains for this virtual host
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	// routes contains the routes for this virtual host
	Routes []*RouteInfo `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	// require_tls indicates TLS requirement
	RequireTls string `protobuf:"bytes,4,opt,name=require_tls,json=requireTls,proto3" json:"require_tls,omitempty"`
	// virtual_clusters contains virtual cluster information
	VirtualClusters []*VirtualClusterInfo `protobuf:"bytes,5,rep,name=virtual_clusters,json=virtualClusters,proto3" json:"virtual_clusters,omitempty"`
	// rate_limits contains rate limiting configuration
	RateLimits []*RateLimitInfo `protobuf:"bytes,6,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	// request_headers_to_add contains headers to add to requests
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,7,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// request_headers_to_remove contains headers to remove from requests
	RequestHeadersToRemove []string `protobuf:"bytes,8,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// response_headers_to_add contains headers to add to responses
	ResponseHeadersToAdd []*HeaderValueOption `protobuf:"bytes,9,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// response_headers_to_remove contains headers to remove from responses
	ResponseHeadersToRemove []string `protobuf:"bytes,10,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// cors contains CORS configuration
	Cors *CorsInfo `protobuf:"bytes,11,opt,name=cors,proto3" json:"cors,omitempty"`
	// include_request_attempt_count indicates if request attempt count is included
	IncludeRequestAttemptCount bool `protobuf:"varint,12,opt,name=include_request_attempt_count,json=includeRequestAttemptCount,proto3" json:"include_request_attempt_count,omitempty"`
	// include_attempt_count_in_response indicates if attempt count is included in response
	IncludeAttemptCountInResponse bool `protobuf:"varint,13,opt,name=include_attempt_count_in_response,json=includeAttemptCountInResponse,proto3" json:"include_attempt_count_in_response,omitempty"`
	// retry_policy contains retry policy
	RetryPolicy *RetryPolicyInfo `protobuf:"bytes,14,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// hedge_policy contains hedge policy
	HedgePolicy *HedgePolicyInfo `protobuf:"bytes,15,opt,name=hedge_policy,json=hedgePolicy,proto3" json:"hedge_policy,omitempty"`
}

func (x *VirtualHostInfo) Reset() {
	*x = VirtualHostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualHostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualHostInfo) ProtoMessage() {}

func (x *VirtualHostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualHostInfo.ProtoReflect.Descriptor instead.
func (*VirtualHostInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{17}
}

func (x *VirtualHostInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualHostInfo) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *VirtualHostInfo) GetRoutes() []*RouteInfo {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *VirtualHostInfo) GetRequireTls() string {
	if x != nil {
		return x.RequireTls
	}
	return ""
}

func (x *VirtualHostInfo) GetVirtualClusters() []*VirtualClusterInfo {
	if x != nil {
		return x.VirtualClusters
	}
	return nil
}

func (x *VirtualHostInfo) GetRateLimits() []*RateLimitInfo {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *VirtualHostInfo) GetRequestHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *VirtualHostInfo) GetRequestHeadersToRemove() []string {
	if x != nil {
		return x.RequestHeadersToRemove
	}
	return nil
}

func (x *VirtualHostInfo) GetResponseHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.ResponseHeadersToAdd
	}
	return nil
}

func (x *VirtualHostInfo) GetResponseHeadersToRemove() []string {
	if x != nil {
		return x.ResponseHeadersToRemove
	}
	return nil
}

func (x *VirtualHostInfo) GetCors() *CorsInfo {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *VirtualHostInfo) GetIncludeRequestAttemptCount() bool {
	if x != nil {
		return x.IncludeRequestAttemptCount
	}
	return false
}

func (x *VirtualHostInfo) GetIncludeAttemptCountInResponse() bool {
	if x != nil {
		return x.IncludeAttemptCountInResponse
	}
	return false
}

func (x *VirtualHostInfo) GetRetryPolicy() *RetryPolicyInfo {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *VirtualHostInfo) GetHedgePolicy() *HedgePolicyInfo {
	if x != nil {
		return x.HedgePolicy
	}
	return nil
}

// RouteInfo contains route information
type RouteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the route name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// match contains route matching criteria
	Match *RouteMatchInfo `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
	// action contains route action
	Action *RouteActionInfo `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// decorator contains decorator information
	Decorator *DecoratorInfo `protobuf:"bytes,4,opt,name=decorator,proto3" json:"decorator,omitempty"`
	// request_headers_to_add contains headers to add to requests
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,5,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// request_headers_to_remove contains headers to remove from requests
	RequestHeadersToRemove []string `protobuf:"bytes,6,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// response_headers_to_add contains headers to add to responses
	ResponseHeadersToAdd []*HeaderValueOption `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// response_headers_to_remove contains headers to remove from responses
	ResponseHeadersToRemove []string `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// tracing contains tracing configuration
	Tracing *TracingInfo `protobuf:"bytes,9,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// timeout is the route timeout
	Timeout string `protobuf:"bytes,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// idle_timeout is the idle timeout
	IdleTimeout string `protobuf:"bytes,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// retry_policy contains retry policy
	RetryPolicy *RetryPolicyInfo `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// request_mirror_policies contains request mirror policies
	RequestMirrorPolicies []*RequestMirrorPolicy `protobuf:"bytes,13,rep,name=request_mirror_policies,json=requestMirrorPolicies,proto3" json:"request_mirror_policies,omitempty"`
	// priority is the route priority
	Priority string `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`
	// rate_limits contains rate limiting configuration
	RateLimits []*RateLimitInfo `protobuf:"bytes,15,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	// include_vh_rate_limits indicates if VH rate limits are included
	IncludeVhRateLimits bool `protobuf:"varint,16,opt,name=include_vh_rate_limits,json=includeVhRateLimits,proto3" json:"include_vh_rate_limits,omitempty"`
	// hedge_policy contains hedge policy
	HedgePolicy *HedgePolicyInfo `protobuf:"bytes,17,opt,name=hedge_policy,json=hedgePolicy,proto3" json:"hedge_policy,omitempty"`
	// max_stream_duration contains max stream duration
	MaxStreamDuration *MaxStreamDurationInfo `protobuf:"bytes,18,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
}

func (x *RouteInfo) Reset() {
	*x = RouteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInfo) ProtoMessage() {}

func (x *RouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInfo.ProtoReflect.Descriptor instead.
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{18}
}

func (x *RouteInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteInfo) GetMatch() *RouteMatchInfo {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *RouteInfo) GetAction() *RouteActionInfo {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *RouteInfo) GetDecorator() *DecoratorInfo {
	if x != nil {
		return x.Decorator
	}
	return nil
}

func (x *RouteInfo) GetRequestHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *RouteInfo) GetRequestHeadersToRemove() []string {
	if x != nil {
		return x.RequestHeadersToRemove
	}
	return nil
}

func (x *RouteInfo) GetResponseHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.ResponseHeadersToAdd
	}
	return nil
}

func (x *RouteInfo) GetResponseHeadersToRemove() []string {
	if x != nil {
		return x.ResponseHeadersToRemove
	}
	return nil
}

func (x *RouteInfo) GetTracing() *TracingInfo {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *RouteInfo) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *RouteInfo) GetIdleTimeout() string {
	if x != nil {
		return x.IdleTimeout
	}
	return ""
}

func (x *RouteInfo) GetRetryPolicy() *RetryPolicyInfo {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *RouteInfo) GetRequestMirrorPolicies() []*RequestMirrorPolicy {
	if x != nil {
		return x.RequestMirrorPolicies
	}
	return nil
}

func (x *RouteInfo) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *RouteInfo) GetRateLimits() []*RateLimitInfo {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *RouteInfo) GetIncludeVhRateLimits() bool {
	if x != nil {
		return x.IncludeVhRateLimits
	}
	return false
}

func (x *RouteInfo) GetHedgePolicy() *HedgePolicyInfo {
	if x != nil {
		return x.HedgePolicy
	}
	return nil
}

func (x *RouteInfo) GetMaxStreamDuration() *MaxStreamDurationInfo {
	if x != nil {
		return x.MaxStreamDuration
	}
	return nil
}

// RouteMatchInfo contains route matching information
type RouteMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path_specifier indicates the type of path matching
	PathSpecifier string `protobuf:"bytes,1,opt,name=path_specifier,json=pathSpecifier,proto3" json:"path_specifier,omitempty"`
	// path contains the path to match
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// case_sensitive indicates if matching is case sensitive
	CaseSensitive bool `protobuf:"varint,3,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	// runtime_fraction contains runtime fraction matching
	RuntimeFraction *RuntimeFractionInfo `protobuf:"bytes,4,opt,name=runtime_fraction,json=runtimeFraction,proto3" json:"runtime_fraction,omitempty"`
	// headers contains header matching criteria
	Headers []*HeaderMatcherInfo `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	// query_parameters contains query parameter matching criteria
	QueryParameters []*QueryParameterMatcherInfo `protobuf:"bytes,6,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// grpc contains gRPC-specific matching
	Grpc *GrpcRouteMatchInfo `protobuf:"bytes,7,opt,name=grpc,proto3" json:"grpc,omitempty"`
	// tls_context contains TLS context matching
	TlsContext *TlsContextMatchInfo `protobuf:"bytes,8,opt,name=tls_context,json=tlsContext,proto3" json:"tls_context,omitempty"`
	// dynamic_metadata contains dynamic metadata matching
	DynamicMetadata []*MetadataMatcherInfo `protobuf:"bytes,9,rep,name=dynamic_metadata,json=dynamicMetadata,proto3" json:"dynamic_metadata,omitempty"`
}

func (x *RouteMatchInfo) Reset() {
	*x = RouteMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatchInfo) ProtoMessage() {}

func (x *RouteMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatchInfo.ProtoReflect.Descriptor instead.
func (*RouteMatchInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{19}
}

func (x *RouteMatchInfo) GetPathSpecifier() string {
	if x != nil {
		return x.PathSpecifier
	}
	return ""
}

func (x *RouteMatchInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RouteMatchInfo) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

func (x *RouteMatchInfo) GetRuntimeFraction() *RuntimeFractionInfo {
	if x != nil {
		return x.RuntimeFraction
	}
	return nil
}

func (x *RouteMatchInfo) GetHeaders() []*HeaderMatcherInfo {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RouteMatchInfo) GetQueryParameters() []*QueryParameterMatcherInfo {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

func (x *RouteMatchInfo) GetGrpc() *GrpcRouteMatchInfo {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *RouteMatchInfo) GetTlsContext() *TlsContextMatchInfo {
	if x != nil {
		return x.TlsContext
	}
	return nil
}

func (x *RouteMatchInfo) GetDynamicMetadata() []*MetadataMatcherInfo {
	if x != nil {
		return x.DynamicMetadata
	}
	return nil
}

// RouteActionInfo contains route action information
type RouteActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// action_type indicates the type of action
	ActionType string `protobuf:"bytes,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	// cluster is the destination cluster
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// cluster_header is the header containing cluster name
	ClusterHeader string `protobuf:"bytes,3,opt,name=cluster_header,json=clusterHeader,proto3" json:"cluster_header,omitempty"`
	// weighted_clusters contains weighted cluster destinations
	WeightedClusters []*WeightedClusterInfo `protobuf:"bytes,4,rep,name=weighted_clusters,json=weightedClusters,proto3" json:"weighted_clusters,omitempty"`
	// cluster_not_found_response_code is the response code when cluster is not found
	ClusterNotFoundResponseCode string `protobuf:"bytes,5,opt,name=cluster_not_found_response_code,json=clusterNotFoundResponseCode,proto3" json:"cluster_not_found_response_code,omitempty"`
	// prefix_rewrite is the prefix rewrite rule
	PrefixRewrite string `protobuf:"bytes,6,opt,name=prefix_rewrite,json=prefixRewrite,proto3" json:"prefix_rewrite,omitempty"`
	// regex_rewrite contains regex rewrite rule
	RegexRewrite *RegexRewriteInfo `protobuf:"bytes,7,opt,name=regex_rewrite,json=regexRewrite,proto3" json:"regex_rewrite,omitempty"`
	// host_rewrite_specifier indicates how host rewriting is done
	HostRewriteSpecifier string `protobuf:"bytes,8,opt,name=host_rewrite_specifier,json=hostRewriteSpecifier,proto3" json:"host_rewrite_specifier,omitempty"`
	// host_rewrite_literal is the literal host rewrite value
	HostRewriteLiteral string `protobuf:"bytes,9,opt,name=host_rewrite_literal,json=hostRewriteLiteral,proto3" json:"host_rewrite_literal,omitempty"`
	// auto_host_rewrite indicates if automatic host rewriting is enabled
	AutoHostRewrite bool `protobuf:"varint,10,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3" json:"auto_host_rewrite,omitempty"`
	// auto_host_rewrite_header is the header for automatic host rewriting
	AutoHostRewriteHeader string `protobuf:"bytes,11,opt,name=auto_host_rewrite_header,json=autoHostRewriteHeader,proto3" json:"auto_host_rewrite_header,omitempty"`
	// timeout is the action timeout
	Timeout string `protobuf:"bytes,12,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// idle_timeout is the idle timeout
	IdleTimeout string `protobuf:"bytes,13,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// retry_policy contains retry policy
	RetryPolicy *RetryPolicyInfo `protobuf:"bytes,14,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// request_mirror_policies contains request mirror policies
	RequestMirrorPolicies []*RequestMirrorPolicy `protobuf:"bytes,15,rep,name=request_mirror_policies,json=requestMirrorPolicies,proto3" json:"request_mirror_policies,omitempty"`
	// priority is the action priority
	Priority string `protobuf:"bytes,16,opt,name=priority,proto3" json:"priority,omitempty"`
	// rate_limits contains rate limiting configuration
	RateLimits []*RateLimitInfo `protobuf:"bytes,17,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	// include_vh_rate_limits indicates if VH rate limits are included
	IncludeVhRateLimits bool `protobuf:"varint,18,opt,name=include_vh_rate_limits,json=includeVhRateLimits,proto3" json:"include_vh_rate_limits,omitempty"`
	// hash_policy contains hash policy configuration
	HashPolicy []*HashPolicyInfo `protobuf:"bytes,19,rep,name=hash_policy,json=hashPolicy,proto3" json:"hash_policy,omitempty"`
	// cors contains CORS configuration
	Cors *CorsInfo `protobuf:"bytes,20,opt,name=cors,proto3" json:"cors,omitempty"`
	// max_grpc_timeout is the maximum gRPC timeout
	MaxGrpcTimeout string `protobuf:"bytes,21,opt,name=max_grpc_timeout,json=maxGrpcTimeout,proto3" json:"max_grpc_timeout,omitempty"`
	// grpc_timeout_offset is the gRPC timeout offset
	GrpcTimeoutOffset string `protobuf:"bytes,22,opt,name=grpc_timeout_offset,json=grpcTimeoutOffset,proto3" json:"grpc_timeout_offset,omitempty"`
	// upgrade_configs contains upgrade configuration
	UpgradeConfigs []*UpgradeConfigInfo `protobuf:"bytes,23,rep,name=upgrade_configs,json=upgradeConfigs,proto3" json:"upgrade_configs,omitempty"`
	// internal_redirect_policy contains internal redirect policy
	InternalRedirectPolicy *InternalRedirectPolicyInfo `protobuf:"bytes,24,opt,name=internal_redirect_policy,json=internalRedirectPolicy,proto3" json:"internal_redirect_policy,omitempty"`
	// max_internal_redirects is the maximum number of internal redirects
	MaxInternalRedirects uint32 `protobuf:"varint,25,opt,name=max_internal_redirects,json=maxInternalRedirects,proto3" json:"max_internal_redirects,omitempty"`
	// hedge_policy contains hedge policy
	HedgePolicy *HedgePolicyInfo `protobuf:"bytes,26,opt,name=hedge_policy,json=hedgePolicy,proto3" json:"hedge_policy,omitempty"`
	// max_stream_duration contains max stream duration
	MaxStreamDuration *MaxStreamDurationInfo `protobuf:"bytes,27,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
}

func (x *RouteActionInfo) Reset() {
	*x = RouteActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteActionInfo) ProtoMessage() {}

func (x *RouteActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteActionInfo.ProtoReflect.Descriptor instead.
func (*RouteActionInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{20}
}

func (x *RouteActionInfo) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *RouteActionInfo) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *RouteActionInfo) GetClusterHeader() string {
	if x != nil {
		return x.ClusterHeader
	}
	return ""
}

func (x *RouteActionInfo) GetWeightedClusters() []*WeightedClusterInfo {
	if x != nil {
		return x.WeightedClusters
	}
	return nil
}

func (x *RouteActionInfo) GetClusterNotFoundResponseCode() string {
	if x != nil {
		return x.ClusterNotFoundResponseCode
	}
	return ""
}

func (x *RouteActionInfo) GetPrefixRewrite() string {
	if x != nil {
		return x.PrefixRewrite
	}
	return ""
}

func (x *RouteActionInfo) GetRegexRewrite() *RegexRewriteInfo {
	if x != nil {
		return x.RegexRewrite
	}
	return nil
}

func (x *RouteActionInfo) GetHostRewriteSpecifier() string {
	if x != nil {
		return x.HostRewriteSpecifier
	}
	return ""
}

func (x *RouteActionInfo) GetHostRewriteLiteral() string {
	if x != nil {
		return x.HostRewriteLiteral
	}
	return ""
}

func (x *RouteActionInfo) GetAutoHostRewrite() bool {
	if x != nil {
		return x.AutoHostRewrite
	}
	return false
}

func (x *RouteActionInfo) GetAutoHostRewriteHeader() string {
	if x != nil {
		return x.AutoHostRewriteHeader
	}
	return ""
}

func (x *RouteActionInfo) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *RouteActionInfo) GetIdleTimeout() string {
	if x != nil {
		return x.IdleTimeout
	}
	return ""
}

func (x *RouteActionInfo) GetRetryPolicy() *RetryPolicyInfo {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *RouteActionInfo) GetRequestMirrorPolicies() []*RequestMirrorPolicy {
	if x != nil {
		return x.RequestMirrorPolicies
	}
	return nil
}

func (x *RouteActionInfo) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *RouteActionInfo) GetRateLimits() []*RateLimitInfo {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *RouteActionInfo) GetIncludeVhRateLimits() bool {
	if x != nil {
		return x.IncludeVhRateLimits
	}
	return false
}

func (x *RouteActionInfo) GetHashPolicy() []*HashPolicyInfo {
	if x != nil {
		return x.HashPolicy
	}
	return nil
}

func (x *RouteActionInfo) GetCors() *CorsInfo {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *RouteActionInfo) GetMaxGrpcTimeout() string {
	if x != nil {
		return x.MaxGrpcTimeout
	}
	return ""
}

func (x *RouteActionInfo) GetGrpcTimeoutOffset() string {
	if x != nil {
		return x.GrpcTimeoutOffset
	}
	return ""
}

func (x *RouteActionInfo) GetUpgradeConfigs() []*UpgradeConfigInfo {
	if x != nil {
		return x.UpgradeConfigs
	}
	return nil
}

func (x *RouteActionInfo) GetInternalRedirectPolicy() *InternalRedirectPolicyInfo {
	if x != nil {
		return x.InternalRedirectPolicy
	}
	return nil
}

func (x *RouteActionInfo) GetMaxInternalRedirects() uint32 {
	if x != nil {
		return x.MaxInternalRedirects
	}
	return 0
}

func (x *RouteActionInfo) GetHedgePolicy() *HedgePolicyInfo {
	if x != nil {
		return x.HedgePolicy
	}
	return nil
}

func (x *RouteActionInfo) GetMaxStreamDuration() *MaxStreamDurationInfo {
	if x != nil {
		return x.MaxStreamDuration
	}
	return nil
}

// TCPProxySummary contains TCP proxy configuration
type TCPProxySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stat_prefix is the statistics prefix
	StatPrefix string `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// cluster is the destination cluster
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// weighted_clusters contains weighted cluster destinations
	WeightedClusters []*WeightedClusterInfo `protobuf:"bytes,3,rep,name=weighted_clusters,json=weightedClusters,proto3" json:"weighted_clusters,omitempty"`
	// idle_timeout is the idle timeout
	IdleTimeout string `protobuf:"bytes,4,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// downstream_idle_timeout is the downstream idle timeout
	DownstreamIdleTimeout string `protobuf:"bytes,5,opt,name=downstream_idle_timeout,json=downstreamIdleTimeout,proto3" json:"downstream_idle_timeout,omitempty"`
	// upstream_idle_timeout is the upstream idle timeout
	UpstreamIdleTimeout string `protobuf:"bytes,6,opt,name=upstream_idle_timeout,json=upstreamIdleTimeout,proto3" json:"upstream_idle_timeout,omitempty"`
	// access_log contains access log configuration
	AccessLog []*AccessLogInfo `protobuf:"bytes,7,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	// max_connect_attempts is the maximum connection attempts
	MaxConnectAttempts uint32 `protobuf:"varint,8,opt,name=max_connect_attempts,json=maxConnectAttempts,proto3" json:"max_connect_attempts,omitempty"`
	// hash_policy contains hash policy configuration
	HashPolicy []*HashPolicyInfo `protobuf:"bytes,9,rep,name=hash_policy,json=hashPolicy,proto3" json:"hash_policy,omitempty"`
	// tunneling_config contains tunneling configuration
	TunnelingConfig *TunnelingConfigInfo `protobuf:"bytes,10,opt,name=tunneling_config,json=tunnelingConfig,proto3" json:"tunneling_config,omitempty"`
	// max_downstream_connection_duration is the maximum downstream connection duration
	MaxDownstreamConnectionDuration string `protobuf:"bytes,11,opt,name=max_downstream_connection_duration,json=maxDownstreamConnectionDuration,proto3" json:"max_downstream_connection_duration,omitempty"`
}

func (x *TCPProxySummary) Reset() {
	*x = TCPProxySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPProxySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPProxySummary) ProtoMessage() {}

func (x *TCPProxySummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPProxySummary.ProtoReflect.Descriptor instead.
func (*TCPProxySummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{21}
}

func (x *TCPProxySummary) GetStatPrefix() string {
	if x != nil {
		return x.StatPrefix
	}
	return ""
}

func (x *TCPProxySummary) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *TCPProxySummary) GetWeightedClusters() []*WeightedClusterInfo {
	if x != nil {
		return x.WeightedClusters
	}
	return nil
}

func (x *TCPProxySummary) GetIdleTimeout() string {
	if x != nil {
		return x.IdleTimeout
	}
	return ""
}

func (x *TCPProxySummary) GetDownstreamIdleTimeout() string {
	if x != nil {
		return x.DownstreamIdleTimeout
	}
	return ""
}

func (x *TCPProxySummary) GetUpstreamIdleTimeout() string {
	if x != nil {
		return x.UpstreamIdleTimeout
	}
	return ""
}

func (x *TCPProxySummary) GetAccessLog() []*AccessLogInfo {
	if x != nil {
		return x.AccessLog
	}
	return nil
}

func (x *TCPProxySummary) GetMaxConnectAttempts() uint32 {
	if x != nil {
		return x.MaxConnectAttempts
	}
	return 0
}

func (x *TCPProxySummary) GetHashPolicy() []*HashPolicyInfo {
	if x != nil {
		return x.HashPolicy
	}
	return nil
}

func (x *TCPProxySummary) GetTunnelingConfig() *TunnelingConfigInfo {
	if x != nil {
		return x.TunnelingConfig
	}
	return nil
}

func (x *TCPProxySummary) GetMaxDownstreamConnectionDuration() string {
	if x != nil {
		return x.MaxDownstreamConnectionDuration
	}
	return ""
}

// ClusterSummary contains essential cluster configuration information
type ClusterSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the cluster name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the cluster discovery type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// connect_timeout is the connection timeout
	ConnectTimeout string `protobuf:"bytes,3,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// load_assignment contains endpoint configuration
	LoadAssignment *EndpointConfigInfo `protobuf:"bytes,4,opt,name=load_assignment,json=loadAssignment,proto3" json:"load_assignment,omitempty"`
	// load_balancing_policy is the load balancing policy
	LoadBalancingPolicy string `protobuf:"bytes,5,opt,name=load_balancing_policy,json=loadBalancingPolicy,proto3" json:"load_balancing_policy,omitempty"`
	// health_checks contains health check configuration
	HealthChecks []*HealthCheckInfo `protobuf:"bytes,6,rep,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty"`
	// max_requests_per_connection is the maximum requests per connection
	MaxRequestsPerConnection uint32 `protobuf:"varint,7,opt,name=max_requests_per_connection,json=maxRequestsPerConnection,proto3" json:"max_requests_per_connection,omitempty"`
	// http2_max_requests is the HTTP/2 maximum requests
	Http2MaxRequests uint32 `protobuf:"varint,8,opt,name=http2_max_requests,json=http2MaxRequests,proto3" json:"http2_max_requests,omitempty"`
	// http2_max_requests_per_connection is the HTTP/2 maximum requests per connection
	Http2MaxRequestsPerConnection uint32 `protobuf:"varint,9,opt,name=http2_max_requests_per_connection,json=http2MaxRequestsPerConnection,proto3" json:"http2_max_requests_per_connection,omitempty"`
	// http2_max_concurrent_streams is the HTTP/2 maximum concurrent streams
	Http2MaxConcurrentStreams uint32 `protobuf:"varint,10,opt,name=http2_max_concurrent_streams,json=http2MaxConcurrentStreams,proto3" json:"http2_max_concurrent_streams,omitempty"`
	// http2_initial_stream_window_size is the HTTP/2 initial stream window size
	Http2InitialStreamWindowSize uint32 `protobuf:"varint,11,opt,name=http2_initial_stream_window_size,json=http2InitialStreamWindowSize,proto3" json:"http2_initial_stream_window_size,omitempty"`
	// http2_initial_connection_window_size is the HTTP/2 initial connection window size
	Http2InitialConnectionWindowSize uint32 `protobuf:"varint,12,opt,name=http2_initial_connection_window_size,json=http2InitialConnectionWindowSize,proto3" json:"http2_initial_connection_window_size,omitempty"`
	// http2_max_frame_size is the HTTP/2 maximum frame size
	Http2MaxFrameSize uint32 `protobuf:"varint,13,opt,name=http2_max_frame_size,json=http2MaxFrameSize,proto3" json:"http2_max_frame_size,omitempty"`
	// http2_enable_keepalive indicates if HTTP/2 keepalive is enabled
	Http2EnableKeepalive bool `protobuf:"varint,14,opt,name=http2_enable_keepalive,json=http2EnableKeepalive,proto3" json:"http2_enable_keepalive,omitempty"`
	// circuit_breakers contains circuit breaker configuration
	CircuitBreakers *CircuitBreakersInfo `protobuf:"bytes,15,opt,name=circuit_breakers,json=circuitBreakers,proto3" json:"circuit_breakers,omitempty"`
	// tls_context contains TLS configuration
	TlsContext *TLSContextInfo `protobuf:"bytes,16,opt,name=tls_context,json=tlsContext,proto3" json:"tls_context,omitempty"`
	// common_http_protocol_options contains common HTTP protocol options
	CommonHttpProtocolOptions *CommonHttpProtocolOptionsInfo `protobuf:"bytes,17,opt,name=common_http_protocol_options,json=commonHttpProtocolOptions,proto3" json:"common_http_protocol_options,omitempty"`
	// alt_stat_name is the alternative statistics name
	AltStatName string `protobuf:"bytes,18,opt,name=alt_stat_name,json=altStatName,proto3" json:"alt_stat_name,omitempty"`
	// per_connection_buffer_limit_bytes is the buffer limit per connection
	PerConnectionBufferLimitBytes uint32 `protobuf:"varint,19,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
	// lb_policy is the load balancing policy
	LbPolicy string `protobuf:"bytes,20,opt,name=lb_policy,json=lbPolicy,proto3" json:"lb_policy,omitempty"`
	// hosts contains static host configuration
	Hosts []*HostInfo `protobuf:"bytes,21,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// drain_connections_on_host_removal indicates if connections are drained on host removal
	DrainConnectionsOnHostRemoval bool `protobuf:"varint,22,opt,name=drain_connections_on_host_removal,json=drainConnectionsOnHostRemoval,proto3" json:"drain_connections_on_host_removal,omitempty"`
	// warming_hosts contains warming host information
	WarmingHosts []*HostInfo `protobuf:"bytes,23,rep,name=warming_hosts,json=warmingHosts,proto3" json:"warming_hosts,omitempty"`
	// outlier_detection contains outlier detection configuration
	OutlierDetection *OutlierDetectionInfo `protobuf:"bytes,24,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	// cleanup_interval is the cleanup interval
	CleanupInterval string `protobuf:"bytes,25,opt,name=cleanup_interval,json=cleanupInterval,proto3" json:"cleanup_interval,omitempty"`
	// upstream_bind_config contains upstream bind configuration
	UpstreamBindConfig *UpstreamBindConfigInfo `protobuf:"bytes,26,opt,name=upstream_bind_config,json=upstreamBindConfig,proto3" json:"upstream_bind_config,omitempty"`
	// lb_subset_config contains load balancing subset configuration
	LbSubsetConfig *LbSubsetConfigInfo `protobuf:"bytes,27,opt,name=lb_subset_config,json=lbSubsetConfig,proto3" json:"lb_subset_config,omitempty"`
	// ring_hash_lb_config contains ring hash load balancing configuration
	RingHashLbConfig *RingHashLbConfigInfo `protobuf:"bytes,28,opt,name=ring_hash_lb_config,json=ringHashLbConfig,proto3" json:"ring_hash_lb_config,omitempty"`
	// maglev_lb_config contains Maglev load balancing configuration
	MaglevLbConfig *MaglevLbConfigInfo `protobuf:"bytes,29,opt,name=maglev_lb_config,json=maglevLbConfig,proto3" json:"maglev_lb_config,omitempty"`
	// original_dst_lb_config contains original destination load balancing configuration
	OriginalDstLbConfig *OriginalDstLbConfigInfo `protobuf:"bytes,30,opt,name=original_dst_lb_config,json=originalDstLbConfig,proto3" json:"original_dst_lb_config,omitempty"`
	// least_request_lb_config contains least request load balancing configuration
	LeastRequestLbConfig *LeastRequestLbConfigInfo `protobuf:"bytes,31,opt,name=least_request_lb_config,json=leastRequestLbConfig,proto3" json:"least_request_lb_config,omitempty"`
	// common_lb_config contains common load balancing configuration
	CommonLbConfig *CommonLbConfigInfo `protobuf:"bytes,32,opt,name=common_lb_config,json=commonLbConfig,proto3" json:"common_lb_config,omitempty"`
	// transport_socket contains transport socket configuration
	TransportSocket *TransportSocketInfo `protobuf:"bytes,33,opt,name=transport_socket,json=transportSocket,proto3" json:"transport_socket,omitempty"`
	// protocol_selection is the protocol selection policy
	ProtocolSelection string `protobuf:"bytes,34,opt,name=protocol_selection,json=protocolSelection,proto3" json:"protocol_selection,omitempty"`
	// upstream_connection_options contains upstream connection options
	UpstreamConnectionOptions *UpstreamConnectionOptionsInfo `protobuf:"bytes,35,opt,name=upstream_connection_options,json=upstreamConnectionOptions,proto3" json:"upstream_connection_options,omitempty"`
	// close_connections_on_host_set_change indicates if connections are closed on host set change
	CloseConnectionsOnHostSetChange bool `protobuf:"varint,36,opt,name=close_connections_on_host_set_change,json=closeConnectionsOnHostSetChange,proto3" json:"close_connections_on_host_set_change,omitempty"`
	// ignore_health_on_host_removal indicates if health is ignored on host removal
	IgnoreHealthOnHostRemoval bool `protobuf:"varint,37,opt,name=ignore_health_on_host_removal,json=ignoreHealthOnHostRemoval,proto3" json:"ignore_health_on_host_removal,omitempty"`
	// filters contains cluster filters
	Filters []*ClusterFilterInfo `protobuf:"bytes,38,rep,name=filters,proto3" json:"filters,omitempty"`
	// lrs_server contains LRS server configuration
	LrsServer *ConfigSourceInfo `protobuf:"bytes,39,opt,name=lrs_server,json=lrsServer,proto3" json:"lrs_server,omitempty"`
	// dns_lookup_family is the DNS lookup family
	DnsLookupFamily string `protobuf:"bytes,40,opt,name=dns_lookup_family,json=dnsLookupFamily,proto3" json:"dns_lookup_family,omitempty"`
	// dns_resolvers contains DNS resolver configuration
	DnsResolvers []*DnsResolverInfo `protobuf:"bytes,41,rep,name=dns_resolvers,json=dnsResolvers,proto3" json:"dns_resolvers,omitempty"`
	// use_tcp_for_dns_lookups indicates if TCP is used for DNS lookups
	UseTcpForDnsLookups bool `protobuf:"varint,42,opt,name=use_tcp_for_dns_lookups,json=useTcpForDnsLookups,proto3" json:"use_tcp_for_dns_lookups,omitempty"`
	// dns_failure_refresh_rate contains DNS failure refresh rate
	DnsFailureRefreshRate *RefreshRateInfo `protobuf:"bytes,43,opt,name=dns_failure_refresh_rate,json=dnsFailureRefreshRate,proto3" json:"dns_failure_refresh_rate,omitempty"`
	// respect_dns_ttl indicates if DNS TTL is respected
	RespectDnsTtl bool `protobuf:"varint,44,opt,name=respect_dns_ttl,json=respectDnsTtl,proto3" json:"respect_dns_ttl,omitempty"`
	// dns_refresh_rate is the DNS refresh rate
	DnsRefreshRate string `protobuf:"bytes,45,opt,name=dns_refresh_rate,json=dnsRefreshRate,proto3" json:"dns_refresh_rate,omitempty"`
	// dns_query_timeout is the DNS query timeout
	DnsQueryTimeout string `protobuf:"bytes,46,opt,name=dns_query_timeout,json=dnsQueryTimeout,proto3" json:"dns_query_timeout,omitempty"`
	// eds_cluster_config contains EDS cluster configuration
	EdsClusterConfig *EdsClusterConfigInfo `protobuf:"bytes,47,opt,name=eds_cluster_config,json=edsClusterConfig,proto3" json:"eds_cluster_config,omitempty"`
	// raw_config contains the raw JSON configuration
	RawConfig string `protobuf:"bytes,48,opt,name=raw_config,json=rawConfig,proto3" json:"raw_config,omitempty"`
	// Parsed cluster name components (format: direction|port|subset|servicefqdn)
	// direction is the traffic direction
	Direction ClusterDirection `protobuf:"varint,49,opt,name=direction,proto3,enum=navigator.backend.v1alpha1.ClusterDirection" json:"direction,omitempty"`
	// port is the service port
	Port uint32 `protobuf:"varint,50,opt,name=port,proto3" json:"port,omitempty"`
	// subset is the destination subset
	Subset string `protobuf:"bytes,51,opt,name=subset,proto3" json:"subset,omitempty"`
	// service_fqdn is the fully qualified domain name of the service
	ServiceFqdn string `protobuf:"bytes,52,opt,name=service_fqdn,json=serviceFqdn,proto3" json:"service_fqdn,omitempty"`
}

func (x *ClusterSummary) Reset() {
	*x = ClusterSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSummary) ProtoMessage() {}

func (x *ClusterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSummary.ProtoReflect.Descriptor instead.
func (*ClusterSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{22}
}

func (x *ClusterSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterSummary) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterSummary) GetConnectTimeout() string {
	if x != nil {
		return x.ConnectTimeout
	}
	return ""
}

func (x *ClusterSummary) GetLoadAssignment() *EndpointConfigInfo {
	if x != nil {
		return x.LoadAssignment
	}
	return nil
}

func (x *ClusterSummary) GetLoadBalancingPolicy() string {
	if x != nil {
		return x.LoadBalancingPolicy
	}
	return ""
}

func (x *ClusterSummary) GetHealthChecks() []*HealthCheckInfo {
	if x != nil {
		return x.HealthChecks
	}
	return nil
}

func (x *ClusterSummary) GetMaxRequestsPerConnection() uint32 {
	if x != nil {
		return x.MaxRequestsPerConnection
	}
	return 0
}

func (x *ClusterSummary) GetHttp2MaxRequests() uint32 {
	if x != nil {
		return x.Http2MaxRequests
	}
	return 0
}

func (x *ClusterSummary) GetHttp2MaxRequestsPerConnection() uint32 {
	if x != nil {
		return x.Http2MaxRequestsPerConnection
	}
	return 0
}

func (x *ClusterSummary) GetHttp2MaxConcurrentStreams() uint32 {
	if x != nil {
		return x.Http2MaxConcurrentStreams
	}
	return 0
}

func (x *ClusterSummary) GetHttp2InitialStreamWindowSize() uint32 {
	if x != nil {
		return x.Http2InitialStreamWindowSize
	}
	return 0
}

func (x *ClusterSummary) GetHttp2InitialConnectionWindowSize() uint32 {
	if x != nil {
		return x.Http2InitialConnectionWindowSize
	}
	return 0
}

func (x *ClusterSummary) GetHttp2MaxFrameSize() uint32 {
	if x != nil {
		return x.Http2MaxFrameSize
	}
	return 0
}

func (x *ClusterSummary) GetHttp2EnableKeepalive() bool {
	if x != nil {
		return x.Http2EnableKeepalive
	}
	return false
}

func (x *ClusterSummary) GetCircuitBreakers() *CircuitBreakersInfo {
	if x != nil {
		return x.CircuitBreakers
	}
	return nil
}

func (x *ClusterSummary) GetTlsContext() *TLSContextInfo {
	if x != nil {
		return x.TlsContext
	}
	return nil
}

func (x *ClusterSummary) GetCommonHttpProtocolOptions() *CommonHttpProtocolOptionsInfo {
	if x != nil {
		return x.CommonHttpProtocolOptions
	}
	return nil
}

func (x *ClusterSummary) GetAltStatName() string {
	if x != nil {
		return x.AltStatName
	}
	return ""
}

func (x *ClusterSummary) GetPerConnectionBufferLimitBytes() uint32 {
	if x != nil {
		return x.PerConnectionBufferLimitBytes
	}
	return 0
}

func (x *ClusterSummary) GetLbPolicy() string {
	if x != nil {
		return x.LbPolicy
	}
	return ""
}

func (x *ClusterSummary) GetHosts() []*HostInfo {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ClusterSummary) GetDrainConnectionsOnHostRemoval() bool {
	if x != nil {
		return x.DrainConnectionsOnHostRemoval
	}
	return false
}

func (x *ClusterSummary) GetWarmingHosts() []*HostInfo {
	if x != nil {
		return x.WarmingHosts
	}
	return nil
}

func (x *ClusterSummary) GetOutlierDetection() *OutlierDetectionInfo {
	if x != nil {
		return x.OutlierDetection
	}
	return nil
}

func (x *ClusterSummary) GetCleanupInterval() string {
	if x != nil {
		return x.CleanupInterval
	}
	return ""
}

func (x *ClusterSummary) GetUpstreamBindConfig() *UpstreamBindConfigInfo {
	if x != nil {
		return x.UpstreamBindConfig
	}
	return nil
}

func (x *ClusterSummary) GetLbSubsetConfig() *LbSubsetConfigInfo {
	if x != nil {
		return x.LbSubsetConfig
	}
	return nil
}

func (x *ClusterSummary) GetRingHashLbConfig() *RingHashLbConfigInfo {
	if x != nil {
		return x.RingHashLbConfig
	}
	return nil
}

func (x *ClusterSummary) GetMaglevLbConfig() *MaglevLbConfigInfo {
	if x != nil {
		return x.MaglevLbConfig
	}
	return nil
}

func (x *ClusterSummary) GetOriginalDstLbConfig() *OriginalDstLbConfigInfo {
	if x != nil {
		return x.OriginalDstLbConfig
	}
	return nil
}

func (x *ClusterSummary) GetLeastRequestLbConfig() *LeastRequestLbConfigInfo {
	if x != nil {
		return x.LeastRequestLbConfig
	}
	return nil
}

func (x *ClusterSummary) GetCommonLbConfig() *CommonLbConfigInfo {
	if x != nil {
		return x.CommonLbConfig
	}
	return nil
}

func (x *ClusterSummary) GetTransportSocket() *TransportSocketInfo {
	if x != nil {
		return x.TransportSocket
	}
	return nil
}

func (x *ClusterSummary) GetProtocolSelection() string {
	if x != nil {
		return x.ProtocolSelection
	}
	return ""
}

func (x *ClusterSummary) GetUpstreamConnectionOptions() *UpstreamConnectionOptionsInfo {
	if x != nil {
		return x.UpstreamConnectionOptions
	}
	return nil
}

func (x *ClusterSummary) GetCloseConnectionsOnHostSetChange() bool {
	if x != nil {
		return x.CloseConnectionsOnHostSetChange
	}
	return false
}

func (x *ClusterSummary) GetIgnoreHealthOnHostRemoval() bool {
	if x != nil {
		return x.IgnoreHealthOnHostRemoval
	}
	return false
}

func (x *ClusterSummary) GetFilters() []*ClusterFilterInfo {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ClusterSummary) GetLrsServer() *ConfigSourceInfo {
	if x != nil {
		return x.LrsServer
	}
	return nil
}

func (x *ClusterSummary) GetDnsLookupFamily() string {
	if x != nil {
		return x.DnsLookupFamily
	}
	return ""
}

func (x *ClusterSummary) GetDnsResolvers() []*DnsResolverInfo {
	if x != nil {
		return x.DnsResolvers
	}
	return nil
}

func (x *ClusterSummary) GetUseTcpForDnsLookups() bool {
	if x != nil {
		return x.UseTcpForDnsLookups
	}
	return false
}

func (x *ClusterSummary) GetDnsFailureRefreshRate() *RefreshRateInfo {
	if x != nil {
		return x.DnsFailureRefreshRate
	}
	return nil
}

func (x *ClusterSummary) GetRespectDnsTtl() bool {
	if x != nil {
		return x.RespectDnsTtl
	}
	return false
}

func (x *ClusterSummary) GetDnsRefreshRate() string {
	if x != nil {
		return x.DnsRefreshRate
	}
	return ""
}

func (x *ClusterSummary) GetDnsQueryTimeout() string {
	if x != nil {
		return x.DnsQueryTimeout
	}
	return ""
}

func (x *ClusterSummary) GetEdsClusterConfig() *EdsClusterConfigInfo {
	if x != nil {
		return x.EdsClusterConfig
	}
	return nil
}

func (x *ClusterSummary) GetRawConfig() string {
	if x != nil {
		return x.RawConfig
	}
	return ""
}

func (x *ClusterSummary) GetDirection() ClusterDirection {
	if x != nil {
		return x.Direction
	}
	return ClusterDirection_UNSPECIFIED
}

func (x *ClusterSummary) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClusterSummary) GetSubset() string {
	if x != nil {
		return x.Subset
	}
	return ""
}

func (x *ClusterSummary) GetServiceFqdn() string {
	if x != nil {
		return x.ServiceFqdn
	}
	return ""
}

// EndpointSummary contains endpoint configuration information
type EndpointSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_name is the name of the cluster
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// endpoints contains endpoint information
	Endpoints []*EndpointInfo `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// cluster_type is the type of cluster (EDS, STATIC, STRICT_DNS, etc.)
	ClusterType ClusterType `protobuf:"varint,3,opt,name=cluster_type,json=clusterType,proto3,enum=navigator.backend.v1alpha1.ClusterType" json:"cluster_type,omitempty"`
	// direction is the traffic direction (inbound/outbound)
	Direction ClusterDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=navigator.backend.v1alpha1.ClusterDirection" json:"direction,omitempty"`
	// port is the port number parsed from cluster name
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// subset is the subset name parsed from cluster name
	Subset string `protobuf:"bytes,6,opt,name=subset,proto3" json:"subset,omitempty"`
	// service_fqdn is the fully qualified domain name of the service
	ServiceFqdn string `protobuf:"bytes,7,opt,name=service_fqdn,json=serviceFqdn,proto3" json:"service_fqdn,omitempty"`
}

func (x *EndpointSummary) Reset() {
	*x = EndpointSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointSummary) ProtoMessage() {}

func (x *EndpointSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointSummary.ProtoReflect.Descriptor instead.
func (*EndpointSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{23}
}

func (x *EndpointSummary) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EndpointSummary) GetEndpoints() []*EndpointInfo {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *EndpointSummary) GetClusterType() ClusterType {
	if x != nil {
		return x.ClusterType
	}
	return ClusterType_UNKNOWN_CLUSTER_TYPE
}

func (x *EndpointSummary) GetDirection() ClusterDirection {
	if x != nil {
		return x.Direction
	}
	return ClusterDirection_UNSPECIFIED
}

func (x *EndpointSummary) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EndpointSummary) GetSubset() string {
	if x != nil {
		return x.Subset
	}
	return ""
}

func (x *EndpointSummary) GetServiceFqdn() string {
	if x != nil {
		return x.ServiceFqdn
	}
	return ""
}

// EndpointInfo contains individual endpoint information
type EndpointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the endpoint address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// port is the endpoint port
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// health is the health status
	Health string `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`
	// weight is the load balancing weight
	Weight uint32 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	// priority is the endpoint priority
	Priority uint32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	// host_identifier is the unique host identifier
	HostIdentifier string `protobuf:"bytes,6,opt,name=host_identifier,json=hostIdentifier,proto3" json:"host_identifier,omitempty"`
	// metadata contains endpoint metadata as key-value pairs
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// load_balancing_weight is the load balancing weight
	LoadBalancingWeight uint32 `protobuf:"varint,8,opt,name=load_balancing_weight,json=loadBalancingWeight,proto3" json:"load_balancing_weight,omitempty"`
}

func (x *EndpointInfo) Reset() {
	*x = EndpointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointInfo) ProtoMessage() {}

func (x *EndpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointInfo.ProtoReflect.Descriptor instead.
func (*EndpointInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{24}
}

func (x *EndpointInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EndpointInfo) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EndpointInfo) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *EndpointInfo) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *EndpointInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *EndpointInfo) GetHostIdentifier() string {
	if x != nil {
		return x.HostIdentifier
	}
	return ""
}

func (x *EndpointInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EndpointInfo) GetLoadBalancingWeight() uint32 {
	if x != nil {
		return x.LoadBalancingWeight
	}
	return 0
}

// RouteConfigSummary contains route configuration summary
type RouteConfigSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the route configuration name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// virtual_hosts contains virtual hosts
	VirtualHosts []*VirtualHostInfo `protobuf:"bytes,2,rep,name=virtual_hosts,json=virtualHosts,proto3" json:"virtual_hosts,omitempty"`
	// internal_only_headers contains headers that are internal only
	InternalOnlyHeaders []string `protobuf:"bytes,3,rep,name=internal_only_headers,json=internalOnlyHeaders,proto3" json:"internal_only_headers,omitempty"`
	// response_headers_to_add contains headers to add to responses
	ResponseHeadersToAdd []*HeaderValueOption `protobuf:"bytes,4,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// response_headers_to_remove contains headers to remove from responses
	ResponseHeadersToRemove []string `protobuf:"bytes,5,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// request_headers_to_add contains headers to add to requests
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// request_headers_to_remove contains headers to remove from requests
	RequestHeadersToRemove []string `protobuf:"bytes,7,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// most_specific_header_mutations_wins indicates if most specific header mutations win
	MostSpecificHeaderMutationsWins bool `protobuf:"varint,8,opt,name=most_specific_header_mutations_wins,json=mostSpecificHeaderMutationsWins,proto3" json:"most_specific_header_mutations_wins,omitempty"`
	// validate_clusters indicates if clusters should be validated
	ValidateClusters bool `protobuf:"varint,9,opt,name=validate_clusters,json=validateClusters,proto3" json:"validate_clusters,omitempty"`
	// max_direct_response_body_size_bytes is the maximum direct response body size
	MaxDirectResponseBodySizeBytes uint32 `protobuf:"varint,10,opt,name=max_direct_response_body_size_bytes,json=maxDirectResponseBodySizeBytes,proto3" json:"max_direct_response_body_size_bytes,omitempty"`
	// cluster_specifier_plugins contains cluster specifier plugin configuration
	ClusterSpecifierPlugins []*ClusterSpecifierPluginInfo `protobuf:"bytes,11,rep,name=cluster_specifier_plugins,json=clusterSpecifierPlugins,proto3" json:"cluster_specifier_plugins,omitempty"`
	// raw_config contains the raw route configuration in JSON format
	RawConfig string `protobuf:"bytes,12,opt,name=raw_config,json=rawConfig,proto3" json:"raw_config,omitempty"`
	// type indicates the route type category
	Type RouteType `protobuf:"varint,13,opt,name=type,proto3,enum=navigator.backend.v1alpha1.RouteType" json:"type,omitempty"`
}

func (x *RouteConfigSummary) Reset() {
	*x = RouteConfigSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteConfigSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConfigSummary) ProtoMessage() {}

func (x *RouteConfigSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConfigSummary.ProtoReflect.Descriptor instead.
func (*RouteConfigSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{25}
}

func (x *RouteConfigSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteConfigSummary) GetVirtualHosts() []*VirtualHostInfo {
	if x != nil {
		return x.VirtualHosts
	}
	return nil
}

func (x *RouteConfigSummary) GetInternalOnlyHeaders() []string {
	if x != nil {
		return x.InternalOnlyHeaders
	}
	return nil
}

func (x *RouteConfigSummary) GetResponseHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.ResponseHeadersToAdd
	}
	return nil
}

func (x *RouteConfigSummary) GetResponseHeadersToRemove() []string {
	if x != nil {
		return x.ResponseHeadersToRemove
	}
	return nil
}

func (x *RouteConfigSummary) GetRequestHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *RouteConfigSummary) GetRequestHeadersToRemove() []string {
	if x != nil {
		return x.RequestHeadersToRemove
	}
	return nil
}

func (x *RouteConfigSummary) GetMostSpecificHeaderMutationsWins() bool {
	if x != nil {
		return x.MostSpecificHeaderMutationsWins
	}
	return false
}

func (x *RouteConfigSummary) GetValidateClusters() bool {
	if x != nil {
		return x.ValidateClusters
	}
	return false
}

func (x *RouteConfigSummary) GetMaxDirectResponseBodySizeBytes() uint32 {
	if x != nil {
		return x.MaxDirectResponseBodySizeBytes
	}
	return 0
}

func (x *RouteConfigSummary) GetClusterSpecifierPlugins() []*ClusterSpecifierPluginInfo {
	if x != nil {
		return x.ClusterSpecifierPlugins
	}
	return nil
}

func (x *RouteConfigSummary) GetRawConfig() string {
	if x != nil {
		return x.RawConfig
	}
	return ""
}

func (x *RouteConfigSummary) GetType() RouteType {
	if x != nil {
		return x.Type
	}
	return RouteType_PORT_BASED
}

// HeaderValueOption contains header value configuration
type HeaderValueOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header contains the header information
	Header *HeaderInfo `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// append indicates if the header should be appended
	Append bool `protobuf:"varint,2,opt,name=append,proto3" json:"append,omitempty"`
	// keep_empty_value indicates if empty values should be kept
	KeepEmptyValue bool `protobuf:"varint,3,opt,name=keep_empty_value,json=keepEmptyValue,proto3" json:"keep_empty_value,omitempty"`
}

func (x *HeaderValueOption) Reset() {
	*x = HeaderValueOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderValueOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValueOption) ProtoMessage() {}

func (x *HeaderValueOption) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValueOption.ProtoReflect.Descriptor instead.
func (*HeaderValueOption) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{26}
}

func (x *HeaderValueOption) GetHeader() *HeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HeaderValueOption) GetAppend() bool {
	if x != nil {
		return x.Append
	}
	return false
}

func (x *HeaderValueOption) GetKeepEmptyValue() bool {
	if x != nil {
		return x.KeepEmptyValue
	}
	return false
}

// HeaderInfo contains header information
type HeaderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the header key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the header value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HeaderInfo) Reset() {
	*x = HeaderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderInfo) ProtoMessage() {}

func (x *HeaderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderInfo.ProtoReflect.Descriptor instead.
func (*HeaderInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{27}
}

func (x *HeaderInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HeaderInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// WeightedClusterInfo contains weighted cluster information
type WeightedClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the cluster name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// weight is the cluster weight
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// metadata_match contains metadata for matching
	MetadataMatch map[string]string `protobuf:"bytes,3,rep,name=metadata_match,json=metadataMatch,proto3" json:"metadata_match,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// request_headers_to_add contains headers to add to requests
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,4,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// request_headers_to_remove contains headers to remove from requests
	RequestHeadersToRemove []string `protobuf:"bytes,5,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// response_headers_to_add contains headers to add to responses
	ResponseHeadersToAdd []*HeaderValueOption `protobuf:"bytes,6,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// response_headers_to_remove contains headers to remove from responses
	ResponseHeadersToRemove []string `protobuf:"bytes,7,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// host_rewrite_specifier indicates how host rewriting is done
	HostRewriteSpecifier string `protobuf:"bytes,8,opt,name=host_rewrite_specifier,json=hostRewriteSpecifier,proto3" json:"host_rewrite_specifier,omitempty"`
}

func (x *WeightedClusterInfo) Reset() {
	*x = WeightedClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedClusterInfo) ProtoMessage() {}

func (x *WeightedClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedClusterInfo.ProtoReflect.Descriptor instead.
func (*WeightedClusterInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{28}
}

func (x *WeightedClusterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeightedClusterInfo) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WeightedClusterInfo) GetMetadataMatch() map[string]string {
	if x != nil {
		return x.MetadataMatch
	}
	return nil
}

func (x *WeightedClusterInfo) GetRequestHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *WeightedClusterInfo) GetRequestHeadersToRemove() []string {
	if x != nil {
		return x.RequestHeadersToRemove
	}
	return nil
}

func (x *WeightedClusterInfo) GetResponseHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.ResponseHeadersToAdd
	}
	return nil
}

func (x *WeightedClusterInfo) GetResponseHeadersToRemove() []string {
	if x != nil {
		return x.ResponseHeadersToRemove
	}
	return nil
}

func (x *WeightedClusterInfo) GetHostRewriteSpecifier() string {
	if x != nil {
		return x.HostRewriteSpecifier
	}
	return ""
}

// RegexRewriteInfo contains regex rewrite information
type RegexRewriteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pattern is the regex pattern
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// substitution is the substitution string
	Substitution string `protobuf:"bytes,2,opt,name=substitution,proto3" json:"substitution,omitempty"`
}

func (x *RegexRewriteInfo) Reset() {
	*x = RegexRewriteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexRewriteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexRewriteInfo) ProtoMessage() {}

func (x *RegexRewriteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexRewriteInfo.ProtoReflect.Descriptor instead.
func (*RegexRewriteInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{29}
}

func (x *RegexRewriteInfo) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RegexRewriteInfo) GetSubstitution() string {
	if x != nil {
		return x.Substitution
	}
	return ""
}

// RuntimeFractionInfo contains runtime fraction information
type RuntimeFractionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value contains the default fraction value
	DefaultValue *FractionInfo `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// runtime_key is the runtime key
	RuntimeKey string `protobuf:"bytes,2,opt,name=runtime_key,json=runtimeKey,proto3" json:"runtime_key,omitempty"`
}

func (x *RuntimeFractionInfo) Reset() {
	*x = RuntimeFractionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeFractionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeFractionInfo) ProtoMessage() {}

func (x *RuntimeFractionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeFractionInfo.ProtoReflect.Descriptor instead.
func (*RuntimeFractionInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{30}
}

func (x *RuntimeFractionInfo) GetDefaultValue() *FractionInfo {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *RuntimeFractionInfo) GetRuntimeKey() string {
	if x != nil {
		return x.RuntimeKey
	}
	return ""
}

// FractionInfo contains fraction information
type FractionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// numerator is the fraction numerator
	Numerator uint32 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// denominator is the fraction denominator
	Denominator string `protobuf:"bytes,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *FractionInfo) Reset() {
	*x = FractionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FractionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FractionInfo) ProtoMessage() {}

func (x *FractionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FractionInfo.ProtoReflect.Descriptor instead.
func (*FractionInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{31}
}

func (x *FractionInfo) GetNumerator() uint32 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *FractionInfo) GetDenominator() string {
	if x != nil {
		return x.Denominator
	}
	return ""
}

// HeaderMatcherInfo contains header matching information
type HeaderMatcherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the header name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// present_match indicates presence matching
	PresentMatch bool `protobuf:"varint,2,opt,name=present_match,json=presentMatch,proto3" json:"present_match,omitempty"`
	// exact_match contains exact match value
	ExactMatch string `protobuf:"bytes,3,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
	// safe_regex_match contains regex match pattern
	SafeRegexMatch string `protobuf:"bytes,4,opt,name=safe_regex_match,json=safeRegexMatch,proto3" json:"safe_regex_match,omitempty"`
	// range_match contains range matching criteria
	RangeMatch *RangeMatchInfo `protobuf:"bytes,5,opt,name=range_match,json=rangeMatch,proto3" json:"range_match,omitempty"`
	// prefix_match contains prefix match value
	PrefixMatch string `protobuf:"bytes,6,opt,name=prefix_match,json=prefixMatch,proto3" json:"prefix_match,omitempty"`
	// suffix_match contains suffix match value
	SuffixMatch string `protobuf:"bytes,7,opt,name=suffix_match,json=suffixMatch,proto3" json:"suffix_match,omitempty"`
	// contains_match contains substring match value
	ContainsMatch string `protobuf:"bytes,8,opt,name=contains_match,json=containsMatch,proto3" json:"contains_match,omitempty"`
	// invert_match indicates if the match should be inverted
	InvertMatch bool `protobuf:"varint,9,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	// treat_missing_as_empty indicates if missing headers are treated as empty
	TreatMissingAsEmpty bool `protobuf:"varint,10,opt,name=treat_missing_as_empty,json=treatMissingAsEmpty,proto3" json:"treat_missing_as_empty,omitempty"`
}

func (x *HeaderMatcherInfo) Reset() {
	*x = HeaderMatcherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderMatcherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderMatcherInfo) ProtoMessage() {}

func (x *HeaderMatcherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderMatcherInfo.ProtoReflect.Descriptor instead.
func (*HeaderMatcherInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{32}
}

func (x *HeaderMatcherInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HeaderMatcherInfo) GetPresentMatch() bool {
	if x != nil {
		return x.PresentMatch
	}
	return false
}

func (x *HeaderMatcherInfo) GetExactMatch() string {
	if x != nil {
		return x.ExactMatch
	}
	return ""
}

func (x *HeaderMatcherInfo) GetSafeRegexMatch() string {
	if x != nil {
		return x.SafeRegexMatch
	}
	return ""
}

func (x *HeaderMatcherInfo) GetRangeMatch() *RangeMatchInfo {
	if x != nil {
		return x.RangeMatch
	}
	return nil
}

func (x *HeaderMatcherInfo) GetPrefixMatch() string {
	if x != nil {
		return x.PrefixMatch
	}
	return ""
}

func (x *HeaderMatcherInfo) GetSuffixMatch() string {
	if x != nil {
		return x.SuffixMatch
	}
	return ""
}

func (x *HeaderMatcherInfo) GetContainsMatch() string {
	if x != nil {
		return x.ContainsMatch
	}
	return ""
}

func (x *HeaderMatcherInfo) GetInvertMatch() bool {
	if x != nil {
		return x.InvertMatch
	}
	return false
}

func (x *HeaderMatcherInfo) GetTreatMissingAsEmpty() bool {
	if x != nil {
		return x.TreatMissingAsEmpty
	}
	return false
}

// RangeMatchInfo contains range matching information
type RangeMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start is the range start
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// end is the range end
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *RangeMatchInfo) Reset() {
	*x = RangeMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeMatchInfo) ProtoMessage() {}

func (x *RangeMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeMatchInfo.ProtoReflect.Descriptor instead.
func (*RangeMatchInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{33}
}

func (x *RangeMatchInfo) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RangeMatchInfo) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// QueryParameterMatcherInfo contains query parameter matching information
type QueryParameterMatcherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the parameter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// string_match contains string matching criteria
	StringMatch string `protobuf:"bytes,2,opt,name=string_match,json=stringMatch,proto3" json:"string_match,omitempty"`
	// present_match indicates presence matching
	PresentMatch bool `protobuf:"varint,3,opt,name=present_match,json=presentMatch,proto3" json:"present_match,omitempty"`
}

func (x *QueryParameterMatcherInfo) Reset() {
	*x = QueryParameterMatcherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameterMatcherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterMatcherInfo) ProtoMessage() {}

func (x *QueryParameterMatcherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterMatcherInfo.ProtoReflect.Descriptor instead.
func (*QueryParameterMatcherInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{34}
}

func (x *QueryParameterMatcherInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryParameterMatcherInfo) GetStringMatch() string {
	if x != nil {
		return x.StringMatch
	}
	return ""
}

func (x *QueryParameterMatcherInfo) GetPresentMatch() bool {
	if x != nil {
		return x.PresentMatch
	}
	return false
}

// GrpcRouteMatchInfo contains gRPC route matching information
type GrpcRouteMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GrpcRouteMatchInfo) Reset() {
	*x = GrpcRouteMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcRouteMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRouteMatchInfo) ProtoMessage() {}

func (x *GrpcRouteMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRouteMatchInfo.ProtoReflect.Descriptor instead.
func (*GrpcRouteMatchInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{35}
}

// TlsContextMatchInfo contains TLS context matching information
type TlsContextMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TlsContextMatchInfo) Reset() {
	*x = TlsContextMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsContextMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsContextMatchInfo) ProtoMessage() {}

func (x *TlsContextMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsContextMatchInfo.ProtoReflect.Descriptor instead.
func (*TlsContextMatchInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{36}
}

// MetadataMatcherInfo contains metadata matching information
type MetadataMatcherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter is the metadata filter
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// path contains the metadata path
	Path []*MetadataMatchPathInfo `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	// value is the metadata value
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MetadataMatcherInfo) Reset() {
	*x = MetadataMatcherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataMatcherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataMatcherInfo) ProtoMessage() {}

func (x *MetadataMatcherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataMatcherInfo.ProtoReflect.Descriptor instead.
func (*MetadataMatcherInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{37}
}

func (x *MetadataMatcherInfo) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *MetadataMatcherInfo) GetPath() []*MetadataMatchPathInfo {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *MetadataMatcherInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// MetadataMatchPathInfo contains metadata match path information
type MetadataMatchPathInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the path key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MetadataMatchPathInfo) Reset() {
	*x = MetadataMatchPathInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataMatchPathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataMatchPathInfo) ProtoMessage() {}

func (x *MetadataMatchPathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataMatchPathInfo.ProtoReflect.Descriptor instead.
func (*MetadataMatchPathInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{38}
}

func (x *MetadataMatchPathInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// DecoratorInfo contains decorator information
type DecoratorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operation is the operation name
	Operation string `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// propagate indicates if the decorator should propagate
	Propagate bool `protobuf:"varint,2,opt,name=propagate,proto3" json:"propagate,omitempty"`
}

func (x *DecoratorInfo) Reset() {
	*x = DecoratorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecoratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecoratorInfo) ProtoMessage() {}

func (x *DecoratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecoratorInfo.ProtoReflect.Descriptor instead.
func (*DecoratorInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{39}
}

func (x *DecoratorInfo) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *DecoratorInfo) GetPropagate() bool {
	if x != nil {
		return x.Propagate
	}
	return false
}

// TracingInfo contains tracing information
type TracingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client_sampling contains client sampling configuration
	ClientSampling *FractionInfo `protobuf:"bytes,1,opt,name=client_sampling,json=clientSampling,proto3" json:"client_sampling,omitempty"`
	// random_sampling contains random sampling configuration
	RandomSampling *FractionInfo `protobuf:"bytes,2,opt,name=random_sampling,json=randomSampling,proto3" json:"random_sampling,omitempty"`
	// overall_sampling contains overall sampling configuration
	OverallSampling *FractionInfo `protobuf:"bytes,3,opt,name=overall_sampling,json=overallSampling,proto3" json:"overall_sampling,omitempty"`
	// verbose indicates if verbose tracing is enabled
	Verbose bool `protobuf:"varint,4,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// max_path_tag_length is the maximum path tag length
	MaxPathTagLength uint32 `protobuf:"varint,5,opt,name=max_path_tag_length,json=maxPathTagLength,proto3" json:"max_path_tag_length,omitempty"`
	// custom_tags contains custom tag configuration
	CustomTags []*CustomTagInfo `protobuf:"bytes,6,rep,name=custom_tags,json=customTags,proto3" json:"custom_tags,omitempty"`
}

func (x *TracingInfo) Reset() {
	*x = TracingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingInfo) ProtoMessage() {}

func (x *TracingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingInfo.ProtoReflect.Descriptor instead.
func (*TracingInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{40}
}

func (x *TracingInfo) GetClientSampling() *FractionInfo {
	if x != nil {
		return x.ClientSampling
	}
	return nil
}

func (x *TracingInfo) GetRandomSampling() *FractionInfo {
	if x != nil {
		return x.RandomSampling
	}
	return nil
}

func (x *TracingInfo) GetOverallSampling() *FractionInfo {
	if x != nil {
		return x.OverallSampling
	}
	return nil
}

func (x *TracingInfo) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *TracingInfo) GetMaxPathTagLength() uint32 {
	if x != nil {
		return x.MaxPathTagLength
	}
	return 0
}

func (x *TracingInfo) GetCustomTags() []*CustomTagInfo {
	if x != nil {
		return x.CustomTags
	}
	return nil
}

// CustomTagInfo contains custom tag information
type CustomTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag is the tag name
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// request_header is the request header to use
	RequestHeader string `protobuf:"bytes,2,opt,name=request_header,json=requestHeader,proto3" json:"request_header,omitempty"`
	// response_header is the response header to use
	ResponseHeader string `protobuf:"bytes,3,opt,name=response_header,json=responseHeader,proto3" json:"response_header,omitempty"`
	// environment is the environment variable to use
	Environment string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	// literal is the literal value to use
	Literal string `protobuf:"bytes,5,opt,name=literal,proto3" json:"literal,omitempty"`
	// request_header_to_add is the request header to add
	RequestHeaderToAdd string `protobuf:"bytes,6,opt,name=request_header_to_add,json=requestHeaderToAdd,proto3" json:"request_header_to_add,omitempty"`
	// response_header_to_add is the response header to add
	ResponseHeaderToAdd string `protobuf:"bytes,7,opt,name=response_header_to_add,json=responseHeaderToAdd,proto3" json:"response_header_to_add,omitempty"`
}

func (x *CustomTagInfo) Reset() {
	*x = CustomTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTagInfo) ProtoMessage() {}

func (x *CustomTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTagInfo.ProtoReflect.Descriptor instead.
func (*CustomTagInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{41}
}

func (x *CustomTagInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CustomTagInfo) GetRequestHeader() string {
	if x != nil {
		return x.RequestHeader
	}
	return ""
}

func (x *CustomTagInfo) GetResponseHeader() string {
	if x != nil {
		return x.ResponseHeader
	}
	return ""
}

func (x *CustomTagInfo) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *CustomTagInfo) GetLiteral() string {
	if x != nil {
		return x.Literal
	}
	return ""
}

func (x *CustomTagInfo) GetRequestHeaderToAdd() string {
	if x != nil {
		return x.RequestHeaderToAdd
	}
	return ""
}

func (x *CustomTagInfo) GetResponseHeaderToAdd() string {
	if x != nil {
		return x.ResponseHeaderToAdd
	}
	return ""
}

// RetryPolicyInfo contains retry policy information
type RetryPolicyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// retry_on contains retry conditions
	RetryOn string `protobuf:"bytes,1,opt,name=retry_on,json=retryOn,proto3" json:"retry_on,omitempty"`
	// num_retries is the number of retries
	NumRetries uint32 `protobuf:"varint,2,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
	// per_try_timeout is the timeout per try
	PerTryTimeout string `protobuf:"bytes,3,opt,name=per_try_timeout,json=perTryTimeout,proto3" json:"per_try_timeout,omitempty"`
	// retry_priority is the retry priority
	RetryPriority string `protobuf:"bytes,4,opt,name=retry_priority,json=retryPriority,proto3" json:"retry_priority,omitempty"`
	// retry_host_predicate contains retry host predicates
	RetryHostPredicate []string `protobuf:"bytes,5,rep,name=retry_host_predicate,json=retryHostPredicate,proto3" json:"retry_host_predicate,omitempty"`
	// host_selection_retry_max_attempts is the maximum host selection retry attempts
	HostSelectionRetryMaxAttempts int64 `protobuf:"varint,6,opt,name=host_selection_retry_max_attempts,json=hostSelectionRetryMaxAttempts,proto3" json:"host_selection_retry_max_attempts,omitempty"`
	// retriable_status_codes contains retriable status codes
	RetriableStatusCodes []uint32 `protobuf:"varint,7,rep,packed,name=retriable_status_codes,json=retriableStatusCodes,proto3" json:"retriable_status_codes,omitempty"`
	// retry_back_off contains retry backoff configuration
	RetryBackOff *RetryBackOffInfo `protobuf:"bytes,8,opt,name=retry_back_off,json=retryBackOff,proto3" json:"retry_back_off,omitempty"`
	// retriable_headers contains retriable header matching
	RetriableHeaders []*HeaderMatcherInfo `protobuf:"bytes,9,rep,name=retriable_headers,json=retriableHeaders,proto3" json:"retriable_headers,omitempty"`
	// retriable_request_headers contains retriable request header matching
	RetriableRequestHeaders []*HeaderMatcherInfo `protobuf:"bytes,10,rep,name=retriable_request_headers,json=retriableRequestHeaders,proto3" json:"retriable_request_headers,omitempty"`
}

func (x *RetryPolicyInfo) Reset() {
	*x = RetryPolicyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyInfo) ProtoMessage() {}

func (x *RetryPolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyInfo.ProtoReflect.Descriptor instead.
func (*RetryPolicyInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{42}
}

func (x *RetryPolicyInfo) GetRetryOn() string {
	if x != nil {
		return x.RetryOn
	}
	return ""
}

func (x *RetryPolicyInfo) GetNumRetries() uint32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

func (x *RetryPolicyInfo) GetPerTryTimeout() string {
	if x != nil {
		return x.PerTryTimeout
	}
	return ""
}

func (x *RetryPolicyInfo) GetRetryPriority() string {
	if x != nil {
		return x.RetryPriority
	}
	return ""
}

func (x *RetryPolicyInfo) GetRetryHostPredicate() []string {
	if x != nil {
		return x.RetryHostPredicate
	}
	return nil
}

func (x *RetryPolicyInfo) GetHostSelectionRetryMaxAttempts() int64 {
	if x != nil {
		return x.HostSelectionRetryMaxAttempts
	}
	return 0
}

func (x *RetryPolicyInfo) GetRetriableStatusCodes() []uint32 {
	if x != nil {
		return x.RetriableStatusCodes
	}
	return nil
}

func (x *RetryPolicyInfo) GetRetryBackOff() *RetryBackOffInfo {
	if x != nil {
		return x.RetryBackOff
	}
	return nil
}

func (x *RetryPolicyInfo) GetRetriableHeaders() []*HeaderMatcherInfo {
	if x != nil {
		return x.RetriableHeaders
	}
	return nil
}

func (x *RetryPolicyInfo) GetRetriableRequestHeaders() []*HeaderMatcherInfo {
	if x != nil {
		return x.RetriableRequestHeaders
	}
	return nil
}

// RetryBackOffInfo contains retry backoff information
type RetryBackOffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base_interval is the base interval
	BaseInterval string `protobuf:"bytes,1,opt,name=base_interval,json=baseInterval,proto3" json:"base_interval,omitempty"`
	// max_interval is the maximum interval
	MaxInterval string `protobuf:"bytes,2,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
}

func (x *RetryBackOffInfo) Reset() {
	*x = RetryBackOffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryBackOffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryBackOffInfo) ProtoMessage() {}

func (x *RetryBackOffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryBackOffInfo.ProtoReflect.Descriptor instead.
func (*RetryBackOffInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{43}
}

func (x *RetryBackOffInfo) GetBaseInterval() string {
	if x != nil {
		return x.BaseInterval
	}
	return ""
}

func (x *RetryBackOffInfo) GetMaxInterval() string {
	if x != nil {
		return x.MaxInterval
	}
	return ""
}

// RequestMirrorPolicy contains request mirror policy information
type RequestMirrorPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster is the mirror cluster
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// runtime_fraction contains runtime fraction configuration
	RuntimeFraction *RuntimeFractionInfo `protobuf:"bytes,2,opt,name=runtime_fraction,json=runtimeFraction,proto3" json:"runtime_fraction,omitempty"`
	// trace_sampled indicates if trace sampling is enabled
	TraceSampled bool `protobuf:"varint,3,opt,name=trace_sampled,json=traceSampled,proto3" json:"trace_sampled,omitempty"`
}

func (x *RequestMirrorPolicy) Reset() {
	*x = RequestMirrorPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMirrorPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMirrorPolicy) ProtoMessage() {}

func (x *RequestMirrorPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMirrorPolicy.ProtoReflect.Descriptor instead.
func (*RequestMirrorPolicy) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{44}
}

func (x *RequestMirrorPolicy) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *RequestMirrorPolicy) GetRuntimeFraction() *RuntimeFractionInfo {
	if x != nil {
		return x.RuntimeFraction
	}
	return nil
}

func (x *RequestMirrorPolicy) GetTraceSampled() bool {
	if x != nil {
		return x.TraceSampled
	}
	return false
}

// RateLimitInfo contains rate limiting information
type RateLimitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stage is the rate limit stage
	Stage uint32 `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`
	// disable_key is the disable key
	DisableKey string `protobuf:"bytes,2,opt,name=disable_key,json=disableKey,proto3" json:"disable_key,omitempty"`
	// actions contains rate limit actions
	Actions []*RateLimitActionInfo `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	// limit contains rate limit descriptor
	Limit *RateLimitDescriptorInfo `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *RateLimitInfo) Reset() {
	*x = RateLimitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitInfo) ProtoMessage() {}

func (x *RateLimitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitInfo.ProtoReflect.Descriptor instead.
func (*RateLimitInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{45}
}

func (x *RateLimitInfo) GetStage() uint32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *RateLimitInfo) GetDisableKey() string {
	if x != nil {
		return x.DisableKey
	}
	return ""
}

func (x *RateLimitInfo) GetActions() []*RateLimitActionInfo {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RateLimitInfo) GetLimit() *RateLimitDescriptorInfo {
	if x != nil {
		return x.Limit
	}
	return nil
}

// RateLimitActionInfo contains rate limit action information
type RateLimitActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// action_specifier indicates the type of action
	ActionSpecifier string `protobuf:"bytes,1,opt,name=action_specifier,json=actionSpecifier,proto3" json:"action_specifier,omitempty"`
	// source_cluster indicates if source cluster is used
	SourceCluster bool `protobuf:"varint,2,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// destination_cluster indicates if destination cluster is used
	DestinationCluster bool `protobuf:"varint,3,opt,name=destination_cluster,json=destinationCluster,proto3" json:"destination_cluster,omitempty"`
	// request_headers contains request header action
	RequestHeaders *RequestHeadersInfo `protobuf:"bytes,4,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	// remote_address indicates if remote address is used
	RemoteAddress bool `protobuf:"varint,5,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	// generic_key contains generic key action
	GenericKey *GenericKeyInfo `protobuf:"bytes,6,opt,name=generic_key,json=genericKey,proto3" json:"generic_key,omitempty"`
	// header_value_match contains header value match action
	HeaderValueMatch *HeaderValueMatchInfo `protobuf:"bytes,7,opt,name=header_value_match,json=headerValueMatch,proto3" json:"header_value_match,omitempty"`
	// dynamic_metadata contains dynamic metadata action
	DynamicMetadata *DynamicMetadataInfo `protobuf:"bytes,8,opt,name=dynamic_metadata,json=dynamicMetadata,proto3" json:"dynamic_metadata,omitempty"`
	// metadata contains metadata action
	Metadata *MetadataInfo `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// extension contains extension action
	Extension *ExtensionInfo `protobuf:"bytes,10,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RateLimitActionInfo) Reset() {
	*x = RateLimitActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitActionInfo) ProtoMessage() {}

func (x *RateLimitActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitActionInfo.ProtoReflect.Descriptor instead.
func (*RateLimitActionInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{46}
}

func (x *RateLimitActionInfo) GetActionSpecifier() string {
	if x != nil {
		return x.ActionSpecifier
	}
	return ""
}

func (x *RateLimitActionInfo) GetSourceCluster() bool {
	if x != nil {
		return x.SourceCluster
	}
	return false
}

func (x *RateLimitActionInfo) GetDestinationCluster() bool {
	if x != nil {
		return x.DestinationCluster
	}
	return false
}

func (x *RateLimitActionInfo) GetRequestHeaders() *RequestHeadersInfo {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *RateLimitActionInfo) GetRemoteAddress() bool {
	if x != nil {
		return x.RemoteAddress
	}
	return false
}

func (x *RateLimitActionInfo) GetGenericKey() *GenericKeyInfo {
	if x != nil {
		return x.GenericKey
	}
	return nil
}

func (x *RateLimitActionInfo) GetHeaderValueMatch() *HeaderValueMatchInfo {
	if x != nil {
		return x.HeaderValueMatch
	}
	return nil
}

func (x *RateLimitActionInfo) GetDynamicMetadata() *DynamicMetadataInfo {
	if x != nil {
		return x.DynamicMetadata
	}
	return nil
}

func (x *RateLimitActionInfo) GetMetadata() *MetadataInfo {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RateLimitActionInfo) GetExtension() *ExtensionInfo {
	if x != nil {
		return x.Extension
	}
	return nil
}

// RateLimitDescriptorInfo contains rate limit descriptor information
type RateLimitDescriptorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// entries contains descriptor entries
	Entries []*RateLimitDescriptorEntryInfo `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *RateLimitDescriptorInfo) Reset() {
	*x = RateLimitDescriptorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitDescriptorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitDescriptorInfo) ProtoMessage() {}

func (x *RateLimitDescriptorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitDescriptorInfo.ProtoReflect.Descriptor instead.
func (*RateLimitDescriptorInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{47}
}

func (x *RateLimitDescriptorInfo) GetEntries() []*RateLimitDescriptorEntryInfo {
	if x != nil {
		return x.Entries
	}
	return nil
}

// RateLimitDescriptorEntryInfo contains rate limit descriptor entry information
type RateLimitDescriptorEntryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the descriptor key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the descriptor value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RateLimitDescriptorEntryInfo) Reset() {
	*x = RateLimitDescriptorEntryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitDescriptorEntryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitDescriptorEntryInfo) ProtoMessage() {}

func (x *RateLimitDescriptorEntryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitDescriptorEntryInfo.ProtoReflect.Descriptor instead.
func (*RateLimitDescriptorEntryInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{48}
}

func (x *RateLimitDescriptorEntryInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RateLimitDescriptorEntryInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// RequestHeadersInfo contains request headers information
type RequestHeadersInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header_name is the header name
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// descriptor_key is the descriptor key
	DescriptorKey string `protobuf:"bytes,2,opt,name=descriptor_key,json=descriptorKey,proto3" json:"descriptor_key,omitempty"`
	// skip_if_absent indicates if the action should be skipped if header is absent
	SkipIfAbsent bool `protobuf:"varint,3,opt,name=skip_if_absent,json=skipIfAbsent,proto3" json:"skip_if_absent,omitempty"`
}

func (x *RequestHeadersInfo) Reset() {
	*x = RequestHeadersInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeadersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeadersInfo) ProtoMessage() {}

func (x *RequestHeadersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeadersInfo.ProtoReflect.Descriptor instead.
func (*RequestHeadersInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{49}
}

func (x *RequestHeadersInfo) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *RequestHeadersInfo) GetDescriptorKey() string {
	if x != nil {
		return x.DescriptorKey
	}
	return ""
}

func (x *RequestHeadersInfo) GetSkipIfAbsent() bool {
	if x != nil {
		return x.SkipIfAbsent
	}
	return false
}

// GenericKeyInfo contains generic key information
type GenericKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// descriptor_value is the descriptor value
	DescriptorValue string `protobuf:"bytes,1,opt,name=descriptor_value,json=descriptorValue,proto3" json:"descriptor_value,omitempty"`
	// descriptor_key is the descriptor key
	DescriptorKey string `protobuf:"bytes,2,opt,name=descriptor_key,json=descriptorKey,proto3" json:"descriptor_key,omitempty"`
}

func (x *GenericKeyInfo) Reset() {
	*x = GenericKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericKeyInfo) ProtoMessage() {}

func (x *GenericKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericKeyInfo.ProtoReflect.Descriptor instead.
func (*GenericKeyInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{50}
}

func (x *GenericKeyInfo) GetDescriptorValue() string {
	if x != nil {
		return x.DescriptorValue
	}
	return ""
}

func (x *GenericKeyInfo) GetDescriptorKey() string {
	if x != nil {
		return x.DescriptorKey
	}
	return ""
}

// HeaderValueMatchInfo contains header value match information
type HeaderValueMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// descriptor_value is the descriptor value
	DescriptorValue string `protobuf:"bytes,1,opt,name=descriptor_value,json=descriptorValue,proto3" json:"descriptor_value,omitempty"`
	// expect_match indicates if a match is expected
	ExpectMatch bool `protobuf:"varint,2,opt,name=expect_match,json=expectMatch,proto3" json:"expect_match,omitempty"`
	// headers contains header matching criteria
	Headers []*HeaderMatcherInfo `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *HeaderValueMatchInfo) Reset() {
	*x = HeaderValueMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderValueMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValueMatchInfo) ProtoMessage() {}

func (x *HeaderValueMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValueMatchInfo.ProtoReflect.Descriptor instead.
func (*HeaderValueMatchInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{51}
}

func (x *HeaderValueMatchInfo) GetDescriptorValue() string {
	if x != nil {
		return x.DescriptorValue
	}
	return ""
}

func (x *HeaderValueMatchInfo) GetExpectMatch() bool {
	if x != nil {
		return x.ExpectMatch
	}
	return false
}

func (x *HeaderValueMatchInfo) GetHeaders() []*HeaderMatcherInfo {
	if x != nil {
		return x.Headers
	}
	return nil
}

// DynamicMetadataInfo contains dynamic metadata information
type DynamicMetadataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata_key contains the metadata key
	MetadataKey *MetadataKeyInfo `protobuf:"bytes,1,opt,name=metadata_key,json=metadataKey,proto3" json:"metadata_key,omitempty"`
	// default_value is the default value
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// source is the metadata source
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *DynamicMetadataInfo) Reset() {
	*x = DynamicMetadataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicMetadataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicMetadataInfo) ProtoMessage() {}

func (x *DynamicMetadataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicMetadataInfo.ProtoReflect.Descriptor instead.
func (*DynamicMetadataInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{52}
}

func (x *DynamicMetadataInfo) GetMetadataKey() *MetadataKeyInfo {
	if x != nil {
		return x.MetadataKey
	}
	return nil
}

func (x *DynamicMetadataInfo) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *DynamicMetadataInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// MetadataInfo contains metadata information
type MetadataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata_key contains the metadata key
	MetadataKey *MetadataKeyInfo `protobuf:"bytes,1,opt,name=metadata_key,json=metadataKey,proto3" json:"metadata_key,omitempty"`
	// default_value is the default value
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// source is the metadata source
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *MetadataInfo) Reset() {
	*x = MetadataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataInfo) ProtoMessage() {}

func (x *MetadataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataInfo.ProtoReflect.Descriptor instead.
func (*MetadataInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{53}
}

func (x *MetadataInfo) GetMetadataKey() *MetadataKeyInfo {
	if x != nil {
		return x.MetadataKey
	}
	return nil
}

func (x *MetadataInfo) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *MetadataInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// MetadataKeyInfo contains metadata key information
type MetadataKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the metadata key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// path contains the metadata path
	Path []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *MetadataKeyInfo) Reset() {
	*x = MetadataKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataKeyInfo) ProtoMessage() {}

func (x *MetadataKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataKeyInfo.ProtoReflect.Descriptor instead.
func (*MetadataKeyInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{54}
}

func (x *MetadataKeyInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetadataKeyInfo) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

// ExtensionInfo contains extension information
type ExtensionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the extension name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config_type is the type URL of the typed config
	TypedConfigType string `protobuf:"bytes,2,opt,name=typed_config_type,json=typedConfigType,proto3" json:"typed_config_type,omitempty"`
}

func (x *ExtensionInfo) Reset() {
	*x = ExtensionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionInfo) ProtoMessage() {}

func (x *ExtensionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionInfo.ProtoReflect.Descriptor instead.
func (*ExtensionInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{55}
}

func (x *ExtensionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExtensionInfo) GetTypedConfigType() string {
	if x != nil {
		return x.TypedConfigType
	}
	return ""
}

// HedgePolicyInfo contains hedge policy information
type HedgePolicyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// initial_requests is the number of initial requests
	InitialRequests uint32 `protobuf:"varint,1,opt,name=initial_requests,json=initialRequests,proto3" json:"initial_requests,omitempty"`
	// additional_request_chance contains additional request chance
	AdditionalRequestChance *FractionInfo `protobuf:"bytes,2,opt,name=additional_request_chance,json=additionalRequestChance,proto3" json:"additional_request_chance,omitempty"`
	// hedge_on_per_try_timeout indicates if hedging on per-try timeout is enabled
	HedgeOnPerTryTimeout bool `protobuf:"varint,3,opt,name=hedge_on_per_try_timeout,json=hedgeOnPerTryTimeout,proto3" json:"hedge_on_per_try_timeout,omitempty"`
}

func (x *HedgePolicyInfo) Reset() {
	*x = HedgePolicyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HedgePolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HedgePolicyInfo) ProtoMessage() {}

func (x *HedgePolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HedgePolicyInfo.ProtoReflect.Descriptor instead.
func (*HedgePolicyInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{56}
}

func (x *HedgePolicyInfo) GetInitialRequests() uint32 {
	if x != nil {
		return x.InitialRequests
	}
	return 0
}

func (x *HedgePolicyInfo) GetAdditionalRequestChance() *FractionInfo {
	if x != nil {
		return x.AdditionalRequestChance
	}
	return nil
}

func (x *HedgePolicyInfo) GetHedgeOnPerTryTimeout() bool {
	if x != nil {
		return x.HedgeOnPerTryTimeout
	}
	return false
}

// MaxStreamDurationInfo contains max stream duration information
type MaxStreamDurationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max_stream_duration is the maximum stream duration
	MaxStreamDuration string `protobuf:"bytes,1,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
	// grpc_timeout_header_max is the maximum gRPC timeout header value
	GrpcTimeoutHeaderMax string `protobuf:"bytes,2,opt,name=grpc_timeout_header_max,json=grpcTimeoutHeaderMax,proto3" json:"grpc_timeout_header_max,omitempty"`
	// grpc_timeout_header_offset is the gRPC timeout header offset
	GrpcTimeoutHeaderOffset string `protobuf:"bytes,3,opt,name=grpc_timeout_header_offset,json=grpcTimeoutHeaderOffset,proto3" json:"grpc_timeout_header_offset,omitempty"`
}

func (x *MaxStreamDurationInfo) Reset() {
	*x = MaxStreamDurationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxStreamDurationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxStreamDurationInfo) ProtoMessage() {}

func (x *MaxStreamDurationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxStreamDurationInfo.ProtoReflect.Descriptor instead.
func (*MaxStreamDurationInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{57}
}

func (x *MaxStreamDurationInfo) GetMaxStreamDuration() string {
	if x != nil {
		return x.MaxStreamDuration
	}
	return ""
}

func (x *MaxStreamDurationInfo) GetGrpcTimeoutHeaderMax() string {
	if x != nil {
		return x.GrpcTimeoutHeaderMax
	}
	return ""
}

func (x *MaxStreamDurationInfo) GetGrpcTimeoutHeaderOffset() string {
	if x != nil {
		return x.GrpcTimeoutHeaderOffset
	}
	return ""
}

// VirtualClusterInfo contains virtual cluster information
type VirtualClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pattern is the virtual cluster pattern
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// name is the virtual cluster name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// method is the HTTP method
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *VirtualClusterInfo) Reset() {
	*x = VirtualClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualClusterInfo) ProtoMessage() {}

func (x *VirtualClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualClusterInfo.ProtoReflect.Descriptor instead.
func (*VirtualClusterInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{58}
}

func (x *VirtualClusterInfo) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *VirtualClusterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualClusterInfo) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// CorsInfo contains CORS information
type CorsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// allow_origin contains allowed origins
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin,proto3" json:"allow_origin,omitempty"`
	// allow_origin_string_match contains allowed origin string matches
	AllowOriginStringMatch []string `protobuf:"bytes,2,rep,name=allow_origin_string_match,json=allowOriginStringMatch,proto3" json:"allow_origin_string_match,omitempty"`
	// allow_methods contains allowed methods
	AllowMethods string `protobuf:"bytes,3,opt,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// allow_headers contains allowed headers
	AllowHeaders string `protobuf:"bytes,4,opt,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// expose_headers contains exposed headers
	ExposeHeaders string `protobuf:"bytes,5,opt,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// max_age is the maximum age
	MaxAge string `protobuf:"bytes,6,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// allow_credentials indicates if credentials are allowed
	AllowCredentials bool `protobuf:"varint,7,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	// enabled_specifier indicates how CORS is enabled
	EnabledSpecifier string `protobuf:"bytes,8,opt,name=enabled_specifier,json=enabledSpecifier,proto3" json:"enabled_specifier,omitempty"`
	// shadow_enabled indicates if shadow mode is enabled
	ShadowEnabled bool `protobuf:"varint,9,opt,name=shadow_enabled,json=shadowEnabled,proto3" json:"shadow_enabled,omitempty"`
}

func (x *CorsInfo) Reset() {
	*x = CorsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorsInfo) ProtoMessage() {}

func (x *CorsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorsInfo.ProtoReflect.Descriptor instead.
func (*CorsInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{59}
}

func (x *CorsInfo) GetAllowOrigin() []string {
	if x != nil {
		return x.AllowOrigin
	}
	return nil
}

func (x *CorsInfo) GetAllowOriginStringMatch() []string {
	if x != nil {
		return x.AllowOriginStringMatch
	}
	return nil
}

func (x *CorsInfo) GetAllowMethods() string {
	if x != nil {
		return x.AllowMethods
	}
	return ""
}

func (x *CorsInfo) GetAllowHeaders() string {
	if x != nil {
		return x.AllowHeaders
	}
	return ""
}

func (x *CorsInfo) GetExposeHeaders() string {
	if x != nil {
		return x.ExposeHeaders
	}
	return ""
}

func (x *CorsInfo) GetMaxAge() string {
	if x != nil {
		return x.MaxAge
	}
	return ""
}

func (x *CorsInfo) GetAllowCredentials() bool {
	if x != nil {
		return x.AllowCredentials
	}
	return false
}

func (x *CorsInfo) GetEnabledSpecifier() string {
	if x != nil {
		return x.EnabledSpecifier
	}
	return ""
}

func (x *CorsInfo) GetShadowEnabled() bool {
	if x != nil {
		return x.ShadowEnabled
	}
	return false
}

// UpgradeConfigInfo contains upgrade configuration information
type UpgradeConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// upgrade_type is the upgrade type
	UpgradeType string `protobuf:"bytes,1,opt,name=upgrade_type,json=upgradeType,proto3" json:"upgrade_type,omitempty"`
	// enabled indicates if the upgrade is enabled
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpgradeConfigInfo) Reset() {
	*x = UpgradeConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeConfigInfo) ProtoMessage() {}

func (x *UpgradeConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeConfigInfo.ProtoReflect.Descriptor instead.
func (*UpgradeConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{60}
}

func (x *UpgradeConfigInfo) GetUpgradeType() string {
	if x != nil {
		return x.UpgradeType
	}
	return ""
}

func (x *UpgradeConfigInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// InternalRedirectPolicyInfo contains internal redirect policy information
type InternalRedirectPolicyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max_internal_redirects is the maximum number of internal redirects
	MaxInternalRedirects uint32 `protobuf:"varint,1,opt,name=max_internal_redirects,json=maxInternalRedirects,proto3" json:"max_internal_redirects,omitempty"`
	// redirect_response_codes contains redirect response codes
	RedirectResponseCodes []uint32 `protobuf:"varint,2,rep,packed,name=redirect_response_codes,json=redirectResponseCodes,proto3" json:"redirect_response_codes,omitempty"`
	// predicates contains redirect predicates
	Predicates []*InternalRedirectPredicateInfo `protobuf:"bytes,3,rep,name=predicates,proto3" json:"predicates,omitempty"`
	// allow_cross_scheme_redirect indicates if cross-scheme redirects are allowed
	AllowCrossSchemeRedirect bool `protobuf:"varint,4,opt,name=allow_cross_scheme_redirect,json=allowCrossSchemeRedirect,proto3" json:"allow_cross_scheme_redirect,omitempty"`
}

func (x *InternalRedirectPolicyInfo) Reset() {
	*x = InternalRedirectPolicyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalRedirectPolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalRedirectPolicyInfo) ProtoMessage() {}

func (x *InternalRedirectPolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalRedirectPolicyInfo.ProtoReflect.Descriptor instead.
func (*InternalRedirectPolicyInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{61}
}

func (x *InternalRedirectPolicyInfo) GetMaxInternalRedirects() uint32 {
	if x != nil {
		return x.MaxInternalRedirects
	}
	return 0
}

func (x *InternalRedirectPolicyInfo) GetRedirectResponseCodes() []uint32 {
	if x != nil {
		return x.RedirectResponseCodes
	}
	return nil
}

func (x *InternalRedirectPolicyInfo) GetPredicates() []*InternalRedirectPredicateInfo {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *InternalRedirectPolicyInfo) GetAllowCrossSchemeRedirect() bool {
	if x != nil {
		return x.AllowCrossSchemeRedirect
	}
	return false
}

// InternalRedirectPredicateInfo contains internal redirect predicate information
type InternalRedirectPredicateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the predicate name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config_type is the type URL of the typed config
	TypedConfigType string `protobuf:"bytes,2,opt,name=typed_config_type,json=typedConfigType,proto3" json:"typed_config_type,omitempty"`
}

func (x *InternalRedirectPredicateInfo) Reset() {
	*x = InternalRedirectPredicateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalRedirectPredicateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalRedirectPredicateInfo) ProtoMessage() {}

func (x *InternalRedirectPredicateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalRedirectPredicateInfo.ProtoReflect.Descriptor instead.
func (*InternalRedirectPredicateInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{62}
}

func (x *InternalRedirectPredicateInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InternalRedirectPredicateInfo) GetTypedConfigType() string {
	if x != nil {
		return x.TypedConfigType
	}
	return ""
}

// HashPolicyInfo contains hash policy information
type HashPolicyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policy_specifier indicates the type of hash policy
	PolicySpecifier string `protobuf:"bytes,1,opt,name=policy_specifier,json=policySpecifier,proto3" json:"policy_specifier,omitempty"`
	// header contains header hash policy
	Header *HashPolicyHeaderInfo `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// cookie contains cookie hash policy
	Cookie *HashPolicyCookieInfo `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// connection_properties contains connection properties hash policy
	ConnectionProperties *HashPolicyConnectionPropertiesInfo `protobuf:"bytes,4,opt,name=connection_properties,json=connectionProperties,proto3" json:"connection_properties,omitempty"`
	// query_parameter contains query parameter hash policy
	QueryParameter *HashPolicyQueryParameterInfo `protobuf:"bytes,5,opt,name=query_parameter,json=queryParameter,proto3" json:"query_parameter,omitempty"`
	// filter_state contains filter state hash policy
	FilterState *HashPolicyFilterStateInfo `protobuf:"bytes,6,opt,name=filter_state,json=filterState,proto3" json:"filter_state,omitempty"`
	// terminal indicates if this is a terminal hash policy
	Terminal bool `protobuf:"varint,7,opt,name=terminal,proto3" json:"terminal,omitempty"`
}

func (x *HashPolicyInfo) Reset() {
	*x = HashPolicyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashPolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashPolicyInfo) ProtoMessage() {}

func (x *HashPolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashPolicyInfo.ProtoReflect.Descriptor instead.
func (*HashPolicyInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{63}
}

func (x *HashPolicyInfo) GetPolicySpecifier() string {
	if x != nil {
		return x.PolicySpecifier
	}
	return ""
}

func (x *HashPolicyInfo) GetHeader() *HashPolicyHeaderInfo {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HashPolicyInfo) GetCookie() *HashPolicyCookieInfo {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *HashPolicyInfo) GetConnectionProperties() *HashPolicyConnectionPropertiesInfo {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

func (x *HashPolicyInfo) GetQueryParameter() *HashPolicyQueryParameterInfo {
	if x != nil {
		return x.QueryParameter
	}
	return nil
}

func (x *HashPolicyInfo) GetFilterState() *HashPolicyFilterStateInfo {
	if x != nil {
		return x.FilterState
	}
	return nil
}

func (x *HashPolicyInfo) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

// HashPolicyHeaderInfo contains header hash policy information
type HashPolicyHeaderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header_name is the header name
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// regex_rewrite contains regex rewrite configuration
	RegexRewrite *RegexRewriteInfo `protobuf:"bytes,2,opt,name=regex_rewrite,json=regexRewrite,proto3" json:"regex_rewrite,omitempty"`
}

func (x *HashPolicyHeaderInfo) Reset() {
	*x = HashPolicyHeaderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashPolicyHeaderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashPolicyHeaderInfo) ProtoMessage() {}

func (x *HashPolicyHeaderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashPolicyHeaderInfo.ProtoReflect.Descriptor instead.
func (*HashPolicyHeaderInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{64}
}

func (x *HashPolicyHeaderInfo) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *HashPolicyHeaderInfo) GetRegexRewrite() *RegexRewriteInfo {
	if x != nil {
		return x.RegexRewrite
	}
	return nil
}

// HashPolicyCookieInfo contains cookie hash policy information
type HashPolicyCookieInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the cookie name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ttl is the cookie TTL
	Ttl string `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// path is the cookie path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HashPolicyCookieInfo) Reset() {
	*x = HashPolicyCookieInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashPolicyCookieInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashPolicyCookieInfo) ProtoMessage() {}

func (x *HashPolicyCookieInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashPolicyCookieInfo.ProtoReflect.Descriptor instead.
func (*HashPolicyCookieInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{65}
}

func (x *HashPolicyCookieInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HashPolicyCookieInfo) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

func (x *HashPolicyCookieInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// HashPolicyConnectionPropertiesInfo contains connection properties hash policy information
type HashPolicyConnectionPropertiesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_ip indicates if source IP is used
	SourceIp bool `protobuf:"varint,1,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
}

func (x *HashPolicyConnectionPropertiesInfo) Reset() {
	*x = HashPolicyConnectionPropertiesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashPolicyConnectionPropertiesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashPolicyConnectionPropertiesInfo) ProtoMessage() {}

func (x *HashPolicyConnectionPropertiesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashPolicyConnectionPropertiesInfo.ProtoReflect.Descriptor instead.
func (*HashPolicyConnectionPropertiesInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{66}
}

func (x *HashPolicyConnectionPropertiesInfo) GetSourceIp() bool {
	if x != nil {
		return x.SourceIp
	}
	return false
}

// HashPolicyQueryParameterInfo contains query parameter hash policy information
type HashPolicyQueryParameterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the query parameter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HashPolicyQueryParameterInfo) Reset() {
	*x = HashPolicyQueryParameterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashPolicyQueryParameterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashPolicyQueryParameterInfo) ProtoMessage() {}

func (x *HashPolicyQueryParameterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashPolicyQueryParameterInfo.ProtoReflect.Descriptor instead.
func (*HashPolicyQueryParameterInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{67}
}

func (x *HashPolicyQueryParameterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// HashPolicyFilterStateInfo contains filter state hash policy information
type HashPolicyFilterStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the filter state key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HashPolicyFilterStateInfo) Reset() {
	*x = HashPolicyFilterStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashPolicyFilterStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashPolicyFilterStateInfo) ProtoMessage() {}

func (x *HashPolicyFilterStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashPolicyFilterStateInfo.ProtoReflect.Descriptor instead.
func (*HashPolicyFilterStateInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{68}
}

func (x *HashPolicyFilterStateInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// TunnelingConfigInfo contains tunneling configuration information
type TunnelingConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hostname is the tunneling hostname
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// use_post indicates if POST method is used
	UsePost bool `protobuf:"varint,2,opt,name=use_post,json=usePost,proto3" json:"use_post,omitempty"`
	// headers_to_add contains headers to add
	HeadersToAdd []*HeaderValueOption `protobuf:"bytes,3,rep,name=headers_to_add,json=headersToAdd,proto3" json:"headers_to_add,omitempty"`
	// propagate_response_headers contains response headers to propagate
	PropagateResponseHeaders []string `protobuf:"bytes,4,rep,name=propagate_response_headers,json=propagateResponseHeaders,proto3" json:"propagate_response_headers,omitempty"`
	// propagate_response_trailers contains response trailers to propagate
	PropagateResponseTrailers []string `protobuf:"bytes,5,rep,name=propagate_response_trailers,json=propagateResponseTrailers,proto3" json:"propagate_response_trailers,omitempty"`
}

func (x *TunnelingConfigInfo) Reset() {
	*x = TunnelingConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelingConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelingConfigInfo) ProtoMessage() {}

func (x *TunnelingConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelingConfigInfo.ProtoReflect.Descriptor instead.
func (*TunnelingConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{69}
}

func (x *TunnelingConfigInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *TunnelingConfigInfo) GetUsePost() bool {
	if x != nil {
		return x.UsePost
	}
	return false
}

func (x *TunnelingConfigInfo) GetHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.HeadersToAdd
	}
	return nil
}

func (x *TunnelingConfigInfo) GetPropagateResponseHeaders() []string {
	if x != nil {
		return x.PropagateResponseHeaders
	}
	return nil
}

func (x *TunnelingConfigInfo) GetPropagateResponseTrailers() []string {
	if x != nil {
		return x.PropagateResponseTrailers
	}
	return nil
}

// EndpointConfigInfo contains endpoint configuration information
type EndpointConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_name is the cluster name
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// endpoints contains locality load balancing endpoints
	Endpoints []*LocalityLbEndpointsInfo `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// policy contains endpoint policy
	Policy *PolicyInfo `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *EndpointConfigInfo) Reset() {
	*x = EndpointConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointConfigInfo) ProtoMessage() {}

func (x *EndpointConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointConfigInfo.ProtoReflect.Descriptor instead.
func (*EndpointConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{70}
}

func (x *EndpointConfigInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EndpointConfigInfo) GetEndpoints() []*LocalityLbEndpointsInfo {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *EndpointConfigInfo) GetPolicy() *PolicyInfo {
	if x != nil {
		return x.Policy
	}
	return nil
}

// LocalityLbEndpointsInfo contains locality load balancing endpoints information
type LocalityLbEndpointsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// locality contains locality information
	Locality *LocalityInfo `protobuf:"bytes,1,opt,name=locality,proto3" json:"locality,omitempty"`
	// lb_endpoints contains load balancing endpoints
	LbEndpoints []*LbEndpointInfo `protobuf:"bytes,2,rep,name=lb_endpoints,json=lbEndpoints,proto3" json:"lb_endpoints,omitempty"`
	// load_balancing_weight is the load balancing weight
	LoadBalancingWeight uint32 `protobuf:"varint,3,opt,name=load_balancing_weight,json=loadBalancingWeight,proto3" json:"load_balancing_weight,omitempty"`
	// priority is the endpoint priority
	Priority uint32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// proximity is the endpoint proximity
	Proximity uint32 `protobuf:"varint,5,opt,name=proximity,proto3" json:"proximity,omitempty"`
}

func (x *LocalityLbEndpointsInfo) Reset() {
	*x = LocalityLbEndpointsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalityLbEndpointsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalityLbEndpointsInfo) ProtoMessage() {}

func (x *LocalityLbEndpointsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalityLbEndpointsInfo.ProtoReflect.Descriptor instead.
func (*LocalityLbEndpointsInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{71}
}

func (x *LocalityLbEndpointsInfo) GetLocality() *LocalityInfo {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *LocalityLbEndpointsInfo) GetLbEndpoints() []*LbEndpointInfo {
	if x != nil {
		return x.LbEndpoints
	}
	return nil
}

func (x *LocalityLbEndpointsInfo) GetLoadBalancingWeight() uint32 {
	if x != nil {
		return x.LoadBalancingWeight
	}
	return 0
}

func (x *LocalityLbEndpointsInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *LocalityLbEndpointsInfo) GetProximity() uint32 {
	if x != nil {
		return x.Proximity
	}
	return 0
}

// LbEndpointInfo contains load balancing endpoint information
type LbEndpointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host_identifier is the host identifier
	HostIdentifier string `protobuf:"bytes,1,opt,name=host_identifier,json=hostIdentifier,proto3" json:"host_identifier,omitempty"`
	// endpoint contains endpoint details
	Endpoint *EndpointDetailsInfo `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// health_status is the health status
	HealthStatus string `protobuf:"bytes,3,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	// metadata contains endpoint metadata as key-value pairs
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// load_balancing_weight is the load balancing weight
	LoadBalancingWeight uint32 `protobuf:"varint,5,opt,name=load_balancing_weight,json=loadBalancingWeight,proto3" json:"load_balancing_weight,omitempty"`
}

func (x *LbEndpointInfo) Reset() {
	*x = LbEndpointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LbEndpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LbEndpointInfo) ProtoMessage() {}

func (x *LbEndpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LbEndpointInfo.ProtoReflect.Descriptor instead.
func (*LbEndpointInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{72}
}

func (x *LbEndpointInfo) GetHostIdentifier() string {
	if x != nil {
		return x.HostIdentifier
	}
	return ""
}

func (x *LbEndpointInfo) GetEndpoint() *EndpointDetailsInfo {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *LbEndpointInfo) GetHealthStatus() string {
	if x != nil {
		return x.HealthStatus
	}
	return ""
}

func (x *LbEndpointInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LbEndpointInfo) GetLoadBalancingWeight() uint32 {
	if x != nil {
		return x.LoadBalancingWeight
	}
	return 0
}

// EndpointDetailsInfo contains endpoint details information
type EndpointDetailsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the endpoint address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// port is the endpoint port
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// hostname is the endpoint hostname
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// health_check_config contains health check configuration
	HealthCheckConfig *HealthCheckConfigInfo `protobuf:"bytes,4,opt,name=health_check_config,json=healthCheckConfig,proto3" json:"health_check_config,omitempty"`
}

func (x *EndpointDetailsInfo) Reset() {
	*x = EndpointDetailsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointDetailsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointDetailsInfo) ProtoMessage() {}

func (x *EndpointDetailsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointDetailsInfo.ProtoReflect.Descriptor instead.
func (*EndpointDetailsInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{73}
}

func (x *EndpointDetailsInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EndpointDetailsInfo) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EndpointDetailsInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *EndpointDetailsInfo) GetHealthCheckConfig() *HealthCheckConfigInfo {
	if x != nil {
		return x.HealthCheckConfig
	}
	return nil
}

// HealthCheckConfigInfo contains health check configuration information
type HealthCheckConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port_value is the health check port
	PortValue uint32 `protobuf:"varint,1,opt,name=port_value,json=portValue,proto3" json:"port_value,omitempty"`
	// hostname is the health check hostname
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// path is the health check path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HealthCheckConfigInfo) Reset() {
	*x = HealthCheckConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckConfigInfo) ProtoMessage() {}

func (x *HealthCheckConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckConfigInfo.ProtoReflect.Descriptor instead.
func (*HealthCheckConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{74}
}

func (x *HealthCheckConfigInfo) GetPortValue() uint32 {
	if x != nil {
		return x.PortValue
	}
	return 0
}

func (x *HealthCheckConfigInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HealthCheckConfigInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// PolicyInfo contains policy information
type PolicyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// drop_overloads contains drop overload configuration
	DropOverloads []*DropOverloadInfo `protobuf:"bytes,1,rep,name=drop_overloads,json=dropOverloads,proto3" json:"drop_overloads,omitempty"`
	// overprovisioning_factor is the overprovisioning factor
	OverprovisioningFactor uint32 `protobuf:"varint,2,opt,name=overprovisioning_factor,json=overprovisioningFactor,proto3" json:"overprovisioning_factor,omitempty"`
	// endpoint_stale_after is the endpoint stale timeout
	EndpointStaleAfter string `protobuf:"bytes,3,opt,name=endpoint_stale_after,json=endpointStaleAfter,proto3" json:"endpoint_stale_after,omitempty"`
	// disable_overprovisioning indicates if overprovisioning is disabled
	DisableOverprovisioning bool `protobuf:"varint,4,opt,name=disable_overprovisioning,json=disableOverprovisioning,proto3" json:"disable_overprovisioning,omitempty"`
}

func (x *PolicyInfo) Reset() {
	*x = PolicyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyInfo) ProtoMessage() {}

func (x *PolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyInfo.ProtoReflect.Descriptor instead.
func (*PolicyInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{75}
}

func (x *PolicyInfo) GetDropOverloads() []*DropOverloadInfo {
	if x != nil {
		return x.DropOverloads
	}
	return nil
}

func (x *PolicyInfo) GetOverprovisioningFactor() uint32 {
	if x != nil {
		return x.OverprovisioningFactor
	}
	return 0
}

func (x *PolicyInfo) GetEndpointStaleAfter() string {
	if x != nil {
		return x.EndpointStaleAfter
	}
	return ""
}

func (x *PolicyInfo) GetDisableOverprovisioning() bool {
	if x != nil {
		return x.DisableOverprovisioning
	}
	return false
}

// DropOverloadInfo contains drop overload information
type DropOverloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// category is the drop category
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// drop_percentage contains drop percentage
	DropPercentage *FractionInfo `protobuf:"bytes,2,opt,name=drop_percentage,json=dropPercentage,proto3" json:"drop_percentage,omitempty"`
}

func (x *DropOverloadInfo) Reset() {
	*x = DropOverloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropOverloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropOverloadInfo) ProtoMessage() {}

func (x *DropOverloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropOverloadInfo.ProtoReflect.Descriptor instead.
func (*DropOverloadInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{76}
}

func (x *DropOverloadInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DropOverloadInfo) GetDropPercentage() *FractionInfo {
	if x != nil {
		return x.DropPercentage
	}
	return nil
}

// HealthCheckInfo contains health check information
type HealthCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timeout is the health check timeout
	Timeout string `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// interval is the health check interval
	Interval string `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// interval_jitter is the interval jitter
	IntervalJitter string `protobuf:"bytes,3,opt,name=interval_jitter,json=intervalJitter,proto3" json:"interval_jitter,omitempty"`
	// interval_jitter_percent is the interval jitter percentage
	IntervalJitterPercent uint32 `protobuf:"varint,4,opt,name=interval_jitter_percent,json=intervalJitterPercent,proto3" json:"interval_jitter_percent,omitempty"`
	// unhealthy_threshold is the unhealthy threshold
	UnhealthyThreshold uint32 `protobuf:"varint,5,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// healthy_threshold is the healthy threshold
	HealthyThreshold uint32 `protobuf:"varint,6,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// alt_port is the alternative port
	AltPort uint32 `protobuf:"varint,7,opt,name=alt_port,json=altPort,proto3" json:"alt_port,omitempty"`
	// reuse_connection indicates if connection reuse is enabled
	ReuseConnection bool `protobuf:"varint,8,opt,name=reuse_connection,json=reuseConnection,proto3" json:"reuse_connection,omitempty"`
	// http_health_check contains HTTP health check configuration
	HttpHealthCheck *HttpHealthCheckInfo `protobuf:"bytes,9,opt,name=http_health_check,json=httpHealthCheck,proto3" json:"http_health_check,omitempty"`
	// tcp_health_check contains TCP health check configuration
	TcpHealthCheck *TcpHealthCheckInfo `protobuf:"bytes,10,opt,name=tcp_health_check,json=tcpHealthCheck,proto3" json:"tcp_health_check,omitempty"`
	// grpc_health_check contains gRPC health check configuration
	GrpcHealthCheck *GrpcHealthCheckInfo `protobuf:"bytes,11,opt,name=grpc_health_check,json=grpcHealthCheck,proto3" json:"grpc_health_check,omitempty"`
	// custom_health_check contains custom health check configuration
	CustomHealthCheck *CustomHealthCheckInfo `protobuf:"bytes,12,opt,name=custom_health_check,json=customHealthCheck,proto3" json:"custom_health_check,omitempty"`
	// no_traffic_interval is the no traffic interval
	NoTrafficInterval string `protobuf:"bytes,13,opt,name=no_traffic_interval,json=noTrafficInterval,proto3" json:"no_traffic_interval,omitempty"`
	// no_traffic_healthy_interval is the no traffic healthy interval
	NoTrafficHealthyInterval string `protobuf:"bytes,14,opt,name=no_traffic_healthy_interval,json=noTrafficHealthyInterval,proto3" json:"no_traffic_healthy_interval,omitempty"`
	// unhealthy_interval is the unhealthy interval
	UnhealthyInterval string `protobuf:"bytes,15,opt,name=unhealthy_interval,json=unhealthyInterval,proto3" json:"unhealthy_interval,omitempty"`
	// unhealthy_edge_interval is the unhealthy edge interval
	UnhealthyEdgeInterval string `protobuf:"bytes,16,opt,name=unhealthy_edge_interval,json=unhealthyEdgeInterval,proto3" json:"unhealthy_edge_interval,omitempty"`
	// healthy_edge_interval is the healthy edge interval
	HealthyEdgeInterval string `protobuf:"bytes,17,opt,name=healthy_edge_interval,json=healthyEdgeInterval,proto3" json:"healthy_edge_interval,omitempty"`
	// event_log_path is the event log path
	EventLogPath string `protobuf:"bytes,18,opt,name=event_log_path,json=eventLogPath,proto3" json:"event_log_path,omitempty"`
	// event_service contains event service configuration
	EventService *EventServiceConfigInfo `protobuf:"bytes,19,opt,name=event_service,json=eventService,proto3" json:"event_service,omitempty"`
	// always_log_health_check_failures indicates if health check failures are always logged
	AlwaysLogHealthCheckFailures bool `protobuf:"varint,20,opt,name=always_log_health_check_failures,json=alwaysLogHealthCheckFailures,proto3" json:"always_log_health_check_failures,omitempty"`
	// tls_options contains TLS options
	TlsOptions *TlsOptionsInfo `protobuf:"bytes,21,opt,name=tls_options,json=tlsOptions,proto3" json:"tls_options,omitempty"`
	// transport_socket contains transport socket configuration
	TransportSocket *TransportSocketInfo `protobuf:"bytes,22,opt,name=transport_socket,json=transportSocket,proto3" json:"transport_socket,omitempty"`
}

func (x *HealthCheckInfo) Reset() {
	*x = HealthCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckInfo) ProtoMessage() {}

func (x *HealthCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckInfo.ProtoReflect.Descriptor instead.
func (*HealthCheckInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{77}
}

func (x *HealthCheckInfo) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *HealthCheckInfo) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *HealthCheckInfo) GetIntervalJitter() string {
	if x != nil {
		return x.IntervalJitter
	}
	return ""
}

func (x *HealthCheckInfo) GetIntervalJitterPercent() uint32 {
	if x != nil {
		return x.IntervalJitterPercent
	}
	return 0
}

func (x *HealthCheckInfo) GetUnhealthyThreshold() uint32 {
	if x != nil {
		return x.UnhealthyThreshold
	}
	return 0
}

func (x *HealthCheckInfo) GetHealthyThreshold() uint32 {
	if x != nil {
		return x.HealthyThreshold
	}
	return 0
}

func (x *HealthCheckInfo) GetAltPort() uint32 {
	if x != nil {
		return x.AltPort
	}
	return 0
}

func (x *HealthCheckInfo) GetReuseConnection() bool {
	if x != nil {
		return x.ReuseConnection
	}
	return false
}

func (x *HealthCheckInfo) GetHttpHealthCheck() *HttpHealthCheckInfo {
	if x != nil {
		return x.HttpHealthCheck
	}
	return nil
}

func (x *HealthCheckInfo) GetTcpHealthCheck() *TcpHealthCheckInfo {
	if x != nil {
		return x.TcpHealthCheck
	}
	return nil
}

func (x *HealthCheckInfo) GetGrpcHealthCheck() *GrpcHealthCheckInfo {
	if x != nil {
		return x.GrpcHealthCheck
	}
	return nil
}

func (x *HealthCheckInfo) GetCustomHealthCheck() *CustomHealthCheckInfo {
	if x != nil {
		return x.CustomHealthCheck
	}
	return nil
}

func (x *HealthCheckInfo) GetNoTrafficInterval() string {
	if x != nil {
		return x.NoTrafficInterval
	}
	return ""
}

func (x *HealthCheckInfo) GetNoTrafficHealthyInterval() string {
	if x != nil {
		return x.NoTrafficHealthyInterval
	}
	return ""
}

func (x *HealthCheckInfo) GetUnhealthyInterval() string {
	if x != nil {
		return x.UnhealthyInterval
	}
	return ""
}

func (x *HealthCheckInfo) GetUnhealthyEdgeInterval() string {
	if x != nil {
		return x.UnhealthyEdgeInterval
	}
	return ""
}

func (x *HealthCheckInfo) GetHealthyEdgeInterval() string {
	if x != nil {
		return x.HealthyEdgeInterval
	}
	return ""
}

func (x *HealthCheckInfo) GetEventLogPath() string {
	if x != nil {
		return x.EventLogPath
	}
	return ""
}

func (x *HealthCheckInfo) GetEventService() *EventServiceConfigInfo {
	if x != nil {
		return x.EventService
	}
	return nil
}

func (x *HealthCheckInfo) GetAlwaysLogHealthCheckFailures() bool {
	if x != nil {
		return x.AlwaysLogHealthCheckFailures
	}
	return false
}

func (x *HealthCheckInfo) GetTlsOptions() *TlsOptionsInfo {
	if x != nil {
		return x.TlsOptions
	}
	return nil
}

func (x *HealthCheckInfo) GetTransportSocket() *TransportSocketInfo {
	if x != nil {
		return x.TransportSocket
	}
	return nil
}

// HttpHealthCheckInfo contains HTTP health check information
type HttpHealthCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host is the health check host
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// path is the health check path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// send is the data to send
	Send string `protobuf:"bytes,3,opt,name=send,proto3" json:"send,omitempty"`
	// receive contains expected receive patterns
	Receive []string `protobuf:"bytes,4,rep,name=receive,proto3" json:"receive,omitempty"`
	// request_headers_to_add contains headers to add to requests
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,5,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// request_headers_to_remove contains headers to remove from requests
	RequestHeadersToRemove []string `protobuf:"bytes,6,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// expected_statuses contains expected status ranges
	ExpectedStatuses []*StatusRangeInfo `protobuf:"bytes,7,rep,name=expected_statuses,json=expectedStatuses,proto3" json:"expected_statuses,omitempty"`
	// use_http2 indicates if HTTP/2 is used
	UseHttp2 bool `protobuf:"varint,8,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
	// service_name_matcher contains service name matcher
	ServiceNameMatcher *StringMatcherInfo `protobuf:"bytes,9,opt,name=service_name_matcher,json=serviceNameMatcher,proto3" json:"service_name_matcher,omitempty"`
	// method is the HTTP method
	Method string `protobuf:"bytes,10,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *HttpHealthCheckInfo) Reset() {
	*x = HttpHealthCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHealthCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHealthCheckInfo) ProtoMessage() {}

func (x *HttpHealthCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHealthCheckInfo.ProtoReflect.Descriptor instead.
func (*HttpHealthCheckInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{78}
}

func (x *HttpHealthCheckInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HttpHealthCheckInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpHealthCheckInfo) GetSend() string {
	if x != nil {
		return x.Send
	}
	return ""
}

func (x *HttpHealthCheckInfo) GetReceive() []string {
	if x != nil {
		return x.Receive
	}
	return nil
}

func (x *HttpHealthCheckInfo) GetRequestHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *HttpHealthCheckInfo) GetRequestHeadersToRemove() []string {
	if x != nil {
		return x.RequestHeadersToRemove
	}
	return nil
}

func (x *HttpHealthCheckInfo) GetExpectedStatuses() []*StatusRangeInfo {
	if x != nil {
		return x.ExpectedStatuses
	}
	return nil
}

func (x *HttpHealthCheckInfo) GetUseHttp2() bool {
	if x != nil {
		return x.UseHttp2
	}
	return false
}

func (x *HttpHealthCheckInfo) GetServiceNameMatcher() *StringMatcherInfo {
	if x != nil {
		return x.ServiceNameMatcher
	}
	return nil
}

func (x *HttpHealthCheckInfo) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// TcpHealthCheckInfo contains TCP health check information
type TcpHealthCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send contains data to send
	Send []string `protobuf:"bytes,1,rep,name=send,proto3" json:"send,omitempty"`
	// receive contains expected receive patterns
	Receive []string `protobuf:"bytes,2,rep,name=receive,proto3" json:"receive,omitempty"`
}

func (x *TcpHealthCheckInfo) Reset() {
	*x = TcpHealthCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpHealthCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpHealthCheckInfo) ProtoMessage() {}

func (x *TcpHealthCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpHealthCheckInfo.ProtoReflect.Descriptor instead.
func (*TcpHealthCheckInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{79}
}

func (x *TcpHealthCheckInfo) GetSend() []string {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *TcpHealthCheckInfo) GetReceive() []string {
	if x != nil {
		return x.Receive
	}
	return nil
}

// GrpcHealthCheckInfo contains gRPC health check information
type GrpcHealthCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service_name is the gRPC service name
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// authority is the gRPC authority
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	// initial_metadata contains initial metadata
	InitialMetadata []*HeaderValueOption `protobuf:"bytes,3,rep,name=initial_metadata,json=initialMetadata,proto3" json:"initial_metadata,omitempty"`
}

func (x *GrpcHealthCheckInfo) Reset() {
	*x = GrpcHealthCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcHealthCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcHealthCheckInfo) ProtoMessage() {}

func (x *GrpcHealthCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcHealthCheckInfo.ProtoReflect.Descriptor instead.
func (*GrpcHealthCheckInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{80}
}

func (x *GrpcHealthCheckInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GrpcHealthCheckInfo) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *GrpcHealthCheckInfo) GetInitialMetadata() []*HeaderValueOption {
	if x != nil {
		return x.InitialMetadata
	}
	return nil
}

// CustomHealthCheckInfo contains custom health check information
type CustomHealthCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the health check name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config_type is the type URL of the typed config
	TypedConfigType string `protobuf:"bytes,2,opt,name=typed_config_type,json=typedConfigType,proto3" json:"typed_config_type,omitempty"`
}

func (x *CustomHealthCheckInfo) Reset() {
	*x = CustomHealthCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomHealthCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomHealthCheckInfo) ProtoMessage() {}

func (x *CustomHealthCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomHealthCheckInfo.ProtoReflect.Descriptor instead.
func (*CustomHealthCheckInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{81}
}

func (x *CustomHealthCheckInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomHealthCheckInfo) GetTypedConfigType() string {
	if x != nil {
		return x.TypedConfigType
	}
	return ""
}

// EventServiceConfigInfo contains event service configuration information
type EventServiceConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event_service contains event service configuration
	EventService *ConfigSourceInfo `protobuf:"bytes,1,opt,name=event_service,json=eventService,proto3" json:"event_service,omitempty"`
}

func (x *EventServiceConfigInfo) Reset() {
	*x = EventServiceConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventServiceConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventServiceConfigInfo) ProtoMessage() {}

func (x *EventServiceConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventServiceConfigInfo.ProtoReflect.Descriptor instead.
func (*EventServiceConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{82}
}

func (x *EventServiceConfigInfo) GetEventService() *ConfigSourceInfo {
	if x != nil {
		return x.EventService
	}
	return nil
}

// TlsOptionsInfo contains TLS options information
type TlsOptionsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// alpn_protocols contains ALPN protocols
	AlpnProtocols []string `protobuf:"bytes,1,rep,name=alpn_protocols,json=alpnProtocols,proto3" json:"alpn_protocols,omitempty"`
}

func (x *TlsOptionsInfo) Reset() {
	*x = TlsOptionsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsOptionsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsOptionsInfo) ProtoMessage() {}

func (x *TlsOptionsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsOptionsInfo.ProtoReflect.Descriptor instead.
func (*TlsOptionsInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{83}
}

func (x *TlsOptionsInfo) GetAlpnProtocols() []string {
	if x != nil {
		return x.AlpnProtocols
	}
	return nil
}

// TransportSocketInfo contains transport socket information
type TransportSocketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the transport socket name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config_type is the type URL of the typed config
	TypedConfigType string `protobuf:"bytes,2,opt,name=typed_config_type,json=typedConfigType,proto3" json:"typed_config_type,omitempty"`
}

func (x *TransportSocketInfo) Reset() {
	*x = TransportSocketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportSocketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportSocketInfo) ProtoMessage() {}

func (x *TransportSocketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportSocketInfo.ProtoReflect.Descriptor instead.
func (*TransportSocketInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{84}
}

func (x *TransportSocketInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransportSocketInfo) GetTypedConfigType() string {
	if x != nil {
		return x.TypedConfigType
	}
	return ""
}

// StatusRangeInfo contains status range information
type StatusRangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start is the range start
	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// end is the range end
	End uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *StatusRangeInfo) Reset() {
	*x = StatusRangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRangeInfo) ProtoMessage() {}

func (x *StatusRangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRangeInfo.ProtoReflect.Descriptor instead.
func (*StatusRangeInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{85}
}

func (x *StatusRangeInfo) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *StatusRangeInfo) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

// StringMatcherInfo contains string matcher information
type StringMatcherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// match_pattern is the match pattern type
	MatchPattern string `protobuf:"bytes,1,opt,name=match_pattern,json=matchPattern,proto3" json:"match_pattern,omitempty"`
	// exact_match contains exact match value
	ExactMatch string `protobuf:"bytes,2,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
	// prefix_match contains prefix match value
	PrefixMatch string `protobuf:"bytes,3,opt,name=prefix_match,json=prefixMatch,proto3" json:"prefix_match,omitempty"`
	// suffix_match contains suffix match value
	SuffixMatch string `protobuf:"bytes,4,opt,name=suffix_match,json=suffixMatch,proto3" json:"suffix_match,omitempty"`
	// safe_regex_match contains regex match pattern
	SafeRegexMatch string `protobuf:"bytes,5,opt,name=safe_regex_match,json=safeRegexMatch,proto3" json:"safe_regex_match,omitempty"`
	// contains_match contains substring match value
	ContainsMatch string `protobuf:"bytes,6,opt,name=contains_match,json=containsMatch,proto3" json:"contains_match,omitempty"`
	// ignore_case indicates if case should be ignored
	IgnoreCase bool `protobuf:"varint,7,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *StringMatcherInfo) Reset() {
	*x = StringMatcherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMatcherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatcherInfo) ProtoMessage() {}

func (x *StringMatcherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatcherInfo.ProtoReflect.Descriptor instead.
func (*StringMatcherInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{86}
}

func (x *StringMatcherInfo) GetMatchPattern() string {
	if x != nil {
		return x.MatchPattern
	}
	return ""
}

func (x *StringMatcherInfo) GetExactMatch() string {
	if x != nil {
		return x.ExactMatch
	}
	return ""
}

func (x *StringMatcherInfo) GetPrefixMatch() string {
	if x != nil {
		return x.PrefixMatch
	}
	return ""
}

func (x *StringMatcherInfo) GetSuffixMatch() string {
	if x != nil {
		return x.SuffixMatch
	}
	return ""
}

func (x *StringMatcherInfo) GetSafeRegexMatch() string {
	if x != nil {
		return x.SafeRegexMatch
	}
	return ""
}

func (x *StringMatcherInfo) GetContainsMatch() string {
	if x != nil {
		return x.ContainsMatch
	}
	return ""
}

func (x *StringMatcherInfo) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// CircuitBreakersInfo contains circuit breakers information
type CircuitBreakersInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// thresholds contains circuit breaker thresholds
	Thresholds []*ThresholdInfo `protobuf:"bytes,1,rep,name=thresholds,proto3" json:"thresholds,omitempty"`
	// per_host_thresholds contains per-host thresholds
	PerHostThresholds []*ThresholdInfo `protobuf:"bytes,2,rep,name=per_host_thresholds,json=perHostThresholds,proto3" json:"per_host_thresholds,omitempty"`
}

func (x *CircuitBreakersInfo) Reset() {
	*x = CircuitBreakersInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakersInfo) ProtoMessage() {}

func (x *CircuitBreakersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakersInfo.ProtoReflect.Descriptor instead.
func (*CircuitBreakersInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{87}
}

func (x *CircuitBreakersInfo) GetThresholds() []*ThresholdInfo {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

func (x *CircuitBreakersInfo) GetPerHostThresholds() []*ThresholdInfo {
	if x != nil {
		return x.PerHostThresholds
	}
	return nil
}

// ThresholdInfo contains threshold information
type ThresholdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// priority is the threshold priority
	Priority string `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority,omitempty"`
	// max_connections is the maximum connections
	MaxConnections uint32 `protobuf:"varint,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// max_pending_requests is the maximum pending requests
	MaxPendingRequests uint32 `protobuf:"varint,3,opt,name=max_pending_requests,json=maxPendingRequests,proto3" json:"max_pending_requests,omitempty"`
	// max_requests is the maximum requests
	MaxRequests uint32 `protobuf:"varint,4,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
	// max_retries is the maximum retries
	MaxRetries uint32 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// track_remaining indicates if remaining resources are tracked
	TrackRemaining bool `protobuf:"varint,6,opt,name=track_remaining,json=trackRemaining,proto3" json:"track_remaining,omitempty"`
	// max_connection_pools is the maximum connection pools
	MaxConnectionPools uint32 `protobuf:"varint,7,opt,name=max_connection_pools,json=maxConnectionPools,proto3" json:"max_connection_pools,omitempty"`
}

func (x *ThresholdInfo) Reset() {
	*x = ThresholdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThresholdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdInfo) ProtoMessage() {}

func (x *ThresholdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdInfo.ProtoReflect.Descriptor instead.
func (*ThresholdInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{88}
}

func (x *ThresholdInfo) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ThresholdInfo) GetMaxConnections() uint32 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *ThresholdInfo) GetMaxPendingRequests() uint32 {
	if x != nil {
		return x.MaxPendingRequests
	}
	return 0
}

func (x *ThresholdInfo) GetMaxRequests() uint32 {
	if x != nil {
		return x.MaxRequests
	}
	return 0
}

func (x *ThresholdInfo) GetMaxRetries() uint32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *ThresholdInfo) GetTrackRemaining() bool {
	if x != nil {
		return x.TrackRemaining
	}
	return false
}

func (x *ThresholdInfo) GetMaxConnectionPools() uint32 {
	if x != nil {
		return x.MaxConnectionPools
	}
	return 0
}

// CommonHttpProtocolOptionsInfo contains common HTTP protocol options information
type CommonHttpProtocolOptionsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// idle_timeout is the idle timeout
	IdleTimeout string `protobuf:"bytes,1,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// max_connection_duration is the maximum connection duration
	MaxConnectionDuration string `protobuf:"bytes,2,opt,name=max_connection_duration,json=maxConnectionDuration,proto3" json:"max_connection_duration,omitempty"`
	// max_headers_count is the maximum headers count
	MaxHeadersCount uint32 `protobuf:"varint,3,opt,name=max_headers_count,json=maxHeadersCount,proto3" json:"max_headers_count,omitempty"`
	// max_stream_duration is the maximum stream duration
	MaxStreamDuration string `protobuf:"bytes,4,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
	// headers_with_underscores_action indicates how headers with underscores are handled
	HeadersWithUnderscoresAction string `protobuf:"bytes,5,opt,name=headers_with_underscores_action,json=headersWithUnderscoresAction,proto3" json:"headers_with_underscores_action,omitempty"`
	// max_requests_per_connection is the maximum requests per connection
	MaxRequestsPerConnection uint32 `protobuf:"varint,6,opt,name=max_requests_per_connection,json=maxRequestsPerConnection,proto3" json:"max_requests_per_connection,omitempty"`
}

func (x *CommonHttpProtocolOptionsInfo) Reset() {
	*x = CommonHttpProtocolOptionsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonHttpProtocolOptionsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonHttpProtocolOptionsInfo) ProtoMessage() {}

func (x *CommonHttpProtocolOptionsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonHttpProtocolOptionsInfo.ProtoReflect.Descriptor instead.
func (*CommonHttpProtocolOptionsInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{89}
}

func (x *CommonHttpProtocolOptionsInfo) GetIdleTimeout() string {
	if x != nil {
		return x.IdleTimeout
	}
	return ""
}

func (x *CommonHttpProtocolOptionsInfo) GetMaxConnectionDuration() string {
	if x != nil {
		return x.MaxConnectionDuration
	}
	return ""
}

func (x *CommonHttpProtocolOptionsInfo) GetMaxHeadersCount() uint32 {
	if x != nil {
		return x.MaxHeadersCount
	}
	return 0
}

func (x *CommonHttpProtocolOptionsInfo) GetMaxStreamDuration() string {
	if x != nil {
		return x.MaxStreamDuration
	}
	return ""
}

func (x *CommonHttpProtocolOptionsInfo) GetHeadersWithUnderscoresAction() string {
	if x != nil {
		return x.HeadersWithUnderscoresAction
	}
	return ""
}

func (x *CommonHttpProtocolOptionsInfo) GetMaxRequestsPerConnection() uint32 {
	if x != nil {
		return x.MaxRequestsPerConnection
	}
	return 0
}

// HostInfo contains host information
type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// socket_address contains socket address information
	SocketAddress *SocketAddressInfo `protobuf:"bytes,1,opt,name=socket_address,json=socketAddress,proto3" json:"socket_address,omitempty"`
	// pipe contains pipe information
	Pipe *PipeInfo `protobuf:"bytes,2,opt,name=pipe,proto3" json:"pipe,omitempty"`
	// hostname is the hostname
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// health_check_config contains health check configuration
	HealthCheckConfig *HealthCheckConfigInfo `protobuf:"bytes,4,opt,name=health_check_config,json=healthCheckConfig,proto3" json:"health_check_config,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{90}
}

func (x *HostInfo) GetSocketAddress() *SocketAddressInfo {
	if x != nil {
		return x.SocketAddress
	}
	return nil
}

func (x *HostInfo) GetPipe() *PipeInfo {
	if x != nil {
		return x.Pipe
	}
	return nil
}

func (x *HostInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostInfo) GetHealthCheckConfig() *HealthCheckConfigInfo {
	if x != nil {
		return x.HealthCheckConfig
	}
	return nil
}

// SocketAddressInfo contains socket address information
type SocketAddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// protocol is the socket protocol
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// address is the socket address
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// port_specifier indicates the port specifier type
	PortSpecifier string `protobuf:"bytes,3,opt,name=port_specifier,json=portSpecifier,proto3" json:"port_specifier,omitempty"`
	// port_value is the port value
	PortValue uint32 `protobuf:"varint,4,opt,name=port_value,json=portValue,proto3" json:"port_value,omitempty"`
	// named_port is the named port
	NamedPort string `protobuf:"bytes,5,opt,name=named_port,json=namedPort,proto3" json:"named_port,omitempty"`
	// resolver_name is the resolver name
	ResolverName string `protobuf:"bytes,6,opt,name=resolver_name,json=resolverName,proto3" json:"resolver_name,omitempty"`
	// ipv4_compat indicates if IPv4 compatibility is enabled
	Ipv4Compat bool `protobuf:"varint,7,opt,name=ipv4_compat,json=ipv4Compat,proto3" json:"ipv4_compat,omitempty"`
}

func (x *SocketAddressInfo) Reset() {
	*x = SocketAddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketAddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketAddressInfo) ProtoMessage() {}

func (x *SocketAddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketAddressInfo.ProtoReflect.Descriptor instead.
func (*SocketAddressInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{91}
}

func (x *SocketAddressInfo) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SocketAddressInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SocketAddressInfo) GetPortSpecifier() string {
	if x != nil {
		return x.PortSpecifier
	}
	return ""
}

func (x *SocketAddressInfo) GetPortValue() uint32 {
	if x != nil {
		return x.PortValue
	}
	return 0
}

func (x *SocketAddressInfo) GetNamedPort() string {
	if x != nil {
		return x.NamedPort
	}
	return ""
}

func (x *SocketAddressInfo) GetResolverName() string {
	if x != nil {
		return x.ResolverName
	}
	return ""
}

func (x *SocketAddressInfo) GetIpv4Compat() bool {
	if x != nil {
		return x.Ipv4Compat
	}
	return false
}

// PipeInfo contains pipe information
type PipeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the pipe path
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// mode is the pipe mode
	Mode uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *PipeInfo) Reset() {
	*x = PipeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipeInfo) ProtoMessage() {}

func (x *PipeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipeInfo.ProtoReflect.Descriptor instead.
func (*PipeInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{92}
}

func (x *PipeInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PipeInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

// OutlierDetectionInfo contains outlier detection information
type OutlierDetectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// consecutive_server_error is the consecutive server error threshold
	ConsecutiveServerError uint32 `protobuf:"varint,1,opt,name=consecutive_server_error,json=consecutiveServerError,proto3" json:"consecutive_server_error,omitempty"`
	// interval is the outlier detection interval
	Interval string `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// base_ejection_time is the base ejection time
	BaseEjectionTime string `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	// max_ejection_percent is the maximum ejection percentage
	MaxEjectionPercent uint32 `protobuf:"varint,4,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
	// min_health_percent is the minimum health percentage
	MinHealthPercent uint32 `protobuf:"varint,5,opt,name=min_health_percent,json=minHealthPercent,proto3" json:"min_health_percent,omitempty"`
	// split_external_local_origin_errors indicates if external and local origin errors are split
	SplitExternalLocalOriginErrors bool `protobuf:"varint,6,opt,name=split_external_local_origin_errors,json=splitExternalLocalOriginErrors,proto3" json:"split_external_local_origin_errors,omitempty"`
	// consecutive_local_origin_failure is the consecutive local origin failure threshold
	ConsecutiveLocalOriginFailure uint32 `protobuf:"varint,7,opt,name=consecutive_local_origin_failure,json=consecutiveLocalOriginFailure,proto3" json:"consecutive_local_origin_failure,omitempty"`
	// consecutive_gateway_failure is the consecutive gateway failure threshold
	ConsecutiveGatewayFailure uint32 `protobuf:"varint,8,opt,name=consecutive_gateway_failure,json=consecutiveGatewayFailure,proto3" json:"consecutive_gateway_failure,omitempty"`
	// consecutive_5xx_failure is the consecutive 5xx failure threshold
	Consecutive_5XxFailure uint32 `protobuf:"varint,9,opt,name=consecutive_5xx_failure,json=consecutive5xxFailure,proto3" json:"consecutive_5xx_failure,omitempty"`
	// enforcing_consecutive_server_error is the enforcing consecutive server error percentage
	EnforcingConsecutiveServerError uint32 `protobuf:"varint,10,opt,name=enforcing_consecutive_server_error,json=enforcingConsecutiveServerError,proto3" json:"enforcing_consecutive_server_error,omitempty"`
	// enforcing_success_rate is the enforcing success rate percentage
	EnforcingSuccessRate uint32 `protobuf:"varint,11,opt,name=enforcing_success_rate,json=enforcingSuccessRate,proto3" json:"enforcing_success_rate,omitempty"`
	// success_rate_minimum_hosts is the success rate minimum hosts
	SuccessRateMinimumHosts uint32 `protobuf:"varint,12,opt,name=success_rate_minimum_hosts,json=successRateMinimumHosts,proto3" json:"success_rate_minimum_hosts,omitempty"`
	// success_rate_request_volume is the success rate request volume
	SuccessRateRequestVolume uint32 `protobuf:"varint,13,opt,name=success_rate_request_volume,json=successRateRequestVolume,proto3" json:"success_rate_request_volume,omitempty"`
	// success_rate_stdev_factor is the success rate standard deviation factor
	SuccessRateStdevFactor uint32 `protobuf:"varint,14,opt,name=success_rate_stdev_factor,json=successRateStdevFactor,proto3" json:"success_rate_stdev_factor,omitempty"`
	// enforcing_consecutive_local_origin_failure is the enforcing consecutive local origin failure percentage
	EnforcingConsecutiveLocalOriginFailure uint32 `protobuf:"varint,15,opt,name=enforcing_consecutive_local_origin_failure,json=enforcingConsecutiveLocalOriginFailure,proto3" json:"enforcing_consecutive_local_origin_failure,omitempty"`
	// enforcing_consecutive_gateway_failure is the enforcing consecutive gateway failure percentage
	EnforcingConsecutiveGatewayFailure uint32 `protobuf:"varint,16,opt,name=enforcing_consecutive_gateway_failure,json=enforcingConsecutiveGatewayFailure,proto3" json:"enforcing_consecutive_gateway_failure,omitempty"`
	// enforcing_local_origin_success_rate is the enforcing local origin success rate percentage
	EnforcingLocalOriginSuccessRate uint32 `protobuf:"varint,17,opt,name=enforcing_local_origin_success_rate,json=enforcingLocalOriginSuccessRate,proto3" json:"enforcing_local_origin_success_rate,omitempty"`
	// local_origin_success_rate_minimum_hosts is the local origin success rate minimum hosts
	LocalOriginSuccessRateMinimumHosts uint32 `protobuf:"varint,18,opt,name=local_origin_success_rate_minimum_hosts,json=localOriginSuccessRateMinimumHosts,proto3" json:"local_origin_success_rate_minimum_hosts,omitempty"`
	// local_origin_success_rate_request_volume is the local origin success rate request volume
	LocalOriginSuccessRateRequestVolume uint32 `protobuf:"varint,19,opt,name=local_origin_success_rate_request_volume,json=localOriginSuccessRateRequestVolume,proto3" json:"local_origin_success_rate_request_volume,omitempty"`
	// local_origin_success_rate_stdev_factor is the local origin success rate standard deviation factor
	LocalOriginSuccessRateStdevFactor uint32 `protobuf:"varint,20,opt,name=local_origin_success_rate_stdev_factor,json=localOriginSuccessRateStdevFactor,proto3" json:"local_origin_success_rate_stdev_factor,omitempty"`
	// enforcing_5xx_failure is the enforcing 5xx failure percentage
	Enforcing_5XxFailure uint32 `protobuf:"varint,21,opt,name=enforcing_5xx_failure,json=enforcing5xxFailure,proto3" json:"enforcing_5xx_failure,omitempty"`
	// max_ejection_time is the maximum ejection time
	MaxEjectionTime string `protobuf:"bytes,22,opt,name=max_ejection_time,json=maxEjectionTime,proto3" json:"max_ejection_time,omitempty"`
}

func (x *OutlierDetectionInfo) Reset() {
	*x = OutlierDetectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutlierDetectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlierDetectionInfo) ProtoMessage() {}

func (x *OutlierDetectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlierDetectionInfo.ProtoReflect.Descriptor instead.
func (*OutlierDetectionInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{93}
}

func (x *OutlierDetectionInfo) GetConsecutiveServerError() uint32 {
	if x != nil {
		return x.ConsecutiveServerError
	}
	return 0
}

func (x *OutlierDetectionInfo) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *OutlierDetectionInfo) GetBaseEjectionTime() string {
	if x != nil {
		return x.BaseEjectionTime
	}
	return ""
}

func (x *OutlierDetectionInfo) GetMaxEjectionPercent() uint32 {
	if x != nil {
		return x.MaxEjectionPercent
	}
	return 0
}

func (x *OutlierDetectionInfo) GetMinHealthPercent() uint32 {
	if x != nil {
		return x.MinHealthPercent
	}
	return 0
}

func (x *OutlierDetectionInfo) GetSplitExternalLocalOriginErrors() bool {
	if x != nil {
		return x.SplitExternalLocalOriginErrors
	}
	return false
}

func (x *OutlierDetectionInfo) GetConsecutiveLocalOriginFailure() uint32 {
	if x != nil {
		return x.ConsecutiveLocalOriginFailure
	}
	return 0
}

func (x *OutlierDetectionInfo) GetConsecutiveGatewayFailure() uint32 {
	if x != nil {
		return x.ConsecutiveGatewayFailure
	}
	return 0
}

func (x *OutlierDetectionInfo) GetConsecutive_5XxFailure() uint32 {
	if x != nil {
		return x.Consecutive_5XxFailure
	}
	return 0
}

func (x *OutlierDetectionInfo) GetEnforcingConsecutiveServerError() uint32 {
	if x != nil {
		return x.EnforcingConsecutiveServerError
	}
	return 0
}

func (x *OutlierDetectionInfo) GetEnforcingSuccessRate() uint32 {
	if x != nil {
		return x.EnforcingSuccessRate
	}
	return 0
}

func (x *OutlierDetectionInfo) GetSuccessRateMinimumHosts() uint32 {
	if x != nil {
		return x.SuccessRateMinimumHosts
	}
	return 0
}

func (x *OutlierDetectionInfo) GetSuccessRateRequestVolume() uint32 {
	if x != nil {
		return x.SuccessRateRequestVolume
	}
	return 0
}

func (x *OutlierDetectionInfo) GetSuccessRateStdevFactor() uint32 {
	if x != nil {
		return x.SuccessRateStdevFactor
	}
	return 0
}

func (x *OutlierDetectionInfo) GetEnforcingConsecutiveLocalOriginFailure() uint32 {
	if x != nil {
		return x.EnforcingConsecutiveLocalOriginFailure
	}
	return 0
}

func (x *OutlierDetectionInfo) GetEnforcingConsecutiveGatewayFailure() uint32 {
	if x != nil {
		return x.EnforcingConsecutiveGatewayFailure
	}
	return 0
}

func (x *OutlierDetectionInfo) GetEnforcingLocalOriginSuccessRate() uint32 {
	if x != nil {
		return x.EnforcingLocalOriginSuccessRate
	}
	return 0
}

func (x *OutlierDetectionInfo) GetLocalOriginSuccessRateMinimumHosts() uint32 {
	if x != nil {
		return x.LocalOriginSuccessRateMinimumHosts
	}
	return 0
}

func (x *OutlierDetectionInfo) GetLocalOriginSuccessRateRequestVolume() uint32 {
	if x != nil {
		return x.LocalOriginSuccessRateRequestVolume
	}
	return 0
}

func (x *OutlierDetectionInfo) GetLocalOriginSuccessRateStdevFactor() uint32 {
	if x != nil {
		return x.LocalOriginSuccessRateStdevFactor
	}
	return 0
}

func (x *OutlierDetectionInfo) GetEnforcing_5XxFailure() uint32 {
	if x != nil {
		return x.Enforcing_5XxFailure
	}
	return 0
}

func (x *OutlierDetectionInfo) GetMaxEjectionTime() string {
	if x != nil {
		return x.MaxEjectionTime
	}
	return ""
}

// UpstreamBindConfigInfo contains upstream bind configuration information
type UpstreamBindConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_address contains source address information
	SourceAddress *SocketAddressInfo `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	// freebind_interface indicates if freebind interface is enabled
	FreebindInterface bool `protobuf:"varint,2,opt,name=freebind_interface,json=freebindInterface,proto3" json:"freebind_interface,omitempty"`
	// socket_options contains socket options
	SocketOptions []*SocketOptionInfo `protobuf:"bytes,3,rep,name=socket_options,json=socketOptions,proto3" json:"socket_options,omitempty"`
}

func (x *UpstreamBindConfigInfo) Reset() {
	*x = UpstreamBindConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamBindConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamBindConfigInfo) ProtoMessage() {}

func (x *UpstreamBindConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamBindConfigInfo.ProtoReflect.Descriptor instead.
func (*UpstreamBindConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{94}
}

func (x *UpstreamBindConfigInfo) GetSourceAddress() *SocketAddressInfo {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *UpstreamBindConfigInfo) GetFreebindInterface() bool {
	if x != nil {
		return x.FreebindInterface
	}
	return false
}

func (x *UpstreamBindConfigInfo) GetSocketOptions() []*SocketOptionInfo {
	if x != nil {
		return x.SocketOptions
	}
	return nil
}

// SocketOptionInfo contains socket option information
type SocketOptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// level is the socket option level
	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	// name is the socket option name
	Name int64 `protobuf:"varint,2,opt,name=name,proto3" json:"name,omitempty"`
	// int_value is the integer value
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	// buf_value is the buffer value
	BufValue string `protobuf:"bytes,4,opt,name=buf_value,json=bufValue,proto3" json:"buf_value,omitempty"`
	// state is the socket option state
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SocketOptionInfo) Reset() {
	*x = SocketOptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketOptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketOptionInfo) ProtoMessage() {}

func (x *SocketOptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketOptionInfo.ProtoReflect.Descriptor instead.
func (*SocketOptionInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{95}
}

func (x *SocketOptionInfo) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SocketOptionInfo) GetName() int64 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *SocketOptionInfo) GetIntValue() int64 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

func (x *SocketOptionInfo) GetBufValue() string {
	if x != nil {
		return x.BufValue
	}
	return ""
}

func (x *SocketOptionInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// LbSubsetConfigInfo contains load balancing subset configuration information
type LbSubsetConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fallback_policy is the fallback policy
	FallbackPolicy string `protobuf:"bytes,1,opt,name=fallback_policy,json=fallbackPolicy,proto3" json:"fallback_policy,omitempty"`
	// default_subset contains default subset metadata
	DefaultSubset map[string]string `protobuf:"bytes,2,rep,name=default_subset,json=defaultSubset,proto3" json:"default_subset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// subset_selectors contains subset selectors
	SubsetSelectors []*LbSubsetSelectorInfo `protobuf:"bytes,3,rep,name=subset_selectors,json=subsetSelectors,proto3" json:"subset_selectors,omitempty"`
	// locality_weight_aware indicates if locality weight awareness is enabled
	LocalityWeightAware bool `protobuf:"varint,4,opt,name=locality_weight_aware,json=localityWeightAware,proto3" json:"locality_weight_aware,omitempty"`
	// scale_locality_weight indicates if locality weight scaling is enabled
	ScaleLocalityWeight bool `protobuf:"varint,5,opt,name=scale_locality_weight,json=scaleLocalityWeight,proto3" json:"scale_locality_weight,omitempty"`
	// panic_mode_any indicates if panic mode any is enabled
	PanicModeAny bool `protobuf:"varint,6,opt,name=panic_mode_any,json=panicModeAny,proto3" json:"panic_mode_any,omitempty"`
	// list_as_any indicates if list as any is enabled
	ListAsAny bool `protobuf:"varint,7,opt,name=list_as_any,json=listAsAny,proto3" json:"list_as_any,omitempty"`
	// metadata_fallback_policy is the metadata fallback policy
	MetadataFallbackPolicy string `protobuf:"bytes,8,opt,name=metadata_fallback_policy,json=metadataFallbackPolicy,proto3" json:"metadata_fallback_policy,omitempty"`
	// allow_redundant_keys indicates if redundant keys are allowed
	AllowRedundantKeys bool `protobuf:"varint,9,opt,name=allow_redundant_keys,json=allowRedundantKeys,proto3" json:"allow_redundant_keys,omitempty"`
}

func (x *LbSubsetConfigInfo) Reset() {
	*x = LbSubsetConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LbSubsetConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LbSubsetConfigInfo) ProtoMessage() {}

func (x *LbSubsetConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LbSubsetConfigInfo.ProtoReflect.Descriptor instead.
func (*LbSubsetConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{96}
}

func (x *LbSubsetConfigInfo) GetFallbackPolicy() string {
	if x != nil {
		return x.FallbackPolicy
	}
	return ""
}

func (x *LbSubsetConfigInfo) GetDefaultSubset() map[string]string {
	if x != nil {
		return x.DefaultSubset
	}
	return nil
}

func (x *LbSubsetConfigInfo) GetSubsetSelectors() []*LbSubsetSelectorInfo {
	if x != nil {
		return x.SubsetSelectors
	}
	return nil
}

func (x *LbSubsetConfigInfo) GetLocalityWeightAware() bool {
	if x != nil {
		return x.LocalityWeightAware
	}
	return false
}

func (x *LbSubsetConfigInfo) GetScaleLocalityWeight() bool {
	if x != nil {
		return x.ScaleLocalityWeight
	}
	return false
}

func (x *LbSubsetConfigInfo) GetPanicModeAny() bool {
	if x != nil {
		return x.PanicModeAny
	}
	return false
}

func (x *LbSubsetConfigInfo) GetListAsAny() bool {
	if x != nil {
		return x.ListAsAny
	}
	return false
}

func (x *LbSubsetConfigInfo) GetMetadataFallbackPolicy() string {
	if x != nil {
		return x.MetadataFallbackPolicy
	}
	return ""
}

func (x *LbSubsetConfigInfo) GetAllowRedundantKeys() bool {
	if x != nil {
		return x.AllowRedundantKeys
	}
	return false
}

// LbSubsetSelectorInfo contains load balancing subset selector information
type LbSubsetSelectorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// keys contains selector keys
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// single_host_per_subset indicates if single host per subset is enabled
	SingleHostPerSubset bool `protobuf:"varint,2,opt,name=single_host_per_subset,json=singleHostPerSubset,proto3" json:"single_host_per_subset,omitempty"`
	// fallback_policy is the fallback policy
	FallbackPolicy string `protobuf:"bytes,3,opt,name=fallback_policy,json=fallbackPolicy,proto3" json:"fallback_policy,omitempty"`
	// fallback_keys_subset contains fallback keys subset
	FallbackKeysSubset []string `protobuf:"bytes,4,rep,name=fallback_keys_subset,json=fallbackKeysSubset,proto3" json:"fallback_keys_subset,omitempty"`
}

func (x *LbSubsetSelectorInfo) Reset() {
	*x = LbSubsetSelectorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LbSubsetSelectorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LbSubsetSelectorInfo) ProtoMessage() {}

func (x *LbSubsetSelectorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LbSubsetSelectorInfo.ProtoReflect.Descriptor instead.
func (*LbSubsetSelectorInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{97}
}

func (x *LbSubsetSelectorInfo) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *LbSubsetSelectorInfo) GetSingleHostPerSubset() bool {
	if x != nil {
		return x.SingleHostPerSubset
	}
	return false
}

func (x *LbSubsetSelectorInfo) GetFallbackPolicy() string {
	if x != nil {
		return x.FallbackPolicy
	}
	return ""
}

func (x *LbSubsetSelectorInfo) GetFallbackKeysSubset() []string {
	if x != nil {
		return x.FallbackKeysSubset
	}
	return nil
}

// RingHashLbConfigInfo contains ring hash load balancing configuration information
type RingHashLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// minimum_ring_size is the minimum ring size
	MinimumRingSize uint64 `protobuf:"varint,1,opt,name=minimum_ring_size,json=minimumRingSize,proto3" json:"minimum_ring_size,omitempty"`
	// hash_function is the hash function
	HashFunction string `protobuf:"bytes,2,opt,name=hash_function,json=hashFunction,proto3" json:"hash_function,omitempty"`
	// maximum_ring_size is the maximum ring size
	MaximumRingSize uint64 `protobuf:"varint,3,opt,name=maximum_ring_size,json=maximumRingSize,proto3" json:"maximum_ring_size,omitempty"`
}

func (x *RingHashLbConfigInfo) Reset() {
	*x = RingHashLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RingHashLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingHashLbConfigInfo) ProtoMessage() {}

func (x *RingHashLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingHashLbConfigInfo.ProtoReflect.Descriptor instead.
func (*RingHashLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{98}
}

func (x *RingHashLbConfigInfo) GetMinimumRingSize() uint64 {
	if x != nil {
		return x.MinimumRingSize
	}
	return 0
}

func (x *RingHashLbConfigInfo) GetHashFunction() string {
	if x != nil {
		return x.HashFunction
	}
	return ""
}

func (x *RingHashLbConfigInfo) GetMaximumRingSize() uint64 {
	if x != nil {
		return x.MaximumRingSize
	}
	return 0
}

// MaglevLbConfigInfo contains Maglev load balancing configuration information
type MaglevLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// table_size is the table size
	TableSize uint64 `protobuf:"varint,1,opt,name=table_size,json=tableSize,proto3" json:"table_size,omitempty"`
}

func (x *MaglevLbConfigInfo) Reset() {
	*x = MaglevLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaglevLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaglevLbConfigInfo) ProtoMessage() {}

func (x *MaglevLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaglevLbConfigInfo.ProtoReflect.Descriptor instead.
func (*MaglevLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{99}
}

func (x *MaglevLbConfigInfo) GetTableSize() uint64 {
	if x != nil {
		return x.TableSize
	}
	return 0
}

// OriginalDstLbConfigInfo contains original destination load balancing configuration information
type OriginalDstLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use_http_header indicates if HTTP header is used
	UseHttpHeader bool `protobuf:"varint,1,opt,name=use_http_header,json=useHttpHeader,proto3" json:"use_http_header,omitempty"`
}

func (x *OriginalDstLbConfigInfo) Reset() {
	*x = OriginalDstLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginalDstLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginalDstLbConfigInfo) ProtoMessage() {}

func (x *OriginalDstLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginalDstLbConfigInfo.ProtoReflect.Descriptor instead.
func (*OriginalDstLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{100}
}

func (x *OriginalDstLbConfigInfo) GetUseHttpHeader() bool {
	if x != nil {
		return x.UseHttpHeader
	}
	return false
}

// LeastRequestLbConfigInfo contains least request load balancing configuration information
type LeastRequestLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choice_count is the choice count
	ChoiceCount uint32 `protobuf:"varint,1,opt,name=choice_count,json=choiceCount,proto3" json:"choice_count,omitempty"`
	// active_request_bias contains active request bias
	ActiveRequestBias *RuntimeDoubleInfo `protobuf:"bytes,2,opt,name=active_request_bias,json=activeRequestBias,proto3" json:"active_request_bias,omitempty"`
}

func (x *LeastRequestLbConfigInfo) Reset() {
	*x = LeastRequestLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeastRequestLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeastRequestLbConfigInfo) ProtoMessage() {}

func (x *LeastRequestLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeastRequestLbConfigInfo.ProtoReflect.Descriptor instead.
func (*LeastRequestLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{101}
}

func (x *LeastRequestLbConfigInfo) GetChoiceCount() uint32 {
	if x != nil {
		return x.ChoiceCount
	}
	return 0
}

func (x *LeastRequestLbConfigInfo) GetActiveRequestBias() *RuntimeDoubleInfo {
	if x != nil {
		return x.ActiveRequestBias
	}
	return nil
}

// RuntimeDoubleInfo contains runtime double information
type RuntimeDoubleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default_value is the default value
	DefaultValue float64 `protobuf:"fixed64,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// runtime_key is the runtime key
	RuntimeKey string `protobuf:"bytes,2,opt,name=runtime_key,json=runtimeKey,proto3" json:"runtime_key,omitempty"`
}

func (x *RuntimeDoubleInfo) Reset() {
	*x = RuntimeDoubleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeDoubleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeDoubleInfo) ProtoMessage() {}

func (x *RuntimeDoubleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeDoubleInfo.ProtoReflect.Descriptor instead.
func (*RuntimeDoubleInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{102}
}

func (x *RuntimeDoubleInfo) GetDefaultValue() float64 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

func (x *RuntimeDoubleInfo) GetRuntimeKey() string {
	if x != nil {
		return x.RuntimeKey
	}
	return ""
}

// CommonLbConfigInfo contains common load balancing configuration information
type CommonLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// healthy_panic_threshold contains healthy panic threshold
	HealthyPanicThreshold *FractionInfo `protobuf:"bytes,1,opt,name=healthy_panic_threshold,json=healthyPanicThreshold,proto3" json:"healthy_panic_threshold,omitempty"`
	// zone_aware_lb_config contains zone-aware load balancing configuration
	ZoneAwareLbConfig *ZoneAwareLbConfigInfo `protobuf:"bytes,2,opt,name=zone_aware_lb_config,json=zoneAwareLbConfig,proto3" json:"zone_aware_lb_config,omitempty"`
	// locality_lb_config contains locality load balancing configuration
	LocalityLbConfig *LocalityLbConfigInfo `protobuf:"bytes,3,opt,name=locality_lb_config,json=localityLbConfig,proto3" json:"locality_lb_config,omitempty"`
	// update_merge_window is the update merge window
	UpdateMergeWindow string `protobuf:"bytes,4,opt,name=update_merge_window,json=updateMergeWindow,proto3" json:"update_merge_window,omitempty"`
	// ignore_new_hosts_until_first_hc indicates if new hosts are ignored until first health check
	IgnoreNewHostsUntilFirstHc bool `protobuf:"varint,5,opt,name=ignore_new_hosts_until_first_hc,json=ignoreNewHostsUntilFirstHc,proto3" json:"ignore_new_hosts_until_first_hc,omitempty"`
	// close_connections_on_host_set_change indicates if connections are closed on host set change
	CloseConnectionsOnHostSetChange bool `protobuf:"varint,6,opt,name=close_connections_on_host_set_change,json=closeConnectionsOnHostSetChange,proto3" json:"close_connections_on_host_set_change,omitempty"`
	// consistent_hashing_lb_config contains consistent hashing load balancing configuration
	ConsistentHashingLbConfig *ConsistentHashingLbConfigInfo `protobuf:"bytes,7,opt,name=consistent_hashing_lb_config,json=consistentHashingLbConfig,proto3" json:"consistent_hashing_lb_config,omitempty"`
}

func (x *CommonLbConfigInfo) Reset() {
	*x = CommonLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonLbConfigInfo) ProtoMessage() {}

func (x *CommonLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonLbConfigInfo.ProtoReflect.Descriptor instead.
func (*CommonLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{103}
}

func (x *CommonLbConfigInfo) GetHealthyPanicThreshold() *FractionInfo {
	if x != nil {
		return x.HealthyPanicThreshold
	}
	return nil
}

func (x *CommonLbConfigInfo) GetZoneAwareLbConfig() *ZoneAwareLbConfigInfo {
	if x != nil {
		return x.ZoneAwareLbConfig
	}
	return nil
}

func (x *CommonLbConfigInfo) GetLocalityLbConfig() *LocalityLbConfigInfo {
	if x != nil {
		return x.LocalityLbConfig
	}
	return nil
}

func (x *CommonLbConfigInfo) GetUpdateMergeWindow() string {
	if x != nil {
		return x.UpdateMergeWindow
	}
	return ""
}

func (x *CommonLbConfigInfo) GetIgnoreNewHostsUntilFirstHc() bool {
	if x != nil {
		return x.IgnoreNewHostsUntilFirstHc
	}
	return false
}

func (x *CommonLbConfigInfo) GetCloseConnectionsOnHostSetChange() bool {
	if x != nil {
		return x.CloseConnectionsOnHostSetChange
	}
	return false
}

func (x *CommonLbConfigInfo) GetConsistentHashingLbConfig() *ConsistentHashingLbConfigInfo {
	if x != nil {
		return x.ConsistentHashingLbConfig
	}
	return nil
}

// ZoneAwareLbConfigInfo contains zone-aware load balancing configuration information
type ZoneAwareLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// routing_enabled contains routing enabled fraction
	RoutingEnabled *FractionInfo `protobuf:"bytes,1,opt,name=routing_enabled,json=routingEnabled,proto3" json:"routing_enabled,omitempty"`
	// min_cluster_size is the minimum cluster size
	MinClusterSize uint64 `protobuf:"varint,2,opt,name=min_cluster_size,json=minClusterSize,proto3" json:"min_cluster_size,omitempty"`
}

func (x *ZoneAwareLbConfigInfo) Reset() {
	*x = ZoneAwareLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneAwareLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneAwareLbConfigInfo) ProtoMessage() {}

func (x *ZoneAwareLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneAwareLbConfigInfo.ProtoReflect.Descriptor instead.
func (*ZoneAwareLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{104}
}

func (x *ZoneAwareLbConfigInfo) GetRoutingEnabled() *FractionInfo {
	if x != nil {
		return x.RoutingEnabled
	}
	return nil
}

func (x *ZoneAwareLbConfigInfo) GetMinClusterSize() uint64 {
	if x != nil {
		return x.MinClusterSize
	}
	return 0
}

// LocalityLbConfigInfo contains locality load balancing configuration information
type LocalityLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// zone_aware_lb_config contains zone-aware load balancing configuration
	ZoneAwareLbConfig *ZoneAwareLbConfigInfo `protobuf:"bytes,1,opt,name=zone_aware_lb_config,json=zoneAwareLbConfig,proto3" json:"zone_aware_lb_config,omitempty"`
	// locality_weighted_lb_config contains locality weighted load balancing configuration
	LocalityWeightedLbConfig *LocalityWeightedLbConfigInfo `protobuf:"bytes,2,opt,name=locality_weighted_lb_config,json=localityWeightedLbConfig,proto3" json:"locality_weighted_lb_config,omitempty"`
}

func (x *LocalityLbConfigInfo) Reset() {
	*x = LocalityLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalityLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalityLbConfigInfo) ProtoMessage() {}

func (x *LocalityLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalityLbConfigInfo.ProtoReflect.Descriptor instead.
func (*LocalityLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{105}
}

func (x *LocalityLbConfigInfo) GetZoneAwareLbConfig() *ZoneAwareLbConfigInfo {
	if x != nil {
		return x.ZoneAwareLbConfig
	}
	return nil
}

func (x *LocalityLbConfigInfo) GetLocalityWeightedLbConfig() *LocalityWeightedLbConfigInfo {
	if x != nil {
		return x.LocalityWeightedLbConfig
	}
	return nil
}

// LocalityWeightedLbConfigInfo contains locality weighted load balancing configuration information
type LocalityWeightedLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalityWeightedLbConfigInfo) Reset() {
	*x = LocalityWeightedLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalityWeightedLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalityWeightedLbConfigInfo) ProtoMessage() {}

func (x *LocalityWeightedLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalityWeightedLbConfigInfo.ProtoReflect.Descriptor instead.
func (*LocalityWeightedLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{106}
}

// ConsistentHashingLbConfigInfo contains consistent hashing load balancing configuration information
type ConsistentHashingLbConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use_hostname_for_hashing indicates if hostname is used for hashing
	UseHostnameForHashing bool `protobuf:"varint,1,opt,name=use_hostname_for_hashing,json=useHostnameForHashing,proto3" json:"use_hostname_for_hashing,omitempty"`
	// hash_balance_factor is the hash balance factor
	HashBalanceFactor uint32 `protobuf:"varint,2,opt,name=hash_balance_factor,json=hashBalanceFactor,proto3" json:"hash_balance_factor,omitempty"`
}

func (x *ConsistentHashingLbConfigInfo) Reset() {
	*x = ConsistentHashingLbConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistentHashingLbConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistentHashingLbConfigInfo) ProtoMessage() {}

func (x *ConsistentHashingLbConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistentHashingLbConfigInfo.ProtoReflect.Descriptor instead.
func (*ConsistentHashingLbConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{107}
}

func (x *ConsistentHashingLbConfigInfo) GetUseHostnameForHashing() bool {
	if x != nil {
		return x.UseHostnameForHashing
	}
	return false
}

func (x *ConsistentHashingLbConfigInfo) GetHashBalanceFactor() uint32 {
	if x != nil {
		return x.HashBalanceFactor
	}
	return 0
}

// UpstreamConnectionOptionsInfo contains upstream connection options information
type UpstreamConnectionOptionsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tcp_keepalive contains TCP keepalive configuration
	TcpKeepalive *TcpKeepaliveInfo `protobuf:"bytes,1,opt,name=tcp_keepalive,json=tcpKeepalive,proto3" json:"tcp_keepalive,omitempty"`
	// socket_options contains socket options
	SocketOptions []*SocketOptionInfo `protobuf:"bytes,2,rep,name=socket_options,json=socketOptions,proto3" json:"socket_options,omitempty"`
}

func (x *UpstreamConnectionOptionsInfo) Reset() {
	*x = UpstreamConnectionOptionsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamConnectionOptionsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamConnectionOptionsInfo) ProtoMessage() {}

func (x *UpstreamConnectionOptionsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamConnectionOptionsInfo.ProtoReflect.Descriptor instead.
func (*UpstreamConnectionOptionsInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{108}
}

func (x *UpstreamConnectionOptionsInfo) GetTcpKeepalive() *TcpKeepaliveInfo {
	if x != nil {
		return x.TcpKeepalive
	}
	return nil
}

func (x *UpstreamConnectionOptionsInfo) GetSocketOptions() []*SocketOptionInfo {
	if x != nil {
		return x.SocketOptions
	}
	return nil
}

// TcpKeepaliveInfo contains TCP keepalive information
type TcpKeepaliveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// keepalive_probes is the number of keepalive probes
	KeepaliveProbes uint32 `protobuf:"varint,1,opt,name=keepalive_probes,json=keepaliveProbes,proto3" json:"keepalive_probes,omitempty"`
	// keepalive_time is the keepalive time
	KeepaliveTime uint32 `protobuf:"varint,2,opt,name=keepalive_time,json=keepaliveTime,proto3" json:"keepalive_time,omitempty"`
	// keepalive_interval is the keepalive interval
	KeepaliveInterval uint32 `protobuf:"varint,3,opt,name=keepalive_interval,json=keepaliveInterval,proto3" json:"keepalive_interval,omitempty"`
}

func (x *TcpKeepaliveInfo) Reset() {
	*x = TcpKeepaliveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpKeepaliveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpKeepaliveInfo) ProtoMessage() {}

func (x *TcpKeepaliveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpKeepaliveInfo.ProtoReflect.Descriptor instead.
func (*TcpKeepaliveInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{109}
}

func (x *TcpKeepaliveInfo) GetKeepaliveProbes() uint32 {
	if x != nil {
		return x.KeepaliveProbes
	}
	return 0
}

func (x *TcpKeepaliveInfo) GetKeepaliveTime() uint32 {
	if x != nil {
		return x.KeepaliveTime
	}
	return 0
}

func (x *TcpKeepaliveInfo) GetKeepaliveInterval() uint32 {
	if x != nil {
		return x.KeepaliveInterval
	}
	return 0
}

// ClusterFilterInfo contains cluster filter information
type ClusterFilterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// typed_config_type is the type URL of the typed config
	TypedConfigType string `protobuf:"bytes,2,opt,name=typed_config_type,json=typedConfigType,proto3" json:"typed_config_type,omitempty"`
}

func (x *ClusterFilterInfo) Reset() {
	*x = ClusterFilterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterFilterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterFilterInfo) ProtoMessage() {}

func (x *ClusterFilterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterFilterInfo.ProtoReflect.Descriptor instead.
func (*ClusterFilterInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{110}
}

func (x *ClusterFilterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterFilterInfo) GetTypedConfigType() string {
	if x != nil {
		return x.TypedConfigType
	}
	return ""
}

// DnsResolverInfo contains DNS resolver information
type DnsResolverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// socket_address contains socket address information
	SocketAddress *SocketAddressInfo `protobuf:"bytes,1,opt,name=socket_address,json=socketAddress,proto3" json:"socket_address,omitempty"`
	// resolver_options contains resolver options
	ResolverOptions []string `protobuf:"bytes,2,rep,name=resolver_options,json=resolverOptions,proto3" json:"resolver_options,omitempty"`
}

func (x *DnsResolverInfo) Reset() {
	*x = DnsResolverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsResolverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsResolverInfo) ProtoMessage() {}

func (x *DnsResolverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsResolverInfo.ProtoReflect.Descriptor instead.
func (*DnsResolverInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{111}
}

func (x *DnsResolverInfo) GetSocketAddress() *SocketAddressInfo {
	if x != nil {
		return x.SocketAddress
	}
	return nil
}

func (x *DnsResolverInfo) GetResolverOptions() []string {
	if x != nil {
		return x.ResolverOptions
	}
	return nil
}

// RefreshRateInfo contains refresh rate information
type RefreshRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base_interval is the base interval
	BaseInterval string `protobuf:"bytes,1,opt,name=base_interval,json=baseInterval,proto3" json:"base_interval,omitempty"`
	// max_interval is the maximum interval
	MaxInterval string `protobuf:"bytes,2,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
}

func (x *RefreshRateInfo) Reset() {
	*x = RefreshRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRateInfo) ProtoMessage() {}

func (x *RefreshRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRateInfo.ProtoReflect.Descriptor instead.
func (*RefreshRateInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{112}
}

func (x *RefreshRateInfo) GetBaseInterval() string {
	if x != nil {
		return x.BaseInterval
	}
	return ""
}

func (x *RefreshRateInfo) GetMaxInterval() string {
	if x != nil {
		return x.MaxInterval
	}
	return ""
}

// EdsClusterConfigInfo contains EDS cluster configuration information
type EdsClusterConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// eds_config contains EDS configuration
	EdsConfig *ConfigSourceInfo `protobuf:"bytes,1,opt,name=eds_config,json=edsConfig,proto3" json:"eds_config,omitempty"`
	// service_name is the service name
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *EdsClusterConfigInfo) Reset() {
	*x = EdsClusterConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdsClusterConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdsClusterConfigInfo) ProtoMessage() {}

func (x *EdsClusterConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdsClusterConfigInfo.ProtoReflect.Descriptor instead.
func (*EdsClusterConfigInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{113}
}

func (x *EdsClusterConfigInfo) GetEdsConfig() *ConfigSourceInfo {
	if x != nil {
		return x.EdsConfig
	}
	return nil
}

func (x *EdsClusterConfigInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// ClusterSpecifierPluginInfo contains cluster specifier plugin information
type ClusterSpecifierPluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extension contains extension information
	Extension *ExtensionInfo `protobuf:"bytes,1,opt,name=extension,proto3" json:"extension,omitempty"`
	// is_optional indicates if the plugin is optional
	IsOptional bool `protobuf:"varint,2,opt,name=is_optional,json=isOptional,proto3" json:"is_optional,omitempty"`
}

func (x *ClusterSpecifierPluginInfo) Reset() {
	*x = ClusterSpecifierPluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSpecifierPluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSpecifierPluginInfo) ProtoMessage() {}

func (x *ClusterSpecifierPluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha1_envoy_summary_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSpecifierPluginInfo.ProtoReflect.Descriptor instead.
func (*ClusterSpecifierPluginInfo) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP(), []int{114}
}

func (x *ClusterSpecifierPluginInfo) GetExtension() *ExtensionInfo {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClusterSpecifierPluginInfo) GetIsOptional() bool {
	if x != nil {
		return x.IsOptional
	}
	return false
}

var File_backend_v1alpha1_envoy_summary_proto protoreflect.FileDescriptor

var file_backend_v1alpha1_envoy_summary_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x22, 0x8f, 0x03, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67,
	0x0a, 0x18, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0c, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x95, 0x04, 0x0a, 0x11, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0a,
	0x61, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x61, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x0a, 0x6c, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x64, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x64, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4b, 0x0a, 0x0a, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a,
	0x0a, 0x73, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x73, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x99,
	0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x12, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x8d, 0x03,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x73, 0x74,
	0x12, 0x5c, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x82, 0x02,
	0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x33, 0x0a,
	0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xac, 0x01, 0x0a,
	0x0e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a,
	0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x57, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x17, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x43, 0x50, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xaf, 0x07, 0x0a, 0x1c, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x44, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x64,
	0x73, 0x12, 0x50, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f,
	0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x78,
	0x66, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x78, 0x66, 0x66, 0x4e, 0x75,
	0x6d, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x78, 0x66, 0x66, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x58, 0x66, 0x66, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x76, 0x69, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x73, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x31, 0x30,
	0x30, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x04, 0x0a,
	0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f,
	0x6e, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x62, 0x0a,
	0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x07, 0x52, 0x44,
	0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xef, 0x07, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x62, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x64, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x1d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x21, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x0c, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xba, 0x09, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x16, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x41, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4e, 0x0a,
	0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x67, 0x0a,
	0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x68, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68, 0x65, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x61, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x04, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x60, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x0d, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x11, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x61, 0x75, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x67, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76,
	0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x47, 0x72,
	0x70, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x72, 0x70, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x70, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x61, 0x0a, 0x13, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x05, 0x0a,
	0x0f, 0x54, 0x43, 0x50, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x11, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x5a, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a,
	0x22, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x1b, 0x0a, 0x0e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x57,
	0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x50, 0x0a, 0x0d, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x32, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x68, 0x74,
	0x74, 0x70, 0x32, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x32, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x68, 0x74, 0x74, 0x70,
	0x32, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1c, 0x68, 0x74, 0x74, 0x70, 0x32, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a,
	0x24, 0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x32, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x74, 0x74,
	0x70, 0x32, 0x4d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x68, 0x74, 0x74, 0x70, 0x32, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x68, 0x74, 0x74, 0x70, 0x32, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x7a, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6c, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x21, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x62, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x62, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x48, 0x0a, 0x21, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x72, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0d, 0x77, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x64, 0x0a, 0x14, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x10, 0x6c, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x62, 0x53,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x6c, 0x62, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5f, 0x0a, 0x13, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x67, 0x6c, 0x65, 0x76, 0x5f, 0x6c, 0x62, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x67, 0x6c, 0x65, 0x76, 0x4c, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x61, 0x67, 0x6c,
	0x65, 0x76, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x16, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x6c, 0x62, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x73, 0x74, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x73, 0x74, 0x4c, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x6c, 0x65, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6c, 0x62, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x1b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4d, 0x0a, 0x24, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x1d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x47, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x26, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x6c,
	0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c,
	0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x6e, 0x73, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6e, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x54, 0x63, 0x70, 0x46,
	0x6f, 0x72, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x64, 0x0a, 0x18,
	0x64, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x64, 0x6e, 0x73,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6e,
	0x73, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x44, 0x6e, 0x73, 0x54, 0x74, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x5e, 0x0a, 0x12, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x64, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x65, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x71, 0x64, 0x6e, 0x22, 0xe3, 0x02, 0x0a, 0x0f, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x46, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x71, 0x64, 0x6e,
	0x22, 0xf6, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x07, 0x0a, 0x12, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f,
	0x6e, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x62, 0x0a,
	0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x23,
	0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x77,
	0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x6d, 0x6f, 0x73, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x23, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x19, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe6, 0x04, 0x0a, 0x13, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x69, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x62, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f,
	0x41, 0x64, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x64,
	0x0a, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x13,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x4b, 0x65, 0x79, 0x22, 0x4e, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0xa9, 0x03, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x61, 0x66, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4b, 0x0a,
	0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x72, 0x65, 0x61,
	0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x38, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x77, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x72, 0x70, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x54, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x8a, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x15,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x10, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x74, 0x68, 0x54,
	0x61, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x61, 0x67, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x22, 0xe9, 0x04, 0x0a,
	0x0f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x54, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x21, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66,
	0x66, 0x12, 0x5a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a,
	0x19, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x17, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x49, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb0, 0x05, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x57, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x5e,
	0x0a, 0x12, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x5a,
	0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x47, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x17, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x1c, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x82, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x66, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x47, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4e, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x9b,
	0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4e, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x37, 0x0a, 0x0f,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4f, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x4f, 0x6e, 0x50, 0x65, 0x72, 0x54, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x17, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x67, 0x72, 0x70, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67, 0x72, 0x70, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x5a, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xf3, 0x02,
	0x0a, 0x08, 0x43, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a,
	0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x50, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x5f, 0x0a, 0x1d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x04,
	0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x73, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x8a, 0x01,
	0x0a, 0x14, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x48, 0x61,
	0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x41, 0x0a, 0x22,
	0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x22,
	0x32, 0x0a, 0x1c, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x19, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51,
	0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x9c, 0x02, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x62,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x6c, 0x62, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79,
	0x22, 0xf2, 0x02, 0x0a, 0x0e, 0x4c, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x62,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x66, 0x0a, 0x15, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x53, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x81, 0x01, 0x0a,
	0x10, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x51, 0x0a,
	0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0xbd, 0x0a, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x75,
	0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6c, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x72, 0x65, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5b, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x68, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x58, 0x0a, 0x10,
	0x74, 0x63, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x11, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x61, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e, 0x6f, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x45, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x45, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x4c, 0x6f, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x6c, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0xfa, 0x03, 0x0a, 0x13, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x62,
	0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x58, 0x0a,
	0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x48,
	0x74, 0x74, 0x70, 0x32, 0x12, 0x5f, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x42, 0x0a,
	0x12, 0x54, 0x63, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x70, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x10, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a,
	0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x37, 0x0a, 0x0e, 0x54, 0x6c,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x6c, 0x70, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x22, 0x55, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x13,
	0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x70, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22,
	0xdc, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99,
	0x02, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x0e, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x69, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x69, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x22, 0x32, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x0b, 0x0a, 0x14, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x47,
	0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x35, 0x78, 0x78, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x35, 0x78, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x4b, 0x0a, 0x22, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16,
	0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x64, 0x65, 0x76, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x64, 0x65, 0x76, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x2a, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x26, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x25, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x28, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x26, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x64, 0x65, 0x76, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x21, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x64, 0x65, 0x76, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x35, 0x78, 0x78, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x35,
	0x78, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x54, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x65, 0x62, 0x69,
	0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x66, 0x72, 0x65, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x66, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe0, 0x04, 0x0a, 0x12, 0x4c, 0x62,
	0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x68, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x62, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x62, 0x53, 0x75, 0x62,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x6e, 0x69,
	0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x79, 0x12, 0x1e,
	0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x41, 0x6e, 0x79, 0x12, 0x38,
	0x0a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a,
	0x14, 0x4c, 0x62, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x52, 0x69,
	0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x33, 0x0a, 0x12, 0x4d, 0x61, 0x67, 0x6c, 0x65, 0x76, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x73, 0x74, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x4c, 0x65, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x61, 0x73, 0x22, 0x59, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4b, 0x65,
	0x79, 0x22, 0xfa, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x5f, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x50, 0x61, 0x6e, 0x69,
	0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x62, 0x0a, 0x14, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x4c,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x7a, 0x6f, 0x6e,
	0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e,
	0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x62, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e,
	0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x43,
	0x0a, 0x1f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e,
	0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x48, 0x63, 0x12, 0x4d, 0x0a, 0x24, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x7a, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x94,
	0x01, 0x0a, 0x15, 0x5a, 0x6f, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x62,
	0x0a, 0x14, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x41, 0x77,
	0x61, 0x72, 0x65, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x11, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x77, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1e, 0x0a, 0x1c, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4c,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x1d,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x4c, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a,
	0x18, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x61, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x63, 0x70,
	0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74,
	0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x93, 0x01, 0x0a, 0x10, 0x54, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0f,
	0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x54, 0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x59, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x14,
	0x45, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2a, 0x49, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x44, 0x45, 0x43, 0x41, 0x52, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xbf, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x58, 0x44, 0x53, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x08, 0x2a, 0x3d, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x97, 0x01, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45,
	0x44, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x53,
	0x54, 0x10, 0x05, 0x2a, 0x3e, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x69, 0x61, 0x6d, 0x61, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_v1alpha1_envoy_summary_proto_rawDescOnce sync.Once
	file_backend_v1alpha1_envoy_summary_proto_rawDescData = file_backend_v1alpha1_envoy_summary_proto_rawDesc
)

func file_backend_v1alpha1_envoy_summary_proto_rawDescGZIP() []byte {
	file_backend_v1alpha1_envoy_summary_proto_rawDescOnce.Do(func() {
		file_backend_v1alpha1_envoy_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_v1alpha1_envoy_summary_proto_rawDescData)
	})
	return file_backend_v1alpha1_envoy_summary_proto_rawDescData
}

var file_backend_v1alpha1_envoy_summary_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_backend_v1alpha1_envoy_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 120)
var file_backend_v1alpha1_envoy_summary_proto_goTypes = []any{
	(ProxyMode)(0),                             // 0: navigator.backend.v1alpha1.ProxyMode
	(ListenerType)(0),                          // 1: navigator.backend.v1alpha1.ListenerType
	(RouteType)(0),                             // 2: navigator.backend.v1alpha1.RouteType
	(ClusterType)(0),                           // 3: navigator.backend.v1alpha1.ClusterType
	(ClusterDirection)(0),                      // 4: navigator.backend.v1alpha1.ClusterDirection
	(*BootstrapSummary)(nil),                   // 5: navigator.backend.v1alpha1.BootstrapSummary
	(*NodeSummary)(nil),                        // 6: navigator.backend.v1alpha1.NodeSummary
	(*LocalityInfo)(nil),                       // 7: navigator.backend.v1alpha1.LocalityInfo
	(*DynamicConfigInfo)(nil),                  // 8: navigator.backend.v1alpha1.DynamicConfigInfo
	(*ConfigSourceInfo)(nil),                   // 9: navigator.backend.v1alpha1.ConfigSourceInfo
	(*ClusterManagerInfo)(nil),                 // 10: navigator.backend.v1alpha1.ClusterManagerInfo
	(*ListenerSummary)(nil),                    // 11: navigator.backend.v1alpha1.ListenerSummary
	(*FilterChainSummary)(nil),                 // 12: navigator.backend.v1alpha1.FilterChainSummary
	(*FilterChainMatchInfo)(nil),               // 13: navigator.backend.v1alpha1.FilterChainMatchInfo
	(*TLSContextInfo)(nil),                     // 14: navigator.backend.v1alpha1.TLSContextInfo
	(*ListenerFilterSummary)(nil),              // 15: navigator.backend.v1alpha1.ListenerFilterSummary
	(*FilterSummary)(nil),                      // 16: navigator.backend.v1alpha1.FilterSummary
	(*HTTPConnectionManagerSummary)(nil),       // 17: navigator.backend.v1alpha1.HTTPConnectionManagerSummary
	(*RouteConfigInfo)(nil),                    // 18: navigator.backend.v1alpha1.RouteConfigInfo
	(*RDSInfo)(nil),                            // 19: navigator.backend.v1alpha1.RDSInfo
	(*HTTPFilterSummary)(nil),                  // 20: navigator.backend.v1alpha1.HTTPFilterSummary
	(*AccessLogInfo)(nil),                      // 21: navigator.backend.v1alpha1.AccessLogInfo
	(*VirtualHostInfo)(nil),                    // 22: navigator.backend.v1alpha1.VirtualHostInfo
	(*RouteInfo)(nil),                          // 23: navigator.backend.v1alpha1.RouteInfo
	(*RouteMatchInfo)(nil),                     // 24: navigator.backend.v1alpha1.RouteMatchInfo
	(*RouteActionInfo)(nil),                    // 25: navigator.backend.v1alpha1.RouteActionInfo
	(*TCPProxySummary)(nil),                    // 26: navigator.backend.v1alpha1.TCPProxySummary
	(*ClusterSummary)(nil),                     // 27: navigator.backend.v1alpha1.ClusterSummary
	(*EndpointSummary)(nil),                    // 28: navigator.backend.v1alpha1.EndpointSummary
	(*EndpointInfo)(nil),                       // 29: navigator.backend.v1alpha1.EndpointInfo
	(*RouteConfigSummary)(nil),                 // 30: navigator.backend.v1alpha1.RouteConfigSummary
	(*HeaderValueOption)(nil),                  // 31: navigator.backend.v1alpha1.HeaderValueOption
	(*HeaderInfo)(nil),                         // 32: navigator.backend.v1alpha1.HeaderInfo
	(*WeightedClusterInfo)(nil),                // 33: navigator.backend.v1alpha1.WeightedClusterInfo
	(*RegexRewriteInfo)(nil),                   // 34: navigator.backend.v1alpha1.RegexRewriteInfo
	(*RuntimeFractionInfo)(nil),                // 35: navigator.backend.v1alpha1.RuntimeFractionInfo
	(*FractionInfo)(nil),                       // 36: navigator.backend.v1alpha1.FractionInfo
	(*HeaderMatcherInfo)(nil),                  // 37: navigator.backend.v1alpha1.HeaderMatcherInfo
	(*RangeMatchInfo)(nil),                     // 38: navigator.backend.v1alpha1.RangeMatchInfo
	(*QueryParameterMatcherInfo)(nil),          // 39: navigator.backend.v1alpha1.QueryParameterMatcherInfo
	(*GrpcRouteMatchInfo)(nil),                 // 40: navigator.backend.v1alpha1.GrpcRouteMatchInfo
	(*TlsContextMatchInfo)(nil),                // 41: navigator.backend.v1alpha1.TlsContextMatchInfo
	(*MetadataMatcherInfo)(nil),                // 42: navigator.backend.v1alpha1.MetadataMatcherInfo
	(*MetadataMatchPathInfo)(nil),              // 43: navigator.backend.v1alpha1.MetadataMatchPathInfo
	(*DecoratorInfo)(nil),                      // 44: navigator.backend.v1alpha1.DecoratorInfo
	(*TracingInfo)(nil),                        // 45: navigator.backend.v1alpha1.TracingInfo
	(*CustomTagInfo)(nil),                      // 46: navigator.backend.v1alpha1.CustomTagInfo
	(*RetryPolicyInfo)(nil),                    // 47: navigator.backend.v1alpha1.RetryPolicyInfo
	(*RetryBackOffInfo)(nil),                   // 48: navigator.backend.v1alpha1.RetryBackOffInfo
	(*RequestMirrorPolicy)(nil),                // 49: navigator.backend.v1alpha1.RequestMirrorPolicy
	(*RateLimitInfo)(nil),                      // 50: navigator.backend.v1alpha1.RateLimitInfo
	(*RateLimitActionInfo)(nil),                // 51: navigator.backend.v1alpha1.RateLimitActionInfo
	(*RateLimitDescriptorInfo)(nil),            // 52: navigator.backend.v1alpha1.RateLimitDescriptorInfo
	(*RateLimitDescriptorEntryInfo)(nil),       // 53: navigator.backend.v1alpha1.RateLimitDescriptorEntryInfo
	(*RequestHeadersInfo)(nil),                 // 54: navigator.backend.v1alpha1.RequestHeadersInfo
	(*GenericKeyInfo)(nil),                     // 55: navigator.backend.v1alpha1.GenericKeyInfo
	(*HeaderValueMatchInfo)(nil),               // 56: navigator.backend.v1alpha1.HeaderValueMatchInfo
	(*DynamicMetadataInfo)(nil),                // 57: navigator.backend.v1alpha1.DynamicMetadataInfo
	(*MetadataInfo)(nil),                       // 58: navigator.backend.v1alpha1.MetadataInfo
	(*MetadataKeyInfo)(nil),                    // 59: navigator.backend.v1alpha1.MetadataKeyInfo
	(*ExtensionInfo)(nil),                      // 60: navigator.backend.v1alpha1.ExtensionInfo
	(*HedgePolicyInfo)(nil),                    // 61: navigator.backend.v1alpha1.HedgePolicyInfo
	(*MaxStreamDurationInfo)(nil),              // 62: navigator.backend.v1alpha1.MaxStreamDurationInfo
	(*VirtualClusterInfo)(nil),                 // 63: navigator.backend.v1alpha1.VirtualClusterInfo
	(*CorsInfo)(nil),                           // 64: navigator.backend.v1alpha1.CorsInfo
	(*UpgradeConfigInfo)(nil),                  // 65: navigator.backend.v1alpha1.UpgradeConfigInfo
	(*InternalRedirectPolicyInfo)(nil),         // 66: navigator.backend.v1alpha1.InternalRedirectPolicyInfo
	(*InternalRedirectPredicateInfo)(nil),      // 67: navigator.backend.v1alpha1.InternalRedirectPredicateInfo
	(*HashPolicyInfo)(nil),                     // 68: navigator.backend.v1alpha1.HashPolicyInfo
	(*HashPolicyHeaderInfo)(nil),               // 69: navigator.backend.v1alpha1.HashPolicyHeaderInfo
	(*HashPolicyCookieInfo)(nil),               // 70: navigator.backend.v1alpha1.HashPolicyCookieInfo
	(*HashPolicyConnectionPropertiesInfo)(nil), // 71: navigator.backend.v1alpha1.HashPolicyConnectionPropertiesInfo
	(*HashPolicyQueryParameterInfo)(nil),       // 72: navigator.backend.v1alpha1.HashPolicyQueryParameterInfo
	(*HashPolicyFilterStateInfo)(nil),          // 73: navigator.backend.v1alpha1.HashPolicyFilterStateInfo
	(*TunnelingConfigInfo)(nil),                // 74: navigator.backend.v1alpha1.TunnelingConfigInfo
	(*EndpointConfigInfo)(nil),                 // 75: navigator.backend.v1alpha1.EndpointConfigInfo
	(*LocalityLbEndpointsInfo)(nil),            // 76: navigator.backend.v1alpha1.LocalityLbEndpointsInfo
	(*LbEndpointInfo)(nil),                     // 77: navigator.backend.v1alpha1.LbEndpointInfo
	(*EndpointDetailsInfo)(nil),                // 78: navigator.backend.v1alpha1.EndpointDetailsInfo
	(*HealthCheckConfigInfo)(nil),              // 79: navigator.backend.v1alpha1.HealthCheckConfigInfo
	(*PolicyInfo)(nil),                         // 80: navigator.backend.v1alpha1.PolicyInfo
	(*DropOverloadInfo)(nil),                   // 81: navigator.backend.v1alpha1.DropOverloadInfo
	(*HealthCheckInfo)(nil),                    // 82: navigator.backend.v1alpha1.HealthCheckInfo
	(*HttpHealthCheckInfo)(nil),                // 83: navigator.backend.v1alpha1.HttpHealthCheckInfo
	(*TcpHealthCheckInfo)(nil),                 // 84: navigator.backend.v1alpha1.TcpHealthCheckInfo
	(*GrpcHealthCheckInfo)(nil),                // 85: navigator.backend.v1alpha1.GrpcHealthCheckInfo
	(*CustomHealthCheckInfo)(nil),              // 86: navigator.backend.v1alpha1.CustomHealthCheckInfo
	(*EventServiceConfigInfo)(nil),             // 87: navigator.backend.v1alpha1.EventServiceConfigInfo
	(*TlsOptionsInfo)(nil),                     // 88: navigator.backend.v1alpha1.TlsOptionsInfo
	(*TransportSocketInfo)(nil),                // 89: navigator.backend.v1alpha1.TransportSocketInfo
	(*StatusRangeInfo)(nil),                    // 90: navigator.backend.v1alpha1.StatusRangeInfo
	(*StringMatcherInfo)(nil),                  // 91: navigator.backend.v1alpha1.StringMatcherInfo
	(*CircuitBreakersInfo)(nil),                // 92: navigator.backend.v1alpha1.CircuitBreakersInfo
	(*ThresholdInfo)(nil),                      // 93: navigator.backend.v1alpha1.ThresholdInfo
	(*CommonHttpProtocolOptionsInfo)(nil),      // 94: navigator.backend.v1alpha1.CommonHttpProtocolOptionsInfo
	(*HostInfo)(nil),                           // 95: navigator.backend.v1alpha1.HostInfo
	(*SocketAddressInfo)(nil),                  // 96: navigator.backend.v1alpha1.SocketAddressInfo
	(*PipeInfo)(nil),                           // 97: navigator.backend.v1alpha1.PipeInfo
	(*OutlierDetectionInfo)(nil),               // 98: navigator.backend.v1alpha1.OutlierDetectionInfo
	(*UpstreamBindConfigInfo)(nil),             // 99: navigator.backend.v1alpha1.UpstreamBindConfigInfo
	(*SocketOptionInfo)(nil),                   // 100: navigator.backend.v1alpha1.SocketOptionInfo
	(*LbSubsetConfigInfo)(nil),                 // 101: navigator.backend.v1alpha1.LbSubsetConfigInfo
	(*LbSubsetSelectorInfo)(nil),               // 102: navigator.backend.v1alpha1.LbSubsetSelectorInfo
	(*RingHashLbConfigInfo)(nil),               // 103: navigator.backend.v1alpha1.RingHashLbConfigInfo
	(*MaglevLbConfigInfo)(nil),                 // 104: navigator.backend.v1alpha1.MaglevLbConfigInfo
	(*OriginalDstLbConfigInfo)(nil),            // 105: navigator.backend.v1alpha1.OriginalDstLbConfigInfo
	(*LeastRequestLbConfigInfo)(nil),           // 106: navigator.backend.v1alpha1.LeastRequestLbConfigInfo
	(*RuntimeDoubleInfo)(nil),                  // 107: navigator.backend.v1alpha1.RuntimeDoubleInfo
	(*CommonLbConfigInfo)(nil),                 // 108: navigator.backend.v1alpha1.CommonLbConfigInfo
	(*ZoneAwareLbConfigInfo)(nil),              // 109: navigator.backend.v1alpha1.ZoneAwareLbConfigInfo
	(*LocalityLbConfigInfo)(nil),               // 110: navigator.backend.v1alpha1.LocalityLbConfigInfo
	(*LocalityWeightedLbConfigInfo)(nil),       // 111: navigator.backend.v1alpha1.LocalityWeightedLbConfigInfo
	(*ConsistentHashingLbConfigInfo)(nil),      // 112: navigator.backend.v1alpha1.ConsistentHashingLbConfigInfo
	(*UpstreamConnectionOptionsInfo)(nil),      // 113: navigator.backend.v1alpha1.UpstreamConnectionOptionsInfo
	(*TcpKeepaliveInfo)(nil),                   // 114: navigator.backend.v1alpha1.TcpKeepaliveInfo
	(*ClusterFilterInfo)(nil),                  // 115: navigator.backend.v1alpha1.ClusterFilterInfo
	(*DnsResolverInfo)(nil),                    // 116: navigator.backend.v1alpha1.DnsResolverInfo
	(*RefreshRateInfo)(nil),                    // 117: navigator.backend.v1alpha1.RefreshRateInfo
	(*EdsClusterConfigInfo)(nil),               // 118: navigator.backend.v1alpha1.EdsClusterConfigInfo
	(*ClusterSpecifierPluginInfo)(nil),         // 119: navigator.backend.v1alpha1.ClusterSpecifierPluginInfo
	nil,                                        // 120: navigator.backend.v1alpha1.NodeSummary.MetadataEntry
	nil,                                        // 121: navigator.backend.v1alpha1.EndpointInfo.MetadataEntry
	nil,                                        // 122: navigator.backend.v1alpha1.WeightedClusterInfo.MetadataMatchEntry
	nil,                                        // 123: navigator.backend.v1alpha1.LbEndpointInfo.MetadataEntry
	nil,                                        // 124: navigator.backend.v1alpha1.LbSubsetConfigInfo.DefaultSubsetEntry
}
var file_backend_v1alpha1_envoy_summary_proto_depIdxs = []int32{
	6,   // 0: navigator.backend.v1alpha1.BootstrapSummary.node:type_name -> navigator.backend.v1alpha1.NodeSummary
	8,   // 1: navigator.backend.v1alpha1.BootstrapSummary.dynamic_resources_config:type_name -> navigator.backend.v1alpha1.DynamicConfigInfo
	10,  // 2: navigator.backend.v1alpha1.BootstrapSummary.cluster_manager:type_name -> navigator.backend.v1alpha1.ClusterManagerInfo
	120, // 3: navigator.backend.v1alpha1.NodeSummary.metadata:type_name -> navigator.backend.v1alpha1.NodeSummary.MetadataEntry
	7,   // 4: navigator.backend.v1alpha1.NodeSummary.locality:type_name -> navigator.backend.v1alpha1.LocalityInfo
	0,   // 5: navigator.backend.v1alpha1.NodeSummary.proxy_mode:type_name -> navigator.backend.v1alpha1.ProxyMode
	9,   // 6: navigator.backend.v1alpha1.DynamicConfigInfo.ads_config:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	9,   // 7: navigator.backend.v1alpha1.DynamicConfigInfo.lds_config:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	9,   // 8: navigator.backend.v1alpha1.DynamicConfigInfo.cds_config:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	9,   // 9: navigator.backend.v1alpha1.DynamicConfigInfo.eds_config:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	9,   // 10: navigator.backend.v1alpha1.DynamicConfigInfo.rds_config:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	9,   // 11: navigator.backend.v1alpha1.DynamicConfigInfo.sds_config:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	12,  // 12: navigator.backend.v1alpha1.ListenerSummary.filter_chains:type_name -> navigator.backend.v1alpha1.FilterChainSummary
	1,   // 13: navigator.backend.v1alpha1.ListenerSummary.type:type_name -> navigator.backend.v1alpha1.ListenerType
	15,  // 14: navigator.backend.v1alpha1.ListenerSummary.listener_filters:type_name -> navigator.backend.v1alpha1.ListenerFilterSummary
	16,  // 15: navigator.backend.v1alpha1.FilterChainSummary.filters:type_name -> navigator.backend.v1alpha1.FilterSummary
	13,  // 16: navigator.backend.v1alpha1.FilterChainSummary.match:type_name -> navigator.backend.v1alpha1.FilterChainMatchInfo
	14,  // 17: navigator.backend.v1alpha1.FilterChainSummary.tls_context:type_name -> navigator.backend.v1alpha1.TLSContextInfo
	17,  // 18: navigator.backend.v1alpha1.FilterSummary.http_connection_manager:type_name -> navigator.backend.v1alpha1.HTTPConnectionManagerSummary
	26,  // 19: navigator.backend.v1alpha1.FilterSummary.tcp_proxy:type_name -> navigator.backend.v1alpha1.TCPProxySummary
	18,  // 20: navigator.backend.v1alpha1.HTTPConnectionManagerSummary.route_config:type_name -> navigator.backend.v1alpha1.RouteConfigInfo
	19,  // 21: navigator.backend.v1alpha1.HTTPConnectionManagerSummary.rds:type_name -> navigator.backend.v1alpha1.RDSInfo
	20,  // 22: navigator.backend.v1alpha1.HTTPConnectionManagerSummary.http_filters:type_name -> navigator.backend.v1alpha1.HTTPFilterSummary
	21,  // 23: navigator.backend.v1alpha1.HTTPConnectionManagerSummary.access_log:type_name -> navigator.backend.v1alpha1.AccessLogInfo
	22,  // 24: navigator.backend.v1alpha1.RouteConfigInfo.virtual_hosts:type_name -> navigator.backend.v1alpha1.VirtualHostInfo
	31,  // 25: navigator.backend.v1alpha1.RouteConfigInfo.response_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	31,  // 26: navigator.backend.v1alpha1.RouteConfigInfo.request_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	9,   // 27: navigator.backend.v1alpha1.RDSInfo.config_source:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	23,  // 28: navigator.backend.v1alpha1.VirtualHostInfo.routes:type_name -> navigator.backend.v1alpha1.RouteInfo
	63,  // 29: navigator.backend.v1alpha1.VirtualHostInfo.virtual_clusters:type_name -> navigator.backend.v1alpha1.VirtualClusterInfo
	50,  // 30: navigator.backend.v1alpha1.VirtualHostInfo.rate_limits:type_name -> navigator.backend.v1alpha1.RateLimitInfo
	31,  // 31: navigator.backend.v1alpha1.VirtualHostInfo.request_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	31,  // 32: navigator.backend.v1alpha1.VirtualHostInfo.response_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	64,  // 33: navigator.backend.v1alpha1.VirtualHostInfo.cors:type_name -> navigator.backend.v1alpha1.CorsInfo
	47,  // 34: navigator.backend.v1alpha1.VirtualHostInfo.retry_policy:type_name -> navigator.backend.v1alpha1.RetryPolicyInfo
	61,  // 35: navigator.backend.v1alpha1.VirtualHostInfo.hedge_policy:type_name -> navigator.backend.v1alpha1.HedgePolicyInfo
	24,  // 36: navigator.backend.v1alpha1.RouteInfo.match:type_name -> navigator.backend.v1alpha1.RouteMatchInfo
	25,  // 37: navigator.backend.v1alpha1.RouteInfo.action:type_name -> navigator.backend.v1alpha1.RouteActionInfo
	44,  // 38: navigator.backend.v1alpha1.RouteInfo.decorator:type_name -> navigator.backend.v1alpha1.DecoratorInfo
	31,  // 39: navigator.backend.v1alpha1.RouteInfo.request_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	31,  // 40: navigator.backend.v1alpha1.RouteInfo.response_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	45,  // 41: navigator.backend.v1alpha1.RouteInfo.tracing:type_name -> navigator.backend.v1alpha1.TracingInfo
	47,  // 42: navigator.backend.v1alpha1.RouteInfo.retry_policy:type_name -> navigator.backend.v1alpha1.RetryPolicyInfo
	49,  // 43: navigator.backend.v1alpha1.RouteInfo.request_mirror_policies:type_name -> navigator.backend.v1alpha1.RequestMirrorPolicy
	50,  // 44: navigator.backend.v1alpha1.RouteInfo.rate_limits:type_name -> navigator.backend.v1alpha1.RateLimitInfo
	61,  // 45: navigator.backend.v1alpha1.RouteInfo.hedge_policy:type_name -> navigator.backend.v1alpha1.HedgePolicyInfo
	62,  // 46: navigator.backend.v1alpha1.RouteInfo.max_stream_duration:type_name -> navigator.backend.v1alpha1.MaxStreamDurationInfo
	35,  // 47: navigator.backend.v1alpha1.RouteMatchInfo.runtime_fraction:type_name -> navigator.backend.v1alpha1.RuntimeFractionInfo
	37,  // 48: navigator.backend.v1alpha1.RouteMatchInfo.headers:type_name -> navigator.backend.v1alpha1.HeaderMatcherInfo
	39,  // 49: navigator.backend.v1alpha1.RouteMatchInfo.query_parameters:type_name -> navigator.backend.v1alpha1.QueryParameterMatcherInfo
	40,  // 50: navigator.backend.v1alpha1.RouteMatchInfo.grpc:type_name -> navigator.backend.v1alpha1.GrpcRouteMatchInfo
	41,  // 51: navigator.backend.v1alpha1.RouteMatchInfo.tls_context:type_name -> navigator.backend.v1alpha1.TlsContextMatchInfo
	42,  // 52: navigator.backend.v1alpha1.RouteMatchInfo.dynamic_metadata:type_name -> navigator.backend.v1alpha1.MetadataMatcherInfo
	33,  // 53: navigator.backend.v1alpha1.RouteActionInfo.weighted_clusters:type_name -> navigator.backend.v1alpha1.WeightedClusterInfo
	34,  // 54: navigator.backend.v1alpha1.RouteActionInfo.regex_rewrite:type_name -> navigator.backend.v1alpha1.RegexRewriteInfo
	47,  // 55: navigator.backend.v1alpha1.RouteActionInfo.retry_policy:type_name -> navigator.backend.v1alpha1.RetryPolicyInfo
	49,  // 56: navigator.backend.v1alpha1.RouteActionInfo.request_mirror_policies:type_name -> navigator.backend.v1alpha1.RequestMirrorPolicy
	50,  // 57: navigator.backend.v1alpha1.RouteActionInfo.rate_limits:type_name -> navigator.backend.v1alpha1.RateLimitInfo
	68,  // 58: navigator.backend.v1alpha1.RouteActionInfo.hash_policy:type_name -> navigator.backend.v1alpha1.HashPolicyInfo
	64,  // 59: navigator.backend.v1alpha1.RouteActionInfo.cors:type_name -> navigator.backend.v1alpha1.CorsInfo
	65,  // 60: navigator.backend.v1alpha1.RouteActionInfo.upgrade_configs:type_name -> navigator.backend.v1alpha1.UpgradeConfigInfo
	66,  // 61: navigator.backend.v1alpha1.RouteActionInfo.internal_redirect_policy:type_name -> navigator.backend.v1alpha1.InternalRedirectPolicyInfo
	61,  // 62: navigator.backend.v1alpha1.RouteActionInfo.hedge_policy:type_name -> navigator.backend.v1alpha1.HedgePolicyInfo
	62,  // 63: navigator.backend.v1alpha1.RouteActionInfo.max_stream_duration:type_name -> navigator.backend.v1alpha1.MaxStreamDurationInfo
	33,  // 64: navigator.backend.v1alpha1.TCPProxySummary.weighted_clusters:type_name -> navigator.backend.v1alpha1.WeightedClusterInfo
	21,  // 65: navigator.backend.v1alpha1.TCPProxySummary.access_log:type_name -> navigator.backend.v1alpha1.AccessLogInfo
	68,  // 66: navigator.backend.v1alpha1.TCPProxySummary.hash_policy:type_name -> navigator.backend.v1alpha1.HashPolicyInfo
	74,  // 67: navigator.backend.v1alpha1.TCPProxySummary.tunneling_config:type_name -> navigator.backend.v1alpha1.TunnelingConfigInfo
	75,  // 68: navigator.backend.v1alpha1.ClusterSummary.load_assignment:type_name -> navigator.backend.v1alpha1.EndpointConfigInfo
	82,  // 69: navigator.backend.v1alpha1.ClusterSummary.health_checks:type_name -> navigator.backend.v1alpha1.HealthCheckInfo
	92,  // 70: navigator.backend.v1alpha1.ClusterSummary.circuit_breakers:type_name -> navigator.backend.v1alpha1.CircuitBreakersInfo
	14,  // 71: navigator.backend.v1alpha1.ClusterSummary.tls_context:type_name -> navigator.backend.v1alpha1.TLSContextInfo
	94,  // 72: navigator.backend.v1alpha1.ClusterSummary.common_http_protocol_options:type_name -> navigator.backend.v1alpha1.CommonHttpProtocolOptionsInfo
	95,  // 73: navigator.backend.v1alpha1.ClusterSummary.hosts:type_name -> navigator.backend.v1alpha1.HostInfo
	95,  // 74: navigator.backend.v1alpha1.ClusterSummary.warming_hosts:type_name -> navigator.backend.v1alpha1.HostInfo
	98,  // 75: navigator.backend.v1alpha1.ClusterSummary.outlier_detection:type_name -> navigator.backend.v1alpha1.OutlierDetectionInfo
	99,  // 76: navigator.backend.v1alpha1.ClusterSummary.upstream_bind_config:type_name -> navigator.backend.v1alpha1.UpstreamBindConfigInfo
	101, // 77: navigator.backend.v1alpha1.ClusterSummary.lb_subset_config:type_name -> navigator.backend.v1alpha1.LbSubsetConfigInfo
	103, // 78: navigator.backend.v1alpha1.ClusterSummary.ring_hash_lb_config:type_name -> navigator.backend.v1alpha1.RingHashLbConfigInfo
	104, // 79: navigator.backend.v1alpha1.ClusterSummary.maglev_lb_config:type_name -> navigator.backend.v1alpha1.MaglevLbConfigInfo
	105, // 80: navigator.backend.v1alpha1.ClusterSummary.original_dst_lb_config:type_name -> navigator.backend.v1alpha1.OriginalDstLbConfigInfo
	106, // 81: navigator.backend.v1alpha1.ClusterSummary.least_request_lb_config:type_name -> navigator.backend.v1alpha1.LeastRequestLbConfigInfo
	108, // 82: navigator.backend.v1alpha1.ClusterSummary.common_lb_config:type_name -> navigator.backend.v1alpha1.CommonLbConfigInfo
	89,  // 83: navigator.backend.v1alpha1.ClusterSummary.transport_socket:type_name -> navigator.backend.v1alpha1.TransportSocketInfo
	113, // 84: navigator.backend.v1alpha1.ClusterSummary.upstream_connection_options:type_name -> navigator.backend.v1alpha1.UpstreamConnectionOptionsInfo
	115, // 85: navigator.backend.v1alpha1.ClusterSummary.filters:type_name -> navigator.backend.v1alpha1.ClusterFilterInfo
	9,   // 86: navigator.backend.v1alpha1.ClusterSummary.lrs_server:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	116, // 87: navigator.backend.v1alpha1.ClusterSummary.dns_resolvers:type_name -> navigator.backend.v1alpha1.DnsResolverInfo
	117, // 88: navigator.backend.v1alpha1.ClusterSummary.dns_failure_refresh_rate:type_name -> navigator.backend.v1alpha1.RefreshRateInfo
	118, // 89: navigator.backend.v1alpha1.ClusterSummary.eds_cluster_config:type_name -> navigator.backend.v1alpha1.EdsClusterConfigInfo
	4,   // 90: navigator.backend.v1alpha1.ClusterSummary.direction:type_name -> navigator.backend.v1alpha1.ClusterDirection
	29,  // 91: navigator.backend.v1alpha1.EndpointSummary.endpoints:type_name -> navigator.backend.v1alpha1.EndpointInfo
	3,   // 92: navigator.backend.v1alpha1.EndpointSummary.cluster_type:type_name -> navigator.backend.v1alpha1.ClusterType
	4,   // 93: navigator.backend.v1alpha1.EndpointSummary.direction:type_name -> navigator.backend.v1alpha1.ClusterDirection
	121, // 94: navigator.backend.v1alpha1.EndpointInfo.metadata:type_name -> navigator.backend.v1alpha1.EndpointInfo.MetadataEntry
	22,  // 95: navigator.backend.v1alpha1.RouteConfigSummary.virtual_hosts:type_name -> navigator.backend.v1alpha1.VirtualHostInfo
	31,  // 96: navigator.backend.v1alpha1.RouteConfigSummary.response_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	31,  // 97: navigator.backend.v1alpha1.RouteConfigSummary.request_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	119, // 98: navigator.backend.v1alpha1.RouteConfigSummary.cluster_specifier_plugins:type_name -> navigator.backend.v1alpha1.ClusterSpecifierPluginInfo
	2,   // 99: navigator.backend.v1alpha1.RouteConfigSummary.type:type_name -> navigator.backend.v1alpha1.RouteType
	32,  // 100: navigator.backend.v1alpha1.HeaderValueOption.header:type_name -> navigator.backend.v1alpha1.HeaderInfo
	122, // 101: navigator.backend.v1alpha1.WeightedClusterInfo.metadata_match:type_name -> navigator.backend.v1alpha1.WeightedClusterInfo.MetadataMatchEntry
	31,  // 102: navigator.backend.v1alpha1.WeightedClusterInfo.request_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	31,  // 103: navigator.backend.v1alpha1.WeightedClusterInfo.response_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	36,  // 104: navigator.backend.v1alpha1.RuntimeFractionInfo.default_value:type_name -> navigator.backend.v1alpha1.FractionInfo
	38,  // 105: navigator.backend.v1alpha1.HeaderMatcherInfo.range_match:type_name -> navigator.backend.v1alpha1.RangeMatchInfo
	43,  // 106: navigator.backend.v1alpha1.MetadataMatcherInfo.path:type_name -> navigator.backend.v1alpha1.MetadataMatchPathInfo
	36,  // 107: navigator.backend.v1alpha1.TracingInfo.client_sampling:type_name -> navigator.backend.v1alpha1.FractionInfo
	36,  // 108: navigator.backend.v1alpha1.TracingInfo.random_sampling:type_name -> navigator.backend.v1alpha1.FractionInfo
	36,  // 109: navigator.backend.v1alpha1.TracingInfo.overall_sampling:type_name -> navigator.backend.v1alpha1.FractionInfo
	46,  // 110: navigator.backend.v1alpha1.TracingInfo.custom_tags:type_name -> navigator.backend.v1alpha1.CustomTagInfo
	48,  // 111: navigator.backend.v1alpha1.RetryPolicyInfo.retry_back_off:type_name -> navigator.backend.v1alpha1.RetryBackOffInfo
	37,  // 112: navigator.backend.v1alpha1.RetryPolicyInfo.retriable_headers:type_name -> navigator.backend.v1alpha1.HeaderMatcherInfo
	37,  // 113: navigator.backend.v1alpha1.RetryPolicyInfo.retriable_request_headers:type_name -> navigator.backend.v1alpha1.HeaderMatcherInfo
	35,  // 114: navigator.backend.v1alpha1.RequestMirrorPolicy.runtime_fraction:type_name -> navigator.backend.v1alpha1.RuntimeFractionInfo
	51,  // 115: navigator.backend.v1alpha1.RateLimitInfo.actions:type_name -> navigator.backend.v1alpha1.RateLimitActionInfo
	52,  // 116: navigator.backend.v1alpha1.RateLimitInfo.limit:type_name -> navigator.backend.v1alpha1.RateLimitDescriptorInfo
	54,  // 117: navigator.backend.v1alpha1.RateLimitActionInfo.request_headers:type_name -> navigator.backend.v1alpha1.RequestHeadersInfo
	55,  // 118: navigator.backend.v1alpha1.RateLimitActionInfo.generic_key:type_name -> navigator.backend.v1alpha1.GenericKeyInfo
	56,  // 119: navigator.backend.v1alpha1.RateLimitActionInfo.header_value_match:type_name -> navigator.backend.v1alpha1.HeaderValueMatchInfo
	57,  // 120: navigator.backend.v1alpha1.RateLimitActionInfo.dynamic_metadata:type_name -> navigator.backend.v1alpha1.DynamicMetadataInfo
	58,  // 121: navigator.backend.v1alpha1.RateLimitActionInfo.metadata:type_name -> navigator.backend.v1alpha1.MetadataInfo
	60,  // 122: navigator.backend.v1alpha1.RateLimitActionInfo.extension:type_name -> navigator.backend.v1alpha1.ExtensionInfo
	53,  // 123: navigator.backend.v1alpha1.RateLimitDescriptorInfo.entries:type_name -> navigator.backend.v1alpha1.RateLimitDescriptorEntryInfo
	37,  // 124: navigator.backend.v1alpha1.HeaderValueMatchInfo.headers:type_name -> navigator.backend.v1alpha1.HeaderMatcherInfo
	59,  // 125: navigator.backend.v1alpha1.DynamicMetadataInfo.metadata_key:type_name -> navigator.backend.v1alpha1.MetadataKeyInfo
	59,  // 126: navigator.backend.v1alpha1.MetadataInfo.metadata_key:type_name -> navigator.backend.v1alpha1.MetadataKeyInfo
	36,  // 127: navigator.backend.v1alpha1.HedgePolicyInfo.additional_request_chance:type_name -> navigator.backend.v1alpha1.FractionInfo
	67,  // 128: navigator.backend.v1alpha1.InternalRedirectPolicyInfo.predicates:type_name -> navigator.backend.v1alpha1.InternalRedirectPredicateInfo
	69,  // 129: navigator.backend.v1alpha1.HashPolicyInfo.header:type_name -> navigator.backend.v1alpha1.HashPolicyHeaderInfo
	70,  // 130: navigator.backend.v1alpha1.HashPolicyInfo.cookie:type_name -> navigator.backend.v1alpha1.HashPolicyCookieInfo
	71,  // 131: navigator.backend.v1alpha1.HashPolicyInfo.connection_properties:type_name -> navigator.backend.v1alpha1.HashPolicyConnectionPropertiesInfo
	72,  // 132: navigator.backend.v1alpha1.HashPolicyInfo.query_parameter:type_name -> navigator.backend.v1alpha1.HashPolicyQueryParameterInfo
	73,  // 133: navigator.backend.v1alpha1.HashPolicyInfo.filter_state:type_name -> navigator.backend.v1alpha1.HashPolicyFilterStateInfo
	34,  // 134: navigator.backend.v1alpha1.HashPolicyHeaderInfo.regex_rewrite:type_name -> navigator.backend.v1alpha1.RegexRewriteInfo
	31,  // 135: navigator.backend.v1alpha1.TunnelingConfigInfo.headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	76,  // 136: navigator.backend.v1alpha1.EndpointConfigInfo.endpoints:type_name -> navigator.backend.v1alpha1.LocalityLbEndpointsInfo
	80,  // 137: navigator.backend.v1alpha1.EndpointConfigInfo.policy:type_name -> navigator.backend.v1alpha1.PolicyInfo
	7,   // 138: navigator.backend.v1alpha1.LocalityLbEndpointsInfo.locality:type_name -> navigator.backend.v1alpha1.LocalityInfo
	77,  // 139: navigator.backend.v1alpha1.LocalityLbEndpointsInfo.lb_endpoints:type_name -> navigator.backend.v1alpha1.LbEndpointInfo
	78,  // 140: navigator.backend.v1alpha1.LbEndpointInfo.endpoint:type_name -> navigator.backend.v1alpha1.EndpointDetailsInfo
	123, // 141: navigator.backend.v1alpha1.LbEndpointInfo.metadata:type_name -> navigator.backend.v1alpha1.LbEndpointInfo.MetadataEntry
	79,  // 142: navigator.backend.v1alpha1.EndpointDetailsInfo.health_check_config:type_name -> navigator.backend.v1alpha1.HealthCheckConfigInfo
	81,  // 143: navigator.backend.v1alpha1.PolicyInfo.drop_overloads:type_name -> navigator.backend.v1alpha1.DropOverloadInfo
	36,  // 144: navigator.backend.v1alpha1.DropOverloadInfo.drop_percentage:type_name -> navigator.backend.v1alpha1.FractionInfo
	83,  // 145: navigator.backend.v1alpha1.HealthCheckInfo.http_health_check:type_name -> navigator.backend.v1alpha1.HttpHealthCheckInfo
	84,  // 146: navigator.backend.v1alpha1.HealthCheckInfo.tcp_health_check:type_name -> navigator.backend.v1alpha1.TcpHealthCheckInfo
	85,  // 147: navigator.backend.v1alpha1.HealthCheckInfo.grpc_health_check:type_name -> navigator.backend.v1alpha1.GrpcHealthCheckInfo
	86,  // 148: navigator.backend.v1alpha1.HealthCheckInfo.custom_health_check:type_name -> navigator.backend.v1alpha1.CustomHealthCheckInfo
	87,  // 149: navigator.backend.v1alpha1.HealthCheckInfo.event_service:type_name -> navigator.backend.v1alpha1.EventServiceConfigInfo
	88,  // 150: navigator.backend.v1alpha1.HealthCheckInfo.tls_options:type_name -> navigator.backend.v1alpha1.TlsOptionsInfo
	89,  // 151: navigator.backend.v1alpha1.HealthCheckInfo.transport_socket:type_name -> navigator.backend.v1alpha1.TransportSocketInfo
	31,  // 152: navigator.backend.v1alpha1.HttpHealthCheckInfo.request_headers_to_add:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	90,  // 153: navigator.backend.v1alpha1.HttpHealthCheckInfo.expected_statuses:type_name -> navigator.backend.v1alpha1.StatusRangeInfo
	91,  // 154: navigator.backend.v1alpha1.HttpHealthCheckInfo.service_name_matcher:type_name -> navigator.backend.v1alpha1.StringMatcherInfo
	31,  // 155: navigator.backend.v1alpha1.GrpcHealthCheckInfo.initial_metadata:type_name -> navigator.backend.v1alpha1.HeaderValueOption
	9,   // 156: navigator.backend.v1alpha1.EventServiceConfigInfo.event_service:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	93,  // 157: navigator.backend.v1alpha1.CircuitBreakersInfo.thresholds:type_name -> navigator.backend.v1alpha1.ThresholdInfo
	93,  // 158: navigator.backend.v1alpha1.CircuitBreakersInfo.per_host_thresholds:type_name -> navigator.backend.v1alpha1.ThresholdInfo
	96,  // 159: navigator.backend.v1alpha1.HostInfo.socket_address:type_name -> navigator.backend.v1alpha1.SocketAddressInfo
	97,  // 160: navigator.backend.v1alpha1.HostInfo.pipe:type_name -> navigator.backend.v1alpha1.PipeInfo
	79,  // 161: navigator.backend.v1alpha1.HostInfo.health_check_config:type_name -> navigator.backend.v1alpha1.HealthCheckConfigInfo
	96,  // 162: navigator.backend.v1alpha1.UpstreamBindConfigInfo.source_address:type_name -> navigator.backend.v1alpha1.SocketAddressInfo
	100, // 163: navigator.backend.v1alpha1.UpstreamBindConfigInfo.socket_options:type_name -> navigator.backend.v1alpha1.SocketOptionInfo
	124, // 164: navigator.backend.v1alpha1.LbSubsetConfigInfo.default_subset:type_name -> navigator.backend.v1alpha1.LbSubsetConfigInfo.DefaultSubsetEntry
	102, // 165: navigator.backend.v1alpha1.LbSubsetConfigInfo.subset_selectors:type_name -> navigator.backend.v1alpha1.LbSubsetSelectorInfo
	107, // 166: navigator.backend.v1alpha1.LeastRequestLbConfigInfo.active_request_bias:type_name -> navigator.backend.v1alpha1.RuntimeDoubleInfo
	36,  // 167: navigator.backend.v1alpha1.CommonLbConfigInfo.healthy_panic_threshold:type_name -> navigator.backend.v1alpha1.FractionInfo
	109, // 168: navigator.backend.v1alpha1.CommonLbConfigInfo.zone_aware_lb_config:type_name -> navigator.backend.v1alpha1.ZoneAwareLbConfigInfo
	110, // 169: navigator.backend.v1alpha1.CommonLbConfigInfo.locality_lb_config:type_name -> navigator.backend.v1alpha1.LocalityLbConfigInfo
	112, // 170: navigator.backend.v1alpha1.CommonLbConfigInfo.consistent_hashing_lb_config:type_name -> navigator.backend.v1alpha1.ConsistentHashingLbConfigInfo
	36,  // 171: navigator.backend.v1alpha1.ZoneAwareLbConfigInfo.routing_enabled:type_name -> navigator.backend.v1alpha1.FractionInfo
	109, // 172: navigator.backend.v1alpha1.LocalityLbConfigInfo.zone_aware_lb_config:type_name -> navigator.backend.v1alpha1.ZoneAwareLbConfigInfo
	111, // 173: navigator.backend.v1alpha1.LocalityLbConfigInfo.locality_weighted_lb_config:type_name -> navigator.backend.v1alpha1.LocalityWeightedLbConfigInfo
	114, // 174: navigator.backend.v1alpha1.UpstreamConnectionOptionsInfo.tcp_keepalive:type_name -> navigator.backend.v1alpha1.TcpKeepaliveInfo
	100, // 175: navigator.backend.v1alpha1.UpstreamConnectionOptionsInfo.socket_options:type_name -> navigator.backend.v1alpha1.SocketOptionInfo
	96,  // 176: navigator.backend.v1alpha1.DnsResolverInfo.socket_address:type_name -> navigator.backend.v1alpha1.SocketAddressInfo
	9,   // 177: navigator.backend.v1alpha1.EdsClusterConfigInfo.eds_config:type_name -> navigator.backend.v1alpha1.ConfigSourceInfo
	60,  // 178: navigator.backend.v1alpha1.ClusterSpecifierPluginInfo.extension:type_name -> navigator.backend.v1alpha1.ExtensionInfo
	179, // [179:179] is the sub-list for method output_type
	179, // [179:179] is the sub-list for method input_type
	179, // [179:179] is the sub-list for extension type_name
	179, // [179:179] is the sub-list for extension extendee
	0,   // [0:179] is the sub-list for field type_name
}

func init() { file_backend_v1alpha1_envoy_summary_proto_init() }
func file_backend_v1alpha1_envoy_summary_proto_init() {
	if File_backend_v1alpha1_envoy_summary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BootstrapSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NodeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*LocalityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigSourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterManagerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListenerSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FilterChainSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FilterChainMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TLSContextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListenerFilterSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FilterSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*HTTPConnectionManagerSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RouteConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RDSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*HTTPFilterSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AccessLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*VirtualHostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RouteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RouteMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RouteActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*TCPProxySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*EndpointSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*EndpointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*RouteConfigSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*HeaderValueOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*HeaderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*WeightedClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*RegexRewriteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*RuntimeFractionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*FractionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*HeaderMatcherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*RangeMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*QueryParameterMatcherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GrpcRouteMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*TlsContextMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*MetadataMatcherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*MetadataMatchPathInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*DecoratorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*TracingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CustomTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*RetryPolicyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*RetryBackOffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*RequestMirrorPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*RateLimitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*RateLimitActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*RateLimitDescriptorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*RateLimitDescriptorEntryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*RequestHeadersInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*GenericKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*HeaderValueMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicMetadataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*MetadataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*MetadataKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*ExtensionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*HedgePolicyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*MaxStreamDurationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*VirtualClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CorsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*InternalRedirectPolicyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*InternalRedirectPredicateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*HashPolicyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*HashPolicyHeaderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*HashPolicyCookieInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*HashPolicyConnectionPropertiesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*HashPolicyQueryParameterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*HashPolicyFilterStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*TunnelingConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*EndpointConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*LocalityLbEndpointsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*LbEndpointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*EndpointDetailsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*DropOverloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*HttpHealthCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*TcpHealthCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*GrpcHealthCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*CustomHealthCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*EventServiceConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*TlsOptionsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*TransportSocketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*StatusRangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*StringMatcherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*CircuitBreakersInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*ThresholdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*CommonHttpProtocolOptionsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*SocketAddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*PipeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*OutlierDetectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*UpstreamBindConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*SocketOptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*LbSubsetConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*LbSubsetSelectorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*RingHashLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*MaglevLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*OriginalDstLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*LeastRequestLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*RuntimeDoubleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*CommonLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*ZoneAwareLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*LocalityLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*LocalityWeightedLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*ConsistentHashingLbConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*UpstreamConnectionOptionsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*TcpKeepaliveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterFilterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*DnsResolverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*EdsClusterConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha1_envoy_summary_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterSpecifierPluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_v1alpha1_envoy_summary_proto_msgTypes[11].OneofWrappers = []any{
		(*FilterSummary_HttpConnectionManager)(nil),
		(*FilterSummary_TcpProxy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_v1alpha1_envoy_summary_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   120,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_backend_v1alpha1_envoy_summary_proto_goTypes,
		DependencyIndexes: file_backend_v1alpha1_envoy_summary_proto_depIdxs,
		EnumInfos:         file_backend_v1alpha1_envoy_summary_proto_enumTypes,
		MessageInfos:      file_backend_v1alpha1_envoy_summary_proto_msgTypes,
	}.Build()
	File_backend_v1alpha1_envoy_summary_proto = out.File
	file_backend_v1alpha1_envoy_summary_proto_rawDesc = nil
	file_backend_v1alpha1_envoy_summary_proto_goTypes = nil
	file_backend_v1alpha1_envoy_summary_proto_depIdxs = nil
}

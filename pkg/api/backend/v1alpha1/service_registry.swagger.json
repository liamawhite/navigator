{
  "swagger": "2.0",
  "info": {
    "title": "backend/v1alpha1/service_registry.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ServiceRegistryService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1alpha1/services": {
      "get": {
        "summary": "ListServices returns all services in the specified namespace, or all namespaces if not specified.",
        "operationId": "ServiceRegistryService_ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "namespace is the Kubernetes namespace to list services from.\nIf not specified, services from all namespaces are returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceRegistryService"
        ]
      }
    },
    "/api/v1alpha1/services/{id}": {
      "get": {
        "summary": "GetService returns detailed information about a specific service.",
        "operationId": "ServiceRegistryService_GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the unique identifier of the service to retrieve.\nFormat: namespace:service-name (e.g., \"default:nginx-service\")",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceRegistryService"
        ]
      }
    },
    "/api/v1alpha1/services/{serviceId}/instances/{instanceId}": {
      "get": {
        "summary": "GetServiceInstance returns detailed information about a specific service instance.",
        "operationId": "ServiceRegistryService_GetServiceInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetServiceInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceId",
            "description": "service_id is the unique identifier of the service.\nFormat: namespace:service-name (e.g., \"default:nginx-service\")",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instanceId",
            "description": "instance_id is the unique identifier of the specific service instance.\nFormat: cluster_name:namespace:pod_name (e.g., \"prod-west:default:nginx-abc123\")",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceRegistryService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alpha1ContainerInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the container."
        },
        "image": {
          "type": "string",
          "description": "image is the container image being used."
        },
        "ready": {
          "type": "boolean",
          "description": "ready indicates whether the container is ready to serve requests."
        },
        "restartCount": {
          "type": "integer",
          "format": "int32",
          "description": "restart_count is the number of times the container has been restarted."
        },
        "status": {
          "type": "string",
          "description": "status indicates the current status of the container (e.g., \"Running\", \"Waiting\", \"Terminated\")."
        }
      },
      "description": "ContainerInfo represents information about a container in a pod."
    },
    "v1alpha1GetServiceInstanceResponse": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/v1alpha1ServiceInstanceDetail",
          "description": "instance contains the detailed service instance information."
        }
      },
      "description": "GetServiceInstanceResponse contains the requested service instance details."
    },
    "v1alpha1GetServiceResponse": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/v1alpha1Service",
          "description": "service contains the detailed service information."
        }
      },
      "description": "GetServiceResponse contains the requested service details."
    },
    "v1alpha1ListServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1Service"
          },
          "description": "services is the list of services found in the namespace(s)."
        }
      },
      "description": "ListServicesResponse contains the list of services in the requested namespace(s)."
    },
    "v1alpha1Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is a unique identifier for the service in format namespace:service-name (e.g., \"default:nginx-service\")."
        },
        "name": {
          "type": "string",
          "description": "name is the service name."
        },
        "namespace": {
          "type": "string",
          "description": "namespace is the Kubernetes namespace containing the service."
        },
        "instances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1ServiceInstance"
          },
          "description": "instances are the backend instances (pods) that serve this service."
        }
      },
      "description": "Service represents a Kubernetes service with its backing instances.\nServices in different clusters that share the same name and namespace are considered the same service."
    },
    "v1alpha1ServiceInstance": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "title": "instance_id is a unique identifier for this instance across all clusters.\nFormat: cluster_name:namespace:pod_name (e.g., \"prod-west:default:nginx-abc123\")"
        },
        "ip": {
          "type": "string",
          "description": "ip is the IP address of the instance."
        },
        "pod": {
          "type": "string",
          "description": "pod is the name of the Kubernetes pod backing this instance."
        },
        "namespace": {
          "type": "string",
          "description": "namespace is the Kubernetes namespace containing the pod."
        },
        "clusterName": {
          "type": "string",
          "description": "cluster_name is the name of the Kubernetes cluster this instance belongs to."
        },
        "isEnvoyPresent": {
          "type": "boolean",
          "description": "is_envoy_present indicates whether this instance has an Envoy proxy sidecar."
        }
      },
      "description": "ServiceInstance represents a single backend instance serving a service."
    },
    "v1alpha1ServiceInstanceDetail": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "title": "instance_id is a unique identifier for this instance across all clusters.\nFormat: cluster_name:namespace:pod_name (e.g., \"prod-west:default:nginx-abc123\")"
        },
        "ip": {
          "type": "string",
          "description": "ip is the IP address of the instance."
        },
        "pod": {
          "type": "string",
          "description": "pod is the name of the Kubernetes pod backing this instance."
        },
        "namespace": {
          "type": "string",
          "description": "namespace is the Kubernetes namespace containing the pod."
        },
        "clusterName": {
          "type": "string",
          "description": "cluster_name is the name of the Kubernetes cluster this instance belongs to."
        },
        "isEnvoyPresent": {
          "type": "boolean",
          "description": "is_envoy_present indicates whether this instance has an Envoy proxy sidecar."
        },
        "serviceName": {
          "type": "string",
          "description": "service_name is the name of the service this instance belongs to."
        },
        "podStatus": {
          "type": "string",
          "description": "pod_status indicates the current status of the pod (e.g., \"Running\", \"Pending\", \"Failed\")."
        },
        "createdAt": {
          "type": "string",
          "description": "created_at is the timestamp when the pod was created."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "labels are the Kubernetes labels applied to the pod."
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "annotations are the Kubernetes annotations applied to the pod."
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alpha1ContainerInfo"
          },
          "description": "containers lists all containers in the pod."
        },
        "nodeName": {
          "type": "string",
          "description": "node_name is the name of the Kubernetes node where the pod is running."
        }
      },
      "description": "ServiceInstanceDetail represents detailed information about a specific service instance."
    }
  }
}

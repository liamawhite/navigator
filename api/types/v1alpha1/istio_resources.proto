// Copyright 2025 Navigator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package navigator.types.v1alpha1;

option go_package = "github.com/liamawhite/navigator/pkg/api/types/v1alpha1";

// DestinationRule represents an Istio DestinationRule resource.
message DestinationRule {
  // name is the name of the destination rule.
  string name = 1;
  
  // namespace is the namespace of the destination rule.
  string namespace = 2;
  
  // raw_spec is the destination rule spec as a JSON string.
  string raw_spec = 3;
  
  // host is the name of a service from the service registry.
  string host = 4;
  
  // subsets is the list of named subsets for traffic routing.
  repeated DestinationRuleSubset subsets = 5;
  
  // export_to controls the visibility of this destination rule to other namespaces.
  repeated string export_to = 6;
  
  // workload_selector is the criteria used to select the specific set of pods/VMs.
  WorkloadSelector workload_selector = 7;
}

// DestinationRuleSubset represents a named subset for destination rule traffic routing.
message DestinationRuleSubset {
  // name is the name of the subset.
  string name = 1;
  
  // labels are the key-value pairs that define the subset.
  map<string, string> labels = 2;
}

// WorkloadSelector represents the workload selector criteria used across Istio resources.
message WorkloadSelector {
  // match_labels are the labels used to select pods/VMs.
  map<string, string> match_labels = 1;
}

// PolicyTargetReference represents a reference to a specific resource based on Istio's PolicyTargetReference.
message PolicyTargetReference {
  // group specifies the group of the target resource.
  string group = 1;
  
  // kind indicates the kind of target resource (required).
  string kind = 2;
  
  // name provides the name of the target resource (required).
  string name = 3;
  
  // namespace defines the namespace of the referenced resource.
  // When unspecified, the local namespace is inferred.
  string namespace = 4;
}

// EnvoyFilter represents an Istio EnvoyFilter resource.
message EnvoyFilter {
  // name is the name of the envoy filter.
  string name = 1;
  
  // namespace is the namespace of the envoy filter.
  string namespace = 2;
  
  // raw_spec is the envoy filter spec as a JSON string.
  string raw_spec = 3;
  
  // workload_selector is the criteria used to select the specific set of pods/VMs.
  WorkloadSelector workload_selector = 4;
  
  // target_refs is the list of resources that this envoy filter applies to.
  repeated PolicyTargetReference target_refs = 5;
}

// Gateway represents an Istio Gateway resource.
message Gateway {
  // name is the name of the gateway.
  string name = 1;
  
  // namespace is the namespace of the gateway.
  string namespace = 2;
  
  // raw_spec is the gateway spec as a JSON string.
  string raw_spec = 3;
  
  // selector is the workload selector for the gateway.
  map<string, string> selector = 4;
}

// Sidecar represents an Istio Sidecar resource.
message Sidecar {
  // name is the name of the sidecar.
  string name = 1;
  
  // namespace is the namespace of the sidecar.
  string namespace = 2;
  
  // raw_spec is the sidecar spec as a JSON string.
  string raw_spec = 3;
  
  // workload_selector is the criteria used to select the specific set of pods/VMs.
  WorkloadSelector workload_selector = 4;
}

// VirtualService represents an Istio VirtualService resource.
message VirtualService {
  // name is the name of the virtual service.
  string name = 1;
  
  // namespace is the namespace of the virtual service.
  string namespace = 2;
  
  // raw_spec is the virtual service spec as a JSON string.
  string raw_spec = 3;
  
  // hosts is the list of destination hosts that these routing rules apply to.
  repeated string hosts = 4;
  
  // gateways is the list of gateway names that should apply these routes.
  repeated string gateways = 5;
  
  // export_to controls the visibility of this virtual service to other namespaces.
  repeated string export_to = 6;
}

// RequestAuthentication represents an Istio RequestAuthentication resource.
message RequestAuthentication {
  // name is the name of the request authentication.
  string name = 1;
  
  // namespace is the namespace of the request authentication.
  string namespace = 2;
  
  // raw_spec is the request authentication spec as a JSON string.
  string raw_spec = 3;
  
  // selector is the criteria used to select the specific set of pods/VMs.
  WorkloadSelector selector = 4;
  
  // target_refs is the list of resources that this request authentication applies to.
  repeated PolicyTargetReference target_refs = 5;
}

// PeerAuthentication represents an Istio PeerAuthentication resource.
message PeerAuthentication {
  // name is the name of the peer authentication.
  string name = 1;
  
  // namespace is the namespace of the peer authentication.
  string namespace = 2;
  
  // raw_spec is the peer authentication spec as a JSON string.
  string raw_spec = 3;
  
  // selector is the criteria used to select the specific set of pods/VMs.
  WorkloadSelector selector = 4;
}

// IstioControlPlaneConfig represents configuration from the Istio control plane.
message IstioControlPlaneConfig {
  // pilot_scope_gateway_to_namespace indicates whether gateway selector scope is restricted to namespace.
  // When true, gateway selectors only match workloads in the same namespace as the gateway.
  // When false (default), gateway selectors match workloads across all namespaces.
  bool pilot_scope_gateway_to_namespace = 1;
  
  // root_namespace is the namespace where the Istio control plane is installed.
  // This is typically "istio-system" but can be customized in multi-cluster or external control plane deployments.
  // Resources in the root namespace have special behavior (e.g., EnvoyFilters apply globally).
  string root_namespace = 2;
}
syntax = "proto3";

package navigator.backend.v1alpha1;

option go_package = "github.com/liamawhite/navigator/pkg/api/backend/v1alpha1";

// ProxyMode indicates the type of proxy (extracted from node ID)
enum ProxyMode {
  // UNKNOWN_PROXY_MODE indicates an unknown or unspecified proxy mode
  UNKNOWN_PROXY_MODE = 0;
  // SIDECAR indicates a sidecar proxy (most common in Istio)
  SIDECAR = 1;
  // GATEWAY indicates a gateway proxy (ingress/egress gateways)
  GATEWAY = 2;
  // ROUTER indicates a router proxy
  ROUTER = 3;
}

// ListenerType indicates the type/direction of a listener
enum ListenerType {
  // VIRTUAL_INBOUND listeners are virtual inbound listeners (typically 0.0.0.0 without use_original_dst)
  VIRTUAL_INBOUND = 0;
  // VIRTUAL_OUTBOUND listeners are virtual outbound listeners (typically 0.0.0.0 with use_original_dst)
  VIRTUAL_OUTBOUND = 1;
  // SERVICE_OUTBOUND listeners for specific upstream services (service.namespace.svc.cluster.local:port)
  SERVICE_OUTBOUND = 2;
  // PORT_OUTBOUND listeners for generic port traffic outbound (e.g., "80", "443")
  PORT_OUTBOUND = 3;
  // PROXY_METRICS listeners serve Prometheus metrics (typically on port 15090)
  PROXY_METRICS = 4;
  // PROXY_HEALTHCHECK listeners serve health check endpoints (typically on port 15021)
  PROXY_HEALTHCHECK = 5;
  // ADMIN_XDS listeners serve Envoy xDS configuration (typically on port 15010)
  ADMIN_XDS = 6;
  // ADMIN_WEBHOOK listeners serve Istio webhook endpoints (typically on port 15012)
  ADMIN_WEBHOOK = 7;
  // ADMIN_DEBUG listeners serve Envoy debug/admin interface (typically on port 15014)
  ADMIN_DEBUG = 8;
}

// RouteType indicates the type/category of a route configuration
enum RouteType {
  // PORT_BASED routes are routes with just port numbers (e.g., "80", "443", "15010")
  PORT_BASED = 0;
  // SERVICE_SPECIFIC routes are routes with service hostnames and ports (e.g., "backend.demo.svc.cluster.local:8080", external domains from ServiceEntries)
  SERVICE_SPECIFIC = 1;
  // STATIC routes are Istio/Envoy internal routing patterns (e.g., "InboundPassthroughCluster", "inbound|8080||")
  STATIC = 2;
}

// BootstrapSummary contains essential bootstrap configuration information
message BootstrapSummary {
  // node contains information about the Envoy node
  NodeSummary node = 1;
  
  // static_resources_version indicates the version of static resources
  string static_resources_version = 2;
  
  // dynamic_resources_config contains configuration for dynamic resources
  DynamicConfigInfo dynamic_resources_config = 3;
  
  // admin_port is the port of the Envoy admin interface
  uint32 admin_port = 4;
  
  // admin_address is the address of the Envoy admin interface
  string admin_address = 5;
  
  // cluster_manager contains cluster manager configuration
  ClusterManagerInfo cluster_manager = 6;
}

// NodeSummary contains information about the Envoy node
message NodeSummary {
  // id is the node identifier
  string id = 1;
  
  // cluster is the service cluster name
  string cluster = 2;
  
  // metadata contains node metadata as key-value pairs
  map<string, string> metadata = 3;
  
  // locality contains locality information
  LocalityInfo locality = 4;
  
  // proxy_mode is the proxy mode extracted from node ID
  ProxyMode proxy_mode = 5;
}

// LocalityInfo contains locality information
message LocalityInfo {
  // region is the region name
  string region = 1;
  
  // zone is the zone name
  string zone = 2;
}

// DynamicConfigInfo contains information about dynamic resource configuration
message DynamicConfigInfo {
  // ads_config contains ADS configuration source information
  ConfigSourceInfo ads_config = 1;
  
  // lds_config contains LDS configuration source information
  ConfigSourceInfo lds_config = 2;
  
  // cds_config contains CDS configuration source information
  ConfigSourceInfo cds_config = 3;
  
  // eds_config contains EDS configuration source information
  ConfigSourceInfo eds_config = 4;
  
  // rds_config contains RDS configuration source information
  ConfigSourceInfo rds_config = 5;
  
  // sds_config contains SDS configuration source information
  ConfigSourceInfo sds_config = 6;
  
  // initial_fetch_timeout is the timeout for initial resource fetch
  string initial_fetch_timeout = 7;
}

// ConfigSourceInfo contains information about a configuration source
message ConfigSourceInfo {
  // config_source_specifier indicates the type of config source
  string config_source_specifier = 1;
  
  // transport_api_version is the transport API version
  string transport_api_version = 2;
  
  // api_type indicates the API type (REST, gRPC, etc.)
  string api_type = 3;
}

// ClusterManagerInfo contains cluster manager configuration
message ClusterManagerInfo {
  // local_cluster_name is the name of the local cluster
  string local_cluster_name = 1;
  
  // outlier_detection indicates if outlier detection is enabled
  bool outlier_detection = 2;
  
  // upstream_bind_config indicates if upstream bind config is present
  bool upstream_bind_config = 3;
  
  // load_stats_config indicates if load stats config is present
  bool load_stats_config = 4;
  
  // connect_timeout is the connection timeout
  string connect_timeout = 5;
  
  // per_connection_buffer_limit_bytes is the buffer limit per connection
  uint32 per_connection_buffer_limit_bytes = 6;
}

// ListenerSummary contains essential listener configuration information
message ListenerSummary {
  // name is the listener name
  string name = 1;
  
  // address is the listener address
  string address = 2;
  
  // port is the listener port
  uint32 port = 3;
  
  // filter_chains contains the filter chains
  repeated FilterChainSummary filter_chains = 4;
  
  // type indicates the listener type and direction
  ListenerType type = 5;
  
  // use_original_dst indicates if original destination is used
  bool use_original_dst = 6;
  
  // listener_filters contains listener-level filters
  repeated ListenerFilterSummary listener_filters = 7;
  
  // raw_config contains the raw listener configuration in JSON format
  string raw_config = 8;
}

// FilterChainSummary contains filter chain information
message FilterChainSummary {
  // name is the filter chain name
  string name = 1;
  
  // filters contains the network filters in this chain
  repeated FilterSummary filters = 2;
  
  // match contains filter chain match criteria
  FilterChainMatchInfo match = 3;
  
  // tls_context contains TLS context information
  TLSContextInfo tls_context = 4;
}

// FilterChainMatchInfo contains filter chain matching criteria
message FilterChainMatchInfo {
  // server_names contains SNI server names
  repeated string server_names = 1;
  
  // transport_protocol is the transport protocol
  string transport_protocol = 2;
  
  // application_protocols contains ALPN protocols
  repeated string application_protocols = 3;
  
  // direct_source_prefix_ranges contains source IP prefix ranges
  repeated string direct_source_prefix_ranges = 4;
  
  // destination_port is the destination port
  uint32 destination_port = 5;
}

// TLSContextInfo contains TLS context information
message TLSContextInfo {
  // common_tls_context indicates if common TLS context is present
  bool common_tls_context = 1;
  
  // require_client_certificate indicates if client cert is required
  bool require_client_certificate = 2;
  
  // session_ticket_keys indicates if session ticket keys are present
  bool session_ticket_keys = 3;
}

// ListenerFilterSummary contains listener filter information
message ListenerFilterSummary {
  // name is the filter name
  string name = 1;
  
  // typed_config_type is the type URL of the typed config
  string typed_config_type = 2;
}

// FilterSummary contains network filter information
message FilterSummary {
  // name is the filter name
  string name = 1;
  
  // typed_config contains filter-specific configuration
  oneof typed_config {
    HTTPConnectionManagerSummary http_connection_manager = 2;
    TCPProxySummary tcp_proxy = 3;
  }
}

// HTTPConnectionManagerSummary contains HTTP connection manager configuration
message HTTPConnectionManagerSummary {
  // codec_type is the HTTP codec type
  string codec_type = 1;
  
  // route_config contains inline route configuration
  RouteConfigInfo route_config = 2;
  
  // rds contains RDS configuration
  RDSInfo rds = 3;
  
  // http_filters contains HTTP filters
  repeated HTTPFilterSummary http_filters = 4;
  
  // access_log contains access log configuration
  repeated AccessLogInfo access_log = 5;
  
  // use_remote_address indicates if remote address should be used
  bool use_remote_address = 6;
  
  // xff_num_trusted_hops is the number of trusted XFF hops
  uint32 xff_num_trusted_hops = 7;
  
  // skip_xff_append indicates if XFF append should be skipped
  bool skip_xff_append = 8;
  
  // via is the Via header value
  string via = 9;
  
  // generate_request_id indicates if request ID should be generated
  bool generate_request_id = 10;
  
  // forward_client_cert_details indicates how client cert details are forwarded
  string forward_client_cert_details = 11;
  
  // set_current_client_cert_details indicates if current client cert details are set
  bool set_current_client_cert_details = 12;
  
  // proxy_100_continue indicates if 100-continue is proxied
  bool proxy_100_continue = 13;
  
  // stream_idle_timeout is the stream idle timeout
  string stream_idle_timeout = 14;
  
  // request_timeout is the request timeout
  string request_timeout = 15;
  
  // drain_timeout is the drain timeout
  string drain_timeout = 16;
  
  // delayed_close_timeout is the delayed close timeout
  string delayed_close_timeout = 17;
  
  // server_name is the server name
  string server_name = 18;
}

// RouteConfigInfo contains route configuration information
message RouteConfigInfo {
  // name is the route configuration name
  string name = 1;
  
  // virtual_hosts contains virtual hosts
  repeated VirtualHostInfo virtual_hosts = 2;
  
  // internal_only_headers contains headers that are internal only
  repeated string internal_only_headers = 3;
  
  // response_headers_to_add contains headers to add to responses
  repeated HeaderValueOption response_headers_to_add = 4;
  
  // response_headers_to_remove contains headers to remove from responses
  repeated string response_headers_to_remove = 5;
  
  // request_headers_to_add contains headers to add to requests
  repeated HeaderValueOption request_headers_to_add = 6;
  
  // request_headers_to_remove contains headers to remove from requests
  repeated string request_headers_to_remove = 7;
  
  // validate_clusters indicates if clusters should be validated
  bool validate_clusters = 8;
}

// RDSInfo contains RDS configuration information
message RDSInfo {
  // config_source contains configuration source information
  ConfigSourceInfo config_source = 1;
  
  // route_config_name is the name of the route configuration
  string route_config_name = 2;
}

// HTTPFilterSummary contains HTTP filter information
message HTTPFilterSummary {
  // name is the filter name
  string name = 1;
  
  // typed_config_type is the type URL of the typed config
  string typed_config_type = 2;
  
  // disabled indicates if the filter is disabled
  bool disabled = 3;
}

// AccessLogInfo contains access log configuration
message AccessLogInfo {
  // name is the access log filter name
  string name = 1;
  
  // typed_config_type is the type URL of the typed config
  string typed_config_type = 2;
  
  // filter_type is the type of filter applied
  string filter_type = 3;
}

// VirtualHostInfo contains virtual host information
message VirtualHostInfo {
  // name is the virtual host name
  string name = 1;
  
  // domains contains the domains for this virtual host
  repeated string domains = 2;
  
  // routes contains the routes for this virtual host
  repeated RouteInfo routes = 3;
  
  // require_tls indicates TLS requirement
  string require_tls = 4;
  
  // virtual_clusters contains virtual cluster information
  repeated VirtualClusterInfo virtual_clusters = 5;
  
  // rate_limits contains rate limiting configuration
  repeated RateLimitInfo rate_limits = 6;
  
  // request_headers_to_add contains headers to add to requests
  repeated HeaderValueOption request_headers_to_add = 7;
  
  // request_headers_to_remove contains headers to remove from requests
  repeated string request_headers_to_remove = 8;
  
  // response_headers_to_add contains headers to add to responses
  repeated HeaderValueOption response_headers_to_add = 9;
  
  // response_headers_to_remove contains headers to remove from responses
  repeated string response_headers_to_remove = 10;
  
  // cors contains CORS configuration
  CorsInfo cors = 11;
  
  // include_request_attempt_count indicates if request attempt count is included
  bool include_request_attempt_count = 12;
  
  // include_attempt_count_in_response indicates if attempt count is included in response
  bool include_attempt_count_in_response = 13;
  
  // retry_policy contains retry policy
  RetryPolicyInfo retry_policy = 14;
  
  // hedge_policy contains hedge policy
  HedgePolicyInfo hedge_policy = 15;
}

// RouteInfo contains route information
message RouteInfo {
  // name is the route name
  string name = 1;
  
  // match contains route matching criteria
  RouteMatchInfo match = 2;
  
  // action contains route action
  RouteActionInfo action = 3;
  
  // decorator contains decorator information
  DecoratorInfo decorator = 4;
  
  // request_headers_to_add contains headers to add to requests
  repeated HeaderValueOption request_headers_to_add = 5;
  
  // request_headers_to_remove contains headers to remove from requests
  repeated string request_headers_to_remove = 6;
  
  // response_headers_to_add contains headers to add to responses
  repeated HeaderValueOption response_headers_to_add = 7;
  
  // response_headers_to_remove contains headers to remove from responses
  repeated string response_headers_to_remove = 8;
  
  // tracing contains tracing configuration
  TracingInfo tracing = 9;
  
  // timeout is the route timeout
  string timeout = 10;
  
  // idle_timeout is the idle timeout
  string idle_timeout = 11;
  
  // retry_policy contains retry policy
  RetryPolicyInfo retry_policy = 12;
  
  // request_mirror_policies contains request mirror policies
  repeated RequestMirrorPolicy request_mirror_policies = 13;
  
  // priority is the route priority
  string priority = 14;
  
  // rate_limits contains rate limiting configuration
  repeated RateLimitInfo rate_limits = 15;
  
  // include_vh_rate_limits indicates if VH rate limits are included
  bool include_vh_rate_limits = 16;
  
  // hedge_policy contains hedge policy
  HedgePolicyInfo hedge_policy = 17;
  
  // max_stream_duration contains max stream duration
  MaxStreamDurationInfo max_stream_duration = 18;
}

// RouteMatchInfo contains route matching information
message RouteMatchInfo {
  // path_specifier indicates the type of path matching
  string path_specifier = 1;
  
  // path contains the path to match
  string path = 2;
  
  // case_sensitive indicates if matching is case sensitive
  bool case_sensitive = 3;
  
  // runtime_fraction contains runtime fraction matching
  RuntimeFractionInfo runtime_fraction = 4;
  
  // headers contains header matching criteria
  repeated HeaderMatcherInfo headers = 5;
  
  // query_parameters contains query parameter matching criteria
  repeated QueryParameterMatcherInfo query_parameters = 6;
  
  // grpc contains gRPC-specific matching
  GrpcRouteMatchInfo grpc = 7;
  
  // tls_context contains TLS context matching
  TlsContextMatchInfo tls_context = 8;
  
  // dynamic_metadata contains dynamic metadata matching
  repeated MetadataMatcherInfo dynamic_metadata = 9;
}

// RouteActionInfo contains route action information
message RouteActionInfo {
  // action_type indicates the type of action
  string action_type = 1;
  
  // cluster is the destination cluster
  string cluster = 2;
  
  // cluster_header is the header containing cluster name
  string cluster_header = 3;
  
  // weighted_clusters contains weighted cluster destinations
  repeated WeightedClusterInfo weighted_clusters = 4;
  
  // cluster_not_found_response_code is the response code when cluster is not found
  string cluster_not_found_response_code = 5;
  
  // prefix_rewrite is the prefix rewrite rule
  string prefix_rewrite = 6;
  
  // regex_rewrite contains regex rewrite rule
  RegexRewriteInfo regex_rewrite = 7;
  
  // host_rewrite_specifier indicates how host rewriting is done
  string host_rewrite_specifier = 8;
  
  // host_rewrite_literal is the literal host rewrite value
  string host_rewrite_literal = 9;
  
  // auto_host_rewrite indicates if automatic host rewriting is enabled
  bool auto_host_rewrite = 10;
  
  // auto_host_rewrite_header is the header for automatic host rewriting
  string auto_host_rewrite_header = 11;
  
  // timeout is the action timeout
  string timeout = 12;
  
  // idle_timeout is the idle timeout
  string idle_timeout = 13;
  
  // retry_policy contains retry policy
  RetryPolicyInfo retry_policy = 14;
  
  // request_mirror_policies contains request mirror policies
  repeated RequestMirrorPolicy request_mirror_policies = 15;
  
  // priority is the action priority
  string priority = 16;
  
  // rate_limits contains rate limiting configuration
  repeated RateLimitInfo rate_limits = 17;
  
  // include_vh_rate_limits indicates if VH rate limits are included
  bool include_vh_rate_limits = 18;
  
  // hash_policy contains hash policy configuration
  repeated HashPolicyInfo hash_policy = 19;
  
  // cors contains CORS configuration
  CorsInfo cors = 20;
  
  // max_grpc_timeout is the maximum gRPC timeout
  string max_grpc_timeout = 21;
  
  // grpc_timeout_offset is the gRPC timeout offset
  string grpc_timeout_offset = 22;
  
  // upgrade_configs contains upgrade configuration
  repeated UpgradeConfigInfo upgrade_configs = 23;
  
  // internal_redirect_policy contains internal redirect policy
  InternalRedirectPolicyInfo internal_redirect_policy = 24;
  
  // max_internal_redirects is the maximum number of internal redirects
  uint32 max_internal_redirects = 25;
  
  // hedge_policy contains hedge policy
  HedgePolicyInfo hedge_policy = 26;
  
  // max_stream_duration contains max stream duration
  MaxStreamDurationInfo max_stream_duration = 27;
}

// TCPProxySummary contains TCP proxy configuration
message TCPProxySummary {
  // stat_prefix is the statistics prefix
  string stat_prefix = 1;
  
  // cluster is the destination cluster
  string cluster = 2;
  
  // weighted_clusters contains weighted cluster destinations
  repeated WeightedClusterInfo weighted_clusters = 3;
  
  // idle_timeout is the idle timeout
  string idle_timeout = 4;
  
  // downstream_idle_timeout is the downstream idle timeout
  string downstream_idle_timeout = 5;
  
  // upstream_idle_timeout is the upstream idle timeout
  string upstream_idle_timeout = 6;
  
  // access_log contains access log configuration
  repeated AccessLogInfo access_log = 7;
  
  // max_connect_attempts is the maximum connection attempts
  uint32 max_connect_attempts = 8;
  
  // hash_policy contains hash policy configuration
  repeated HashPolicyInfo hash_policy = 9;
  
  // tunneling_config contains tunneling configuration
  TunnelingConfigInfo tunneling_config = 10;
  
  // max_downstream_connection_duration is the maximum downstream connection duration
  string max_downstream_connection_duration = 11;
}

// ClusterSummary contains essential cluster configuration information
message ClusterSummary {
  // name is the cluster name
  string name = 1;
  
  // type is the cluster discovery type
  string type = 2;
  
  // connect_timeout is the connection timeout
  string connect_timeout = 3;
  
  // load_assignment contains endpoint configuration
  EndpointConfigInfo load_assignment = 4;
  
  // load_balancing_policy is the load balancing policy
  string load_balancing_policy = 5;
  
  // health_checks contains health check configuration
  repeated HealthCheckInfo health_checks = 6;
  
  // max_requests_per_connection is the maximum requests per connection
  uint32 max_requests_per_connection = 7;
  
  // http2_max_requests is the HTTP/2 maximum requests
  uint32 http2_max_requests = 8;
  
  // http2_max_requests_per_connection is the HTTP/2 maximum requests per connection
  uint32 http2_max_requests_per_connection = 9;
  
  // http2_max_concurrent_streams is the HTTP/2 maximum concurrent streams
  uint32 http2_max_concurrent_streams = 10;
  
  // http2_initial_stream_window_size is the HTTP/2 initial stream window size
  uint32 http2_initial_stream_window_size = 11;
  
  // http2_initial_connection_window_size is the HTTP/2 initial connection window size
  uint32 http2_initial_connection_window_size = 12;
  
  // http2_max_frame_size is the HTTP/2 maximum frame size
  uint32 http2_max_frame_size = 13;
  
  // http2_enable_keepalive indicates if HTTP/2 keepalive is enabled
  bool http2_enable_keepalive = 14;
  
  // circuit_breakers contains circuit breaker configuration
  CircuitBreakersInfo circuit_breakers = 15;
  
  // tls_context contains TLS configuration
  TLSContextInfo tls_context = 16;
  
  // common_http_protocol_options contains common HTTP protocol options
  CommonHttpProtocolOptionsInfo common_http_protocol_options = 17;
  
  // alt_stat_name is the alternative statistics name
  string alt_stat_name = 18;
  
  // per_connection_buffer_limit_bytes is the buffer limit per connection
  uint32 per_connection_buffer_limit_bytes = 19;
  
  // lb_policy is the load balancing policy
  string lb_policy = 20;
  
  // hosts contains static host configuration
  repeated HostInfo hosts = 21;
  
  // drain_connections_on_host_removal indicates if connections are drained on host removal
  bool drain_connections_on_host_removal = 22;
  
  // warming_hosts contains warming host information
  repeated HostInfo warming_hosts = 23;
  
  // outlier_detection contains outlier detection configuration
  OutlierDetectionInfo outlier_detection = 24;
  
  // cleanup_interval is the cleanup interval
  string cleanup_interval = 25;
  
  // upstream_bind_config contains upstream bind configuration
  UpstreamBindConfigInfo upstream_bind_config = 26;
  
  // lb_subset_config contains load balancing subset configuration
  LbSubsetConfigInfo lb_subset_config = 27;
  
  // ring_hash_lb_config contains ring hash load balancing configuration
  RingHashLbConfigInfo ring_hash_lb_config = 28;
  
  // maglev_lb_config contains Maglev load balancing configuration
  MaglevLbConfigInfo maglev_lb_config = 29;
  
  // original_dst_lb_config contains original destination load balancing configuration
  OriginalDstLbConfigInfo original_dst_lb_config = 30;
  
  // least_request_lb_config contains least request load balancing configuration
  LeastRequestLbConfigInfo least_request_lb_config = 31;
  
  // common_lb_config contains common load balancing configuration
  CommonLbConfigInfo common_lb_config = 32;
  
  // transport_socket contains transport socket configuration
  TransportSocketInfo transport_socket = 33;
  
  // protocol_selection is the protocol selection policy
  string protocol_selection = 34;
  
  // upstream_connection_options contains upstream connection options
  UpstreamConnectionOptionsInfo upstream_connection_options = 35;
  
  // close_connections_on_host_set_change indicates if connections are closed on host set change
  bool close_connections_on_host_set_change = 36;
  
  // ignore_health_on_host_removal indicates if health is ignored on host removal
  bool ignore_health_on_host_removal = 37;
  
  // filters contains cluster filters
  repeated ClusterFilterInfo filters = 38;
  
  // lrs_server contains LRS server configuration
  ConfigSourceInfo lrs_server = 39;
  
  // dns_lookup_family is the DNS lookup family
  string dns_lookup_family = 40;
  
  // dns_resolvers contains DNS resolver configuration
  repeated DnsResolverInfo dns_resolvers = 41;
  
  // use_tcp_for_dns_lookups indicates if TCP is used for DNS lookups
  bool use_tcp_for_dns_lookups = 42;
  
  // dns_failure_refresh_rate contains DNS failure refresh rate
  RefreshRateInfo dns_failure_refresh_rate = 43;
  
  // respect_dns_ttl indicates if DNS TTL is respected
  bool respect_dns_ttl = 44;
  
  // dns_refresh_rate is the DNS refresh rate
  string dns_refresh_rate = 45;
  
  // dns_query_timeout is the DNS query timeout
  string dns_query_timeout = 46;
  
  // eds_cluster_config contains EDS cluster configuration
  EdsClusterConfigInfo eds_cluster_config = 47;
}

// EndpointSummary contains endpoint configuration information
message EndpointSummary {
  // cluster_name is the name of the cluster
  string cluster_name = 1;
  
  // endpoints contains endpoint information
  repeated EndpointInfo endpoints = 2;
}

// EndpointInfo contains individual endpoint information
message EndpointInfo {
  // address is the endpoint address
  string address = 1;
  
  // port is the endpoint port
  uint32 port = 2;
  
  // health is the health status
  string health = 3;
  
  // weight is the load balancing weight
  uint32 weight = 4;
  
  // priority is the endpoint priority
  uint32 priority = 5;
  
  // host_identifier is the unique host identifier
  string host_identifier = 6;
  
  // metadata contains endpoint metadata as key-value pairs
  map<string, string> metadata = 7;
  
  // load_balancing_weight is the load balancing weight
  uint32 load_balancing_weight = 8;
}

// RouteConfigSummary contains route configuration summary
message RouteConfigSummary {
  // name is the route configuration name
  string name = 1;
  
  // virtual_hosts contains virtual hosts
  repeated VirtualHostInfo virtual_hosts = 2;
  
  // internal_only_headers contains headers that are internal only
  repeated string internal_only_headers = 3;
  
  // response_headers_to_add contains headers to add to responses
  repeated HeaderValueOption response_headers_to_add = 4;
  
  // response_headers_to_remove contains headers to remove from responses
  repeated string response_headers_to_remove = 5;
  
  // request_headers_to_add contains headers to add to requests
  repeated HeaderValueOption request_headers_to_add = 6;
  
  // request_headers_to_remove contains headers to remove from requests
  repeated string request_headers_to_remove = 7;
  
  // most_specific_header_mutations_wins indicates if most specific header mutations win
  bool most_specific_header_mutations_wins = 8;
  
  // validate_clusters indicates if clusters should be validated
  bool validate_clusters = 9;
  
  // max_direct_response_body_size_bytes is the maximum direct response body size
  uint32 max_direct_response_body_size_bytes = 10;
  
  // cluster_specifier_plugins contains cluster specifier plugin configuration
  repeated ClusterSpecifierPluginInfo cluster_specifier_plugins = 11;
  
  // raw_config contains the raw route configuration in JSON format
  string raw_config = 12;
  
  // type indicates the route type category
  RouteType type = 13;
}

// Helper message types for complex configurations

// HeaderValueOption contains header value configuration
message HeaderValueOption {
  // header contains the header information
  HeaderInfo header = 1;
  
  // append indicates if the header should be appended
  bool append = 2;
  
  // keep_empty_value indicates if empty values should be kept
  bool keep_empty_value = 3;
}

// HeaderInfo contains header information
message HeaderInfo {
  // key is the header key
  string key = 1;
  
  // value is the header value
  string value = 2;
}

// WeightedClusterInfo contains weighted cluster information
message WeightedClusterInfo {
  // name is the cluster name
  string name = 1;
  
  // weight is the cluster weight
  uint32 weight = 2;
  
  // metadata_match contains metadata for matching
  map<string, string> metadata_match = 3;
  
  // request_headers_to_add contains headers to add to requests
  repeated HeaderValueOption request_headers_to_add = 4;
  
  // request_headers_to_remove contains headers to remove from requests
  repeated string request_headers_to_remove = 5;
  
  // response_headers_to_add contains headers to add to responses
  repeated HeaderValueOption response_headers_to_add = 6;
  
  // response_headers_to_remove contains headers to remove from responses
  repeated string response_headers_to_remove = 7;
  
  // host_rewrite_specifier indicates how host rewriting is done
  string host_rewrite_specifier = 8;
}

// RegexRewriteInfo contains regex rewrite information
message RegexRewriteInfo {
  // pattern is the regex pattern
  string pattern = 1;
  
  // substitution is the substitution string
  string substitution = 2;
}

// RuntimeFractionInfo contains runtime fraction information
message RuntimeFractionInfo {
  // default_value contains the default fraction value
  FractionInfo default_value = 1;
  
  // runtime_key is the runtime key
  string runtime_key = 2;
}

// FractionInfo contains fraction information
message FractionInfo {
  // numerator is the fraction numerator
  uint32 numerator = 1;
  
  // denominator is the fraction denominator
  string denominator = 2;
}

// HeaderMatcherInfo contains header matching information
message HeaderMatcherInfo {
  // name is the header name
  string name = 1;
  
  // present_match indicates presence matching
  bool present_match = 2;
  
  // exact_match contains exact match value
  string exact_match = 3;
  
  // safe_regex_match contains regex match pattern
  string safe_regex_match = 4;
  
  // range_match contains range matching criteria
  RangeMatchInfo range_match = 5;
  
  // prefix_match contains prefix match value
  string prefix_match = 6;
  
  // suffix_match contains suffix match value
  string suffix_match = 7;
  
  // contains_match contains substring match value
  string contains_match = 8;
  
  // invert_match indicates if the match should be inverted
  bool invert_match = 9;
  
  // treat_missing_as_empty indicates if missing headers are treated as empty
  bool treat_missing_as_empty = 10;
}

// RangeMatchInfo contains range matching information
message RangeMatchInfo {
  // start is the range start
  int64 start = 1;
  
  // end is the range end
  int64 end = 2;
}

// QueryParameterMatcherInfo contains query parameter matching information
message QueryParameterMatcherInfo {
  // name is the parameter name
  string name = 1;
  
  // string_match contains string matching criteria
  string string_match = 2;
  
  // present_match indicates presence matching
  bool present_match = 3;
}

// GrpcRouteMatchInfo contains gRPC route matching information
message GrpcRouteMatchInfo {
  // Add gRPC-specific fields as needed
}

// TlsContextMatchInfo contains TLS context matching information
message TlsContextMatchInfo {
  // Add TLS context matching fields as needed
}

// MetadataMatcherInfo contains metadata matching information
message MetadataMatcherInfo {
  // filter is the metadata filter
  string filter = 1;
  
  // path contains the metadata path
  repeated MetadataMatchPathInfo path = 2;
  
  // value is the metadata value
  string value = 3;
}

// MetadataMatchPathInfo contains metadata match path information
message MetadataMatchPathInfo {
  // key is the path key
  string key = 1;
}

// DecoratorInfo contains decorator information
message DecoratorInfo {
  // operation is the operation name
  string operation = 1;
  
  // propagate indicates if the decorator should propagate
  bool propagate = 2;
}

// TracingInfo contains tracing information
message TracingInfo {
  // client_sampling contains client sampling configuration
  FractionInfo client_sampling = 1;
  
  // random_sampling contains random sampling configuration
  FractionInfo random_sampling = 2;
  
  // overall_sampling contains overall sampling configuration
  FractionInfo overall_sampling = 3;
  
  // verbose indicates if verbose tracing is enabled
  bool verbose = 4;
  
  // max_path_tag_length is the maximum path tag length
  uint32 max_path_tag_length = 5;
  
  // custom_tags contains custom tag configuration
  repeated CustomTagInfo custom_tags = 6;
}

// CustomTagInfo contains custom tag information
message CustomTagInfo {
  // tag is the tag name
  string tag = 1;
  
  // request_header is the request header to use
  string request_header = 2;
  
  // response_header is the response header to use
  string response_header = 3;
  
  // environment is the environment variable to use
  string environment = 4;
  
  // literal is the literal value to use
  string literal = 5;
  
  // request_header_to_add is the request header to add
  string request_header_to_add = 6;
  
  // response_header_to_add is the response header to add
  string response_header_to_add = 7;
}

// RetryPolicyInfo contains retry policy information
message RetryPolicyInfo {
  // retry_on contains retry conditions
  string retry_on = 1;
  
  // num_retries is the number of retries
  uint32 num_retries = 2;
  
  // per_try_timeout is the timeout per try
  string per_try_timeout = 3;
  
  // retry_priority is the retry priority
  string retry_priority = 4;
  
  // retry_host_predicate contains retry host predicates
  repeated string retry_host_predicate = 5;
  
  // host_selection_retry_max_attempts is the maximum host selection retry attempts
  int64 host_selection_retry_max_attempts = 6;
  
  // retriable_status_codes contains retriable status codes
  repeated uint32 retriable_status_codes = 7;
  
  // retry_back_off contains retry backoff configuration
  RetryBackOffInfo retry_back_off = 8;
  
  // retriable_headers contains retriable header matching
  repeated HeaderMatcherInfo retriable_headers = 9;
  
  // retriable_request_headers contains retriable request header matching
  repeated HeaderMatcherInfo retriable_request_headers = 10;
}

// RetryBackOffInfo contains retry backoff information
message RetryBackOffInfo {
  // base_interval is the base interval
  string base_interval = 1;
  
  // max_interval is the maximum interval
  string max_interval = 2;
}

// RequestMirrorPolicy contains request mirror policy information
message RequestMirrorPolicy {
  // cluster is the mirror cluster
  string cluster = 1;
  
  // runtime_fraction contains runtime fraction configuration
  RuntimeFractionInfo runtime_fraction = 2;
  
  // trace_sampled indicates if trace sampling is enabled
  bool trace_sampled = 3;
}

// RateLimitInfo contains rate limiting information
message RateLimitInfo {
  // stage is the rate limit stage
  uint32 stage = 1;
  
  // disable_key is the disable key
  string disable_key = 2;
  
  // actions contains rate limit actions
  repeated RateLimitActionInfo actions = 3;
  
  // limit contains rate limit descriptor
  RateLimitDescriptorInfo limit = 4;
}

// RateLimitActionInfo contains rate limit action information
message RateLimitActionInfo {
  // action_specifier indicates the type of action
  string action_specifier = 1;
  
  // source_cluster indicates if source cluster is used
  bool source_cluster = 2;
  
  // destination_cluster indicates if destination cluster is used
  bool destination_cluster = 3;
  
  // request_headers contains request header action
  RequestHeadersInfo request_headers = 4;
  
  // remote_address indicates if remote address is used
  bool remote_address = 5;
  
  // generic_key contains generic key action
  GenericKeyInfo generic_key = 6;
  
  // header_value_match contains header value match action
  HeaderValueMatchInfo header_value_match = 7;
  
  // dynamic_metadata contains dynamic metadata action
  DynamicMetadataInfo dynamic_metadata = 8;
  
  // metadata contains metadata action
  MetadataInfo metadata = 9;
  
  // extension contains extension action
  ExtensionInfo extension = 10;
}

// RateLimitDescriptorInfo contains rate limit descriptor information
message RateLimitDescriptorInfo {
  // entries contains descriptor entries
  repeated RateLimitDescriptorEntryInfo entries = 1;
}

// RateLimitDescriptorEntryInfo contains rate limit descriptor entry information
message RateLimitDescriptorEntryInfo {
  // key is the descriptor key
  string key = 1;
  
  // value is the descriptor value
  string value = 2;
}

// RequestHeadersInfo contains request headers information
message RequestHeadersInfo {
  // header_name is the header name
  string header_name = 1;
  
  // descriptor_key is the descriptor key
  string descriptor_key = 2;
  
  // skip_if_absent indicates if the action should be skipped if header is absent
  bool skip_if_absent = 3;
}

// GenericKeyInfo contains generic key information
message GenericKeyInfo {
  // descriptor_value is the descriptor value
  string descriptor_value = 1;
  
  // descriptor_key is the descriptor key
  string descriptor_key = 2;
}

// HeaderValueMatchInfo contains header value match information
message HeaderValueMatchInfo {
  // descriptor_value is the descriptor value
  string descriptor_value = 1;
  
  // expect_match indicates if a match is expected
  bool expect_match = 2;
  
  // headers contains header matching criteria
  repeated HeaderMatcherInfo headers = 3;
}

// DynamicMetadataInfo contains dynamic metadata information
message DynamicMetadataInfo {
  // metadata_key contains the metadata key
  MetadataKeyInfo metadata_key = 1;
  
  // default_value is the default value
  string default_value = 2;
  
  // source is the metadata source
  string source = 3;
}

// MetadataInfo contains metadata information
message MetadataInfo {
  // metadata_key contains the metadata key
  MetadataKeyInfo metadata_key = 1;
  
  // default_value is the default value
  string default_value = 2;
  
  // source is the metadata source
  string source = 3;
}

// MetadataKeyInfo contains metadata key information
message MetadataKeyInfo {
  // key is the metadata key
  string key = 1;
  
  // path contains the metadata path
  repeated string path = 2;
}

// ExtensionInfo contains extension information
message ExtensionInfo {
  // name is the extension name
  string name = 1;
  
  // typed_config_type is the type URL of the typed config
  string typed_config_type = 2;
}

// HedgePolicyInfo contains hedge policy information
message HedgePolicyInfo {
  // initial_requests is the number of initial requests
  uint32 initial_requests = 1;
  
  // additional_request_chance contains additional request chance
  FractionInfo additional_request_chance = 2;
  
  // hedge_on_per_try_timeout indicates if hedging on per-try timeout is enabled
  bool hedge_on_per_try_timeout = 3;
}

// MaxStreamDurationInfo contains max stream duration information
message MaxStreamDurationInfo {
  // max_stream_duration is the maximum stream duration
  string max_stream_duration = 1;
  
  // grpc_timeout_header_max is the maximum gRPC timeout header value
  string grpc_timeout_header_max = 2;
  
  // grpc_timeout_header_offset is the gRPC timeout header offset
  string grpc_timeout_header_offset = 3;
}

// VirtualClusterInfo contains virtual cluster information
message VirtualClusterInfo {
  // pattern is the virtual cluster pattern
  string pattern = 1;
  
  // name is the virtual cluster name
  string name = 2;
  
  // method is the HTTP method
  string method = 3;
}

// CorsInfo contains CORS information
message CorsInfo {
  // allow_origin contains allowed origins
  repeated string allow_origin = 1;
  
  // allow_origin_string_match contains allowed origin string matches
  repeated string allow_origin_string_match = 2;
  
  // allow_methods contains allowed methods
  string allow_methods = 3;
  
  // allow_headers contains allowed headers
  string allow_headers = 4;
  
  // expose_headers contains exposed headers
  string expose_headers = 5;
  
  // max_age is the maximum age
  string max_age = 6;
  
  // allow_credentials indicates if credentials are allowed
  bool allow_credentials = 7;
  
  // enabled_specifier indicates how CORS is enabled
  string enabled_specifier = 8;
  
  // shadow_enabled indicates if shadow mode is enabled
  bool shadow_enabled = 9;
}

// UpgradeConfigInfo contains upgrade configuration information
message UpgradeConfigInfo {
  // upgrade_type is the upgrade type
  string upgrade_type = 1;
  
  // enabled indicates if the upgrade is enabled
  bool enabled = 2;
}

// InternalRedirectPolicyInfo contains internal redirect policy information
message InternalRedirectPolicyInfo {
  // max_internal_redirects is the maximum number of internal redirects
  uint32 max_internal_redirects = 1;
  
  // redirect_response_codes contains redirect response codes
  repeated uint32 redirect_response_codes = 2;
  
  // predicates contains redirect predicates
  repeated InternalRedirectPredicateInfo predicates = 3;
  
  // allow_cross_scheme_redirect indicates if cross-scheme redirects are allowed
  bool allow_cross_scheme_redirect = 4;
}

// InternalRedirectPredicateInfo contains internal redirect predicate information
message InternalRedirectPredicateInfo {
  // name is the predicate name
  string name = 1;
  
  // typed_config_type is the type URL of the typed config
  string typed_config_type = 2;
}

// HashPolicyInfo contains hash policy information
message HashPolicyInfo {
  // policy_specifier indicates the type of hash policy
  string policy_specifier = 1;
  
  // header contains header hash policy
  HashPolicyHeaderInfo header = 2;
  
  // cookie contains cookie hash policy
  HashPolicyCookieInfo cookie = 3;
  
  // connection_properties contains connection properties hash policy
  HashPolicyConnectionPropertiesInfo connection_properties = 4;
  
  // query_parameter contains query parameter hash policy
  HashPolicyQueryParameterInfo query_parameter = 5;
  
  // filter_state contains filter state hash policy
  HashPolicyFilterStateInfo filter_state = 6;
  
  // terminal indicates if this is a terminal hash policy
  bool terminal = 7;
}

// HashPolicyHeaderInfo contains header hash policy information
message HashPolicyHeaderInfo {
  // header_name is the header name
  string header_name = 1;
  
  // regex_rewrite contains regex rewrite configuration
  RegexRewriteInfo regex_rewrite = 2;
}

// HashPolicyCookieInfo contains cookie hash policy information
message HashPolicyCookieInfo {
  // name is the cookie name
  string name = 1;
  
  // ttl is the cookie TTL
  string ttl = 2;
  
  // path is the cookie path
  string path = 3;
}

// HashPolicyConnectionPropertiesInfo contains connection properties hash policy information
message HashPolicyConnectionPropertiesInfo {
  // source_ip indicates if source IP is used
  bool source_ip = 1;
}

// HashPolicyQueryParameterInfo contains query parameter hash policy information
message HashPolicyQueryParameterInfo {
  // name is the query parameter name
  string name = 1;
}

// HashPolicyFilterStateInfo contains filter state hash policy information
message HashPolicyFilterStateInfo {
  // key is the filter state key
  string key = 1;
}

// TunnelingConfigInfo contains tunneling configuration information
message TunnelingConfigInfo {
  // hostname is the tunneling hostname
  string hostname = 1;
  
  // use_post indicates if POST method is used
  bool use_post = 2;
  
  // headers_to_add contains headers to add
  repeated HeaderValueOption headers_to_add = 3;
  
  // propagate_response_headers contains response headers to propagate
  repeated string propagate_response_headers = 4;
  
  // propagate_response_trailers contains response trailers to propagate
  repeated string propagate_response_trailers = 5;
}

// EndpointConfigInfo contains endpoint configuration information
message EndpointConfigInfo {
  // cluster_name is the cluster name
  string cluster_name = 1;
  
  // endpoints contains locality load balancing endpoints
  repeated LocalityLbEndpointsInfo endpoints = 2;
  
  // policy contains endpoint policy
  PolicyInfo policy = 3;
}

// LocalityLbEndpointsInfo contains locality load balancing endpoints information
message LocalityLbEndpointsInfo {
  // locality contains locality information
  LocalityInfo locality = 1;
  
  // lb_endpoints contains load balancing endpoints
  repeated LbEndpointInfo lb_endpoints = 2;
  
  // load_balancing_weight is the load balancing weight
  uint32 load_balancing_weight = 3;
  
  // priority is the endpoint priority
  uint32 priority = 4;
  
  // proximity is the endpoint proximity
  uint32 proximity = 5;
}

// LbEndpointInfo contains load balancing endpoint information
message LbEndpointInfo {
  // host_identifier is the host identifier
  string host_identifier = 1;
  
  // endpoint contains endpoint details
  EndpointDetailsInfo endpoint = 2;
  
  // health_status is the health status
  string health_status = 3;
  
  // metadata contains endpoint metadata as key-value pairs
  map<string, string> metadata = 4;
  
  // load_balancing_weight is the load balancing weight
  uint32 load_balancing_weight = 5;
}

// EndpointDetailsInfo contains endpoint details information
message EndpointDetailsInfo {
  // address is the endpoint address
  string address = 1;
  
  // port is the endpoint port
  uint32 port = 2;
  
  // hostname is the endpoint hostname
  string hostname = 3;
  
  // health_check_config contains health check configuration
  HealthCheckConfigInfo health_check_config = 4;
}

// HealthCheckConfigInfo contains health check configuration information
message HealthCheckConfigInfo {
  // port_value is the health check port
  uint32 port_value = 1;
  
  // hostname is the health check hostname
  string hostname = 2;
  
  // path is the health check path
  string path = 3;
}

// PolicyInfo contains policy information
message PolicyInfo {
  // drop_overloads contains drop overload configuration
  repeated DropOverloadInfo drop_overloads = 1;
  
  // overprovisioning_factor is the overprovisioning factor
  uint32 overprovisioning_factor = 2;
  
  // endpoint_stale_after is the endpoint stale timeout
  string endpoint_stale_after = 3;
  
  // disable_overprovisioning indicates if overprovisioning is disabled
  bool disable_overprovisioning = 4;
}

// DropOverloadInfo contains drop overload information
message DropOverloadInfo {
  // category is the drop category
  string category = 1;
  
  // drop_percentage contains drop percentage
  FractionInfo drop_percentage = 2;
}

// HealthCheckInfo contains health check information
message HealthCheckInfo {
  // timeout is the health check timeout
  string timeout = 1;
  
  // interval is the health check interval
  string interval = 2;
  
  // interval_jitter is the interval jitter
  string interval_jitter = 3;
  
  // interval_jitter_percent is the interval jitter percentage
  uint32 interval_jitter_percent = 4;
  
  // unhealthy_threshold is the unhealthy threshold
  uint32 unhealthy_threshold = 5;
  
  // healthy_threshold is the healthy threshold
  uint32 healthy_threshold = 6;
  
  // alt_port is the alternative port
  uint32 alt_port = 7;
  
  // reuse_connection indicates if connection reuse is enabled
  bool reuse_connection = 8;
  
  // http_health_check contains HTTP health check configuration
  HttpHealthCheckInfo http_health_check = 9;
  
  // tcp_health_check contains TCP health check configuration
  TcpHealthCheckInfo tcp_health_check = 10;
  
  // grpc_health_check contains gRPC health check configuration
  GrpcHealthCheckInfo grpc_health_check = 11;
  
  // custom_health_check contains custom health check configuration
  CustomHealthCheckInfo custom_health_check = 12;
  
  // no_traffic_interval is the no traffic interval
  string no_traffic_interval = 13;
  
  // no_traffic_healthy_interval is the no traffic healthy interval
  string no_traffic_healthy_interval = 14;
  
  // unhealthy_interval is the unhealthy interval
  string unhealthy_interval = 15;
  
  // unhealthy_edge_interval is the unhealthy edge interval
  string unhealthy_edge_interval = 16;
  
  // healthy_edge_interval is the healthy edge interval
  string healthy_edge_interval = 17;
  
  // event_log_path is the event log path
  string event_log_path = 18;
  
  // event_service contains event service configuration
  EventServiceConfigInfo event_service = 19;
  
  // always_log_health_check_failures indicates if health check failures are always logged
  bool always_log_health_check_failures = 20;
  
  // tls_options contains TLS options
  TlsOptionsInfo tls_options = 21;
  
  // transport_socket contains transport socket configuration
  TransportSocketInfo transport_socket = 22;
}

// HttpHealthCheckInfo contains HTTP health check information
message HttpHealthCheckInfo {
  // host is the health check host
  string host = 1;
  
  // path is the health check path
  string path = 2;
  
  // send is the data to send
  string send = 3;
  
  // receive contains expected receive patterns
  repeated string receive = 4;
  
  // request_headers_to_add contains headers to add to requests
  repeated HeaderValueOption request_headers_to_add = 5;
  
  // request_headers_to_remove contains headers to remove from requests
  repeated string request_headers_to_remove = 6;
  
  // expected_statuses contains expected status ranges
  repeated StatusRangeInfo expected_statuses = 7;
  
  // use_http2 indicates if HTTP/2 is used
  bool use_http2 = 8;
  
  // service_name_matcher contains service name matcher
  StringMatcherInfo service_name_matcher = 9;
  
  // method is the HTTP method
  string method = 10;
}

// TcpHealthCheckInfo contains TCP health check information
message TcpHealthCheckInfo {
  // send contains data to send
  repeated string send = 1;
  
  // receive contains expected receive patterns
  repeated string receive = 2;
}

// GrpcHealthCheckInfo contains gRPC health check information
message GrpcHealthCheckInfo {
  // service_name is the gRPC service name
  string service_name = 1;
  
  // authority is the gRPC authority
  string authority = 2;
  
  // initial_metadata contains initial metadata
  repeated HeaderValueOption initial_metadata = 3;
}

// CustomHealthCheckInfo contains custom health check information
message CustomHealthCheckInfo {
  // name is the health check name
  string name = 1;
  
  // typed_config_type is the type URL of the typed config
  string typed_config_type = 2;
}

// EventServiceConfigInfo contains event service configuration information
message EventServiceConfigInfo {
  // event_service contains event service configuration
  ConfigSourceInfo event_service = 1;
}

// TlsOptionsInfo contains TLS options information
message TlsOptionsInfo {
  // alpn_protocols contains ALPN protocols
  repeated string alpn_protocols = 1;
}

// TransportSocketInfo contains transport socket information
message TransportSocketInfo {
  // name is the transport socket name
  string name = 1;
  
  // typed_config_type is the type URL of the typed config
  string typed_config_type = 2;
}

// StatusRangeInfo contains status range information
message StatusRangeInfo {
  // start is the range start
  uint64 start = 1;
  
  // end is the range end
  uint64 end = 2;
}

// StringMatcherInfo contains string matcher information
message StringMatcherInfo {
  // match_pattern is the match pattern type
  string match_pattern = 1;
  
  // exact_match contains exact match value
  string exact_match = 2;
  
  // prefix_match contains prefix match value
  string prefix_match = 3;
  
  // suffix_match contains suffix match value
  string suffix_match = 4;
  
  // safe_regex_match contains regex match pattern
  string safe_regex_match = 5;
  
  // contains_match contains substring match value
  string contains_match = 6;
  
  // ignore_case indicates if case should be ignored
  bool ignore_case = 7;
}

// CircuitBreakersInfo contains circuit breakers information
message CircuitBreakersInfo {
  // thresholds contains circuit breaker thresholds
  repeated ThresholdInfo thresholds = 1;
  
  // per_host_thresholds contains per-host thresholds
  repeated ThresholdInfo per_host_thresholds = 2;
}

// ThresholdInfo contains threshold information
message ThresholdInfo {
  // priority is the threshold priority
  string priority = 1;
  
  // max_connections is the maximum connections
  uint32 max_connections = 2;
  
  // max_pending_requests is the maximum pending requests
  uint32 max_pending_requests = 3;
  
  // max_requests is the maximum requests
  uint32 max_requests = 4;
  
  // max_retries is the maximum retries
  uint32 max_retries = 5;
  
  // track_remaining indicates if remaining resources are tracked
  bool track_remaining = 6;
  
  // max_connection_pools is the maximum connection pools
  uint32 max_connection_pools = 7;
}

// CommonHttpProtocolOptionsInfo contains common HTTP protocol options information
message CommonHttpProtocolOptionsInfo {
  // idle_timeout is the idle timeout
  string idle_timeout = 1;
  
  // max_connection_duration is the maximum connection duration
  string max_connection_duration = 2;
  
  // max_headers_count is the maximum headers count
  uint32 max_headers_count = 3;
  
  // max_stream_duration is the maximum stream duration
  string max_stream_duration = 4;
  
  // headers_with_underscores_action indicates how headers with underscores are handled
  string headers_with_underscores_action = 5;
  
  // max_requests_per_connection is the maximum requests per connection
  uint32 max_requests_per_connection = 6;
}

// HostInfo contains host information
message HostInfo {
  // socket_address contains socket address information
  SocketAddressInfo socket_address = 1;
  
  // pipe contains pipe information
  PipeInfo pipe = 2;
  
  // hostname is the hostname
  string hostname = 3;
  
  // health_check_config contains health check configuration
  HealthCheckConfigInfo health_check_config = 4;
}

// SocketAddressInfo contains socket address information
message SocketAddressInfo {
  // protocol is the socket protocol
  string protocol = 1;
  
  // address is the socket address
  string address = 2;
  
  // port_specifier indicates the port specifier type
  string port_specifier = 3;
  
  // port_value is the port value
  uint32 port_value = 4;
  
  // named_port is the named port
  string named_port = 5;
  
  // resolver_name is the resolver name
  string resolver_name = 6;
  
  // ipv4_compat indicates if IPv4 compatibility is enabled
  bool ipv4_compat = 7;
}

// PipeInfo contains pipe information
message PipeInfo {
  // path is the pipe path
  string path = 1;
  
  // mode is the pipe mode
  uint32 mode = 2;
}

// OutlierDetectionInfo contains outlier detection information
message OutlierDetectionInfo {
  // consecutive_server_error is the consecutive server error threshold
  uint32 consecutive_server_error = 1;
  
  // interval is the outlier detection interval
  string interval = 2;
  
  // base_ejection_time is the base ejection time
  string base_ejection_time = 3;
  
  // max_ejection_percent is the maximum ejection percentage
  uint32 max_ejection_percent = 4;
  
  // min_health_percent is the minimum health percentage
  uint32 min_health_percent = 5;
  
  // split_external_local_origin_errors indicates if external and local origin errors are split
  bool split_external_local_origin_errors = 6;
  
  // consecutive_local_origin_failure is the consecutive local origin failure threshold
  uint32 consecutive_local_origin_failure = 7;
  
  // consecutive_gateway_failure is the consecutive gateway failure threshold
  uint32 consecutive_gateway_failure = 8;
  
  // consecutive_5xx_failure is the consecutive 5xx failure threshold
  uint32 consecutive_5xx_failure = 9;
  
  // enforcing_consecutive_server_error is the enforcing consecutive server error percentage
  uint32 enforcing_consecutive_server_error = 10;
  
  // enforcing_success_rate is the enforcing success rate percentage
  uint32 enforcing_success_rate = 11;
  
  // success_rate_minimum_hosts is the success rate minimum hosts
  uint32 success_rate_minimum_hosts = 12;
  
  // success_rate_request_volume is the success rate request volume
  uint32 success_rate_request_volume = 13;
  
  // success_rate_stdev_factor is the success rate standard deviation factor
  uint32 success_rate_stdev_factor = 14;
  
  // enforcing_consecutive_local_origin_failure is the enforcing consecutive local origin failure percentage
  uint32 enforcing_consecutive_local_origin_failure = 15;
  
  // enforcing_consecutive_gateway_failure is the enforcing consecutive gateway failure percentage
  uint32 enforcing_consecutive_gateway_failure = 16;
  
  // enforcing_local_origin_success_rate is the enforcing local origin success rate percentage
  uint32 enforcing_local_origin_success_rate = 17;
  
  // local_origin_success_rate_minimum_hosts is the local origin success rate minimum hosts
  uint32 local_origin_success_rate_minimum_hosts = 18;
  
  // local_origin_success_rate_request_volume is the local origin success rate request volume
  uint32 local_origin_success_rate_request_volume = 19;
  
  // local_origin_success_rate_stdev_factor is the local origin success rate standard deviation factor
  uint32 local_origin_success_rate_stdev_factor = 20;
  
  // enforcing_5xx_failure is the enforcing 5xx failure percentage
  uint32 enforcing_5xx_failure = 21;
  
  // max_ejection_time is the maximum ejection time
  string max_ejection_time = 22;
}

// UpstreamBindConfigInfo contains upstream bind configuration information
message UpstreamBindConfigInfo {
  // source_address contains source address information
  SocketAddressInfo source_address = 1;
  
  // freebind_interface indicates if freebind interface is enabled
  bool freebind_interface = 2;
  
  // socket_options contains socket options
  repeated SocketOptionInfo socket_options = 3;
}

// SocketOptionInfo contains socket option information
message SocketOptionInfo {
  // level is the socket option level
  int64 level = 1;
  
  // name is the socket option name
  int64 name = 2;
  
  // int_value is the integer value
  int64 int_value = 3;
  
  // buf_value is the buffer value
  string buf_value = 4;
  
  // state is the socket option state
  string state = 5;
}

// LbSubsetConfigInfo contains load balancing subset configuration information
message LbSubsetConfigInfo {
  // fallback_policy is the fallback policy
  string fallback_policy = 1;
  
  // default_subset contains default subset metadata
  map<string, string> default_subset = 2;
  
  // subset_selectors contains subset selectors
  repeated LbSubsetSelectorInfo subset_selectors = 3;
  
  // locality_weight_aware indicates if locality weight awareness is enabled
  bool locality_weight_aware = 4;
  
  // scale_locality_weight indicates if locality weight scaling is enabled
  bool scale_locality_weight = 5;
  
  // panic_mode_any indicates if panic mode any is enabled
  bool panic_mode_any = 6;
  
  // list_as_any indicates if list as any is enabled
  bool list_as_any = 7;
  
  // metadata_fallback_policy is the metadata fallback policy
  string metadata_fallback_policy = 8;
  
  // allow_redundant_keys indicates if redundant keys are allowed
  bool allow_redundant_keys = 9;
}

// LbSubsetSelectorInfo contains load balancing subset selector information
message LbSubsetSelectorInfo {
  // keys contains selector keys
  repeated string keys = 1;
  
  // single_host_per_subset indicates if single host per subset is enabled
  bool single_host_per_subset = 2;
  
  // fallback_policy is the fallback policy
  string fallback_policy = 3;
  
  // fallback_keys_subset contains fallback keys subset
  repeated string fallback_keys_subset = 4;
}

// RingHashLbConfigInfo contains ring hash load balancing configuration information
message RingHashLbConfigInfo {
  // minimum_ring_size is the minimum ring size
  uint64 minimum_ring_size = 1;
  
  // hash_function is the hash function
  string hash_function = 2;
  
  // maximum_ring_size is the maximum ring size
  uint64 maximum_ring_size = 3;
}

// MaglevLbConfigInfo contains Maglev load balancing configuration information
message MaglevLbConfigInfo {
  // table_size is the table size
  uint64 table_size = 1;
}

// OriginalDstLbConfigInfo contains original destination load balancing configuration information
message OriginalDstLbConfigInfo {
  // use_http_header indicates if HTTP header is used
  bool use_http_header = 1;
}

// LeastRequestLbConfigInfo contains least request load balancing configuration information
message LeastRequestLbConfigInfo {
  // choice_count is the choice count
  uint32 choice_count = 1;
  
  // active_request_bias contains active request bias
  RuntimeDoubleInfo active_request_bias = 2;
}

// RuntimeDoubleInfo contains runtime double information
message RuntimeDoubleInfo {
  // default_value is the default value
  double default_value = 1;
  
  // runtime_key is the runtime key
  string runtime_key = 2;
}

// CommonLbConfigInfo contains common load balancing configuration information
message CommonLbConfigInfo {
  // healthy_panic_threshold contains healthy panic threshold
  FractionInfo healthy_panic_threshold = 1;
  
  // zone_aware_lb_config contains zone-aware load balancing configuration
  ZoneAwareLbConfigInfo zone_aware_lb_config = 2;
  
  // locality_lb_config contains locality load balancing configuration
  LocalityLbConfigInfo locality_lb_config = 3;
  
  // update_merge_window is the update merge window
  string update_merge_window = 4;
  
  // ignore_new_hosts_until_first_hc indicates if new hosts are ignored until first health check
  bool ignore_new_hosts_until_first_hc = 5;
  
  // close_connections_on_host_set_change indicates if connections are closed on host set change
  bool close_connections_on_host_set_change = 6;
  
  // consistent_hashing_lb_config contains consistent hashing load balancing configuration
  ConsistentHashingLbConfigInfo consistent_hashing_lb_config = 7;
}

// ZoneAwareLbConfigInfo contains zone-aware load balancing configuration information
message ZoneAwareLbConfigInfo {
  // routing_enabled contains routing enabled fraction
  FractionInfo routing_enabled = 1;
  
  // min_cluster_size is the minimum cluster size
  uint64 min_cluster_size = 2;
}

// LocalityLbConfigInfo contains locality load balancing configuration information
message LocalityLbConfigInfo {
  // zone_aware_lb_config contains zone-aware load balancing configuration
  ZoneAwareLbConfigInfo zone_aware_lb_config = 1;
  
  // locality_weighted_lb_config contains locality weighted load balancing configuration
  LocalityWeightedLbConfigInfo locality_weighted_lb_config = 2;
}

// LocalityWeightedLbConfigInfo contains locality weighted load balancing configuration information
message LocalityWeightedLbConfigInfo {
  // Add fields as needed
}

// ConsistentHashingLbConfigInfo contains consistent hashing load balancing configuration information
message ConsistentHashingLbConfigInfo {
  // use_hostname_for_hashing indicates if hostname is used for hashing
  bool use_hostname_for_hashing = 1;
  
  // hash_balance_factor is the hash balance factor
  uint32 hash_balance_factor = 2;
}

// UpstreamConnectionOptionsInfo contains upstream connection options information
message UpstreamConnectionOptionsInfo {
  // tcp_keepalive contains TCP keepalive configuration
  TcpKeepaliveInfo tcp_keepalive = 1;
  
  // socket_options contains socket options
  repeated SocketOptionInfo socket_options = 2;
}

// TcpKeepaliveInfo contains TCP keepalive information
message TcpKeepaliveInfo {
  // keepalive_probes is the number of keepalive probes
  uint32 keepalive_probes = 1;
  
  // keepalive_time is the keepalive time
  uint32 keepalive_time = 2;
  
  // keepalive_interval is the keepalive interval
  uint32 keepalive_interval = 3;
}

// ClusterFilterInfo contains cluster filter information
message ClusterFilterInfo {
  // name is the filter name
  string name = 1;
  
  // typed_config_type is the type URL of the typed config
  string typed_config_type = 2;
}

// DnsResolverInfo contains DNS resolver information
message DnsResolverInfo {
  // socket_address contains socket address information
  SocketAddressInfo socket_address = 1;
  
  // resolver_options contains resolver options
  repeated string resolver_options = 2;
}

// RefreshRateInfo contains refresh rate information
message RefreshRateInfo {
  // base_interval is the base interval
  string base_interval = 1;
  
  // max_interval is the maximum interval
  string max_interval = 2;
}

// EdsClusterConfigInfo contains EDS cluster configuration information
message EdsClusterConfigInfo {
  // eds_config contains EDS configuration
  ConfigSourceInfo eds_config = 1;
  
  // service_name is the service name
  string service_name = 2;
}

// ClusterSpecifierPluginInfo contains cluster specifier plugin information
message ClusterSpecifierPluginInfo {
  // extension contains extension information
  ExtensionInfo extension = 1;
  
  // is_optional indicates if the plugin is optional
  bool is_optional = 2;
}